/*
AVACloud API 1.51.0

AVACloud API specification

API version: 1.51.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
	"fmt"
)

// IdsConnectVersion Represents valid IDS Connect versions for export
type IdsConnectVersion string

// List of IdsConnectVersion
const (
	IDSCONNECTVERSION_V2_5 IdsConnectVersion = "V2_5"
)

// All allowed values of IdsConnectVersion enum
var AllowedIdsConnectVersionEnumValues = []IdsConnectVersion{
	"V2_5",
}

func (v *IdsConnectVersion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IdsConnectVersion(value)
	for _, existing := range AllowedIdsConnectVersionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IdsConnectVersion", value)
}

// NewIdsConnectVersionFromValue returns a pointer to a valid IdsConnectVersion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdsConnectVersionFromValue(v string) (*IdsConnectVersion, error) {
	ev := IdsConnectVersion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdsConnectVersion: valid values are %v", v, AllowedIdsConnectVersionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdsConnectVersion) IsValid() bool {
	for _, existing := range AllowedIdsConnectVersionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IdsConnectVersion value
func (v IdsConnectVersion) Ptr() *IdsConnectVersion {
	return &v
}

type NullableIdsConnectVersion struct {
	value *IdsConnectVersion
	isSet bool
}

func (v NullableIdsConnectVersion) Get() *IdsConnectVersion {
	return v.value
}

func (v *NullableIdsConnectVersion) Set(val *IdsConnectVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableIdsConnectVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableIdsConnectVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdsConnectVersion(val *IdsConnectVersion) *NullableIdsConnectVersion {
	return &NullableIdsConnectVersion{value: val, isSet: true}
}

func (v NullableIdsConnectVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdsConnectVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
