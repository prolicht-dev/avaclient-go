/*
AVACloud API 1.41.8

AVACloud API specification

API version: 1.41.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
)

// checks if the SubDescriptionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubDescriptionDto{}

// SubDescriptionDto This is appended to a Position and is used to separate the complete Position into smaller amounts to be described separately, for example concrete walls could be attached to different building storeys.
type SubDescriptionDto struct {
	// Elements GUID identifier.
	Id string `json:"id"`
	// Returns the total calculated sum of all quantity assignments. Will return the result rounded to three decimal places.
	Quantity float32 `json:"quantity"`
	// You can use this property to directly set the quantity for this sub description. This will override any given QuantityComponents
	QuantityOverride *float32 `json:"quantityOverride,omitempty"`
	// Holds quantity information for this sub description. Quantity is listening to changes here and is reporting the total sum of all quantity components.
	QuantityComponents []CalculationDto `json:"quantityComponents,omitempty"`
	// Indicates if the bidder is asked to specify an amount.
	AmountToBeEnteredByBidder bool `json:"amountToBeEnteredByBidder"`
	// Identifier for this SubDescription.
	Identifier *string `json:"identifier,omitempty"`
	// Short description for this DescriptionBase element.
	ShortText *string `json:"shortText,omitempty"`
	// Detailed description for this DescriptionBase element. When the HtmlLongText is set, this is automatically overwritten and filled with the appropriate plain text representation of the Html text. Vice versa, setting this property overrides the HtmlLongText.
	LongText *string `json:"longText,omitempty"`
	// If this is given, then the sub description has a different unit tag than the parent position.
	UnitTag *string `json:"unitTag,omitempty"`
	// This contains the Html representation of the Longtext. When the LongText is set, this is automatically overwritten and filled with the appropriate Html representation of the plaintext. Vice versa, setting this property overrides the LongText. GAEB 90 and GAEB 2000 exports do not support any image functionality. In GAEB XML, only images that use an embedded Base64 data uri are exported, regular url references are cleared before written out.
	HtmlLongText            *string                     `json:"htmlLongText,omitempty"`
	AdditionType            AdditionTypeDto             `json:"additionType"`
	StandardizedDescription *StandardizedDescriptionDto `json:"standardizedDescription,omitempty"`
	// This identifier can be used to point to the Id of an ExecutionDescription in the same ServiceSpecification. ExecutionDescriptions act as a way to centrally describe how positions (or sub descriptions) should be executed in practice. Often, the position (or sub description) itself still has text of its own to highlight deviations from that or add more details. When working with import and export features, this property is only supported in GAEB 90 data exchange.
	ExecutionDescriptionReference *string `json:"executionDescriptionReference,omitempty"`
	// These are Catalogues that are used within this Calculation. Catalogues are used to describe catalogues, or collections, that can be used to describe elements with commonly known properties. For example, QuantityAssignments use these to categorize themselves. They are propagate to all child elements, e.g. other containers and QuantityAssignments. In the context of a ServiceSpecification, all elements share the same instance of the collection.
	ProjectCatalogues []CatalogueDto `json:"projectCatalogues,omitempty"`
	// This is an identifier specific for this description. Some exchange formats, like GAEB XML, use it to identify descriptions. It's different to an elements identifier in that it should only apply to the description component, meaning the text itself.
	DescriptionId                  *string `json:"descriptionId,omitempty"`
	HasBidderCommentInHtmlLongText bool    `json:"hasBidderCommentInHtmlLongText"`
	ElementType                    *string `json:"elementType,omitempty"`
	ElementTypeDiscriminator       *string `json:"elementTypeDiscriminator,omitempty"`
}

// NewSubDescriptionDto instantiates a new SubDescriptionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubDescriptionDto(id string, quantity float32, amountToBeEnteredByBidder bool, additionType AdditionTypeDto, hasBidderCommentInHtmlLongText bool) *SubDescriptionDto {
	this := SubDescriptionDto{}
	this.Id = id
	this.Quantity = quantity
	this.AmountToBeEnteredByBidder = amountToBeEnteredByBidder
	this.AdditionType = additionType
	this.HasBidderCommentInHtmlLongText = hasBidderCommentInHtmlLongText
	return &this
}

// NewSubDescriptionDtoWithDefaults instantiates a new SubDescriptionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubDescriptionDtoWithDefaults() *SubDescriptionDto {
	this := SubDescriptionDto{}
	return &this
}

// GetId returns the Id field value
func (o *SubDescriptionDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SubDescriptionDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SubDescriptionDto) SetId(v string) {
	o.Id = v
}

// GetQuantity returns the Quantity field value
func (o *SubDescriptionDto) GetQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *SubDescriptionDto) GetQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *SubDescriptionDto) SetQuantity(v float32) {
	o.Quantity = v
}

// GetQuantityOverride returns the QuantityOverride field value if set, zero value otherwise.
func (o *SubDescriptionDto) GetQuantityOverride() float32 {
	if o == nil || IsNil(o.QuantityOverride) {
		var ret float32
		return ret
	}
	return *o.QuantityOverride
}

// GetQuantityOverrideOk returns a tuple with the QuantityOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubDescriptionDto) GetQuantityOverrideOk() (*float32, bool) {
	if o == nil || IsNil(o.QuantityOverride) {
		return nil, false
	}
	return o.QuantityOverride, true
}

// HasQuantityOverride returns a boolean if a field has been set.
func (o *SubDescriptionDto) HasQuantityOverride() bool {
	if o != nil && !IsNil(o.QuantityOverride) {
		return true
	}

	return false
}

// SetQuantityOverride gets a reference to the given float32 and assigns it to the QuantityOverride field.
func (o *SubDescriptionDto) SetQuantityOverride(v float32) {
	o.QuantityOverride = &v
}

// GetQuantityComponents returns the QuantityComponents field value if set, zero value otherwise.
func (o *SubDescriptionDto) GetQuantityComponents() []CalculationDto {
	if o == nil || IsNil(o.QuantityComponents) {
		var ret []CalculationDto
		return ret
	}
	return o.QuantityComponents
}

// GetQuantityComponentsOk returns a tuple with the QuantityComponents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubDescriptionDto) GetQuantityComponentsOk() ([]CalculationDto, bool) {
	if o == nil || IsNil(o.QuantityComponents) {
		return nil, false
	}
	return o.QuantityComponents, true
}

// HasQuantityComponents returns a boolean if a field has been set.
func (o *SubDescriptionDto) HasQuantityComponents() bool {
	if o != nil && !IsNil(o.QuantityComponents) {
		return true
	}

	return false
}

// SetQuantityComponents gets a reference to the given []CalculationDto and assigns it to the QuantityComponents field.
func (o *SubDescriptionDto) SetQuantityComponents(v []CalculationDto) {
	o.QuantityComponents = v
}

// GetAmountToBeEnteredByBidder returns the AmountToBeEnteredByBidder field value
func (o *SubDescriptionDto) GetAmountToBeEnteredByBidder() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AmountToBeEnteredByBidder
}

// GetAmountToBeEnteredByBidderOk returns a tuple with the AmountToBeEnteredByBidder field value
// and a boolean to check if the value has been set.
func (o *SubDescriptionDto) GetAmountToBeEnteredByBidderOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountToBeEnteredByBidder, true
}

// SetAmountToBeEnteredByBidder sets field value
func (o *SubDescriptionDto) SetAmountToBeEnteredByBidder(v bool) {
	o.AmountToBeEnteredByBidder = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *SubDescriptionDto) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubDescriptionDto) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *SubDescriptionDto) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *SubDescriptionDto) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetShortText returns the ShortText field value if set, zero value otherwise.
func (o *SubDescriptionDto) GetShortText() string {
	if o == nil || IsNil(o.ShortText) {
		var ret string
		return ret
	}
	return *o.ShortText
}

// GetShortTextOk returns a tuple with the ShortText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubDescriptionDto) GetShortTextOk() (*string, bool) {
	if o == nil || IsNil(o.ShortText) {
		return nil, false
	}
	return o.ShortText, true
}

// HasShortText returns a boolean if a field has been set.
func (o *SubDescriptionDto) HasShortText() bool {
	if o != nil && !IsNil(o.ShortText) {
		return true
	}

	return false
}

// SetShortText gets a reference to the given string and assigns it to the ShortText field.
func (o *SubDescriptionDto) SetShortText(v string) {
	o.ShortText = &v
}

// GetLongText returns the LongText field value if set, zero value otherwise.
func (o *SubDescriptionDto) GetLongText() string {
	if o == nil || IsNil(o.LongText) {
		var ret string
		return ret
	}
	return *o.LongText
}

// GetLongTextOk returns a tuple with the LongText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubDescriptionDto) GetLongTextOk() (*string, bool) {
	if o == nil || IsNil(o.LongText) {
		return nil, false
	}
	return o.LongText, true
}

// HasLongText returns a boolean if a field has been set.
func (o *SubDescriptionDto) HasLongText() bool {
	if o != nil && !IsNil(o.LongText) {
		return true
	}

	return false
}

// SetLongText gets a reference to the given string and assigns it to the LongText field.
func (o *SubDescriptionDto) SetLongText(v string) {
	o.LongText = &v
}

// GetUnitTag returns the UnitTag field value if set, zero value otherwise.
func (o *SubDescriptionDto) GetUnitTag() string {
	if o == nil || IsNil(o.UnitTag) {
		var ret string
		return ret
	}
	return *o.UnitTag
}

// GetUnitTagOk returns a tuple with the UnitTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubDescriptionDto) GetUnitTagOk() (*string, bool) {
	if o == nil || IsNil(o.UnitTag) {
		return nil, false
	}
	return o.UnitTag, true
}

// HasUnitTag returns a boolean if a field has been set.
func (o *SubDescriptionDto) HasUnitTag() bool {
	if o != nil && !IsNil(o.UnitTag) {
		return true
	}

	return false
}

// SetUnitTag gets a reference to the given string and assigns it to the UnitTag field.
func (o *SubDescriptionDto) SetUnitTag(v string) {
	o.UnitTag = &v
}

// GetHtmlLongText returns the HtmlLongText field value if set, zero value otherwise.
func (o *SubDescriptionDto) GetHtmlLongText() string {
	if o == nil || IsNil(o.HtmlLongText) {
		var ret string
		return ret
	}
	return *o.HtmlLongText
}

// GetHtmlLongTextOk returns a tuple with the HtmlLongText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubDescriptionDto) GetHtmlLongTextOk() (*string, bool) {
	if o == nil || IsNil(o.HtmlLongText) {
		return nil, false
	}
	return o.HtmlLongText, true
}

// HasHtmlLongText returns a boolean if a field has been set.
func (o *SubDescriptionDto) HasHtmlLongText() bool {
	if o != nil && !IsNil(o.HtmlLongText) {
		return true
	}

	return false
}

// SetHtmlLongText gets a reference to the given string and assigns it to the HtmlLongText field.
func (o *SubDescriptionDto) SetHtmlLongText(v string) {
	o.HtmlLongText = &v
}

// GetAdditionType returns the AdditionType field value
func (o *SubDescriptionDto) GetAdditionType() AdditionTypeDto {
	if o == nil {
		var ret AdditionTypeDto
		return ret
	}

	return o.AdditionType
}

// GetAdditionTypeOk returns a tuple with the AdditionType field value
// and a boolean to check if the value has been set.
func (o *SubDescriptionDto) GetAdditionTypeOk() (*AdditionTypeDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdditionType, true
}

// SetAdditionType sets field value
func (o *SubDescriptionDto) SetAdditionType(v AdditionTypeDto) {
	o.AdditionType = v
}

// GetStandardizedDescription returns the StandardizedDescription field value if set, zero value otherwise.
func (o *SubDescriptionDto) GetStandardizedDescription() StandardizedDescriptionDto {
	if o == nil || IsNil(o.StandardizedDescription) {
		var ret StandardizedDescriptionDto
		return ret
	}
	return *o.StandardizedDescription
}

// GetStandardizedDescriptionOk returns a tuple with the StandardizedDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubDescriptionDto) GetStandardizedDescriptionOk() (*StandardizedDescriptionDto, bool) {
	if o == nil || IsNil(o.StandardizedDescription) {
		return nil, false
	}
	return o.StandardizedDescription, true
}

// HasStandardizedDescription returns a boolean if a field has been set.
func (o *SubDescriptionDto) HasStandardizedDescription() bool {
	if o != nil && !IsNil(o.StandardizedDescription) {
		return true
	}

	return false
}

// SetStandardizedDescription gets a reference to the given StandardizedDescriptionDto and assigns it to the StandardizedDescription field.
func (o *SubDescriptionDto) SetStandardizedDescription(v StandardizedDescriptionDto) {
	o.StandardizedDescription = &v
}

// GetExecutionDescriptionReference returns the ExecutionDescriptionReference field value if set, zero value otherwise.
func (o *SubDescriptionDto) GetExecutionDescriptionReference() string {
	if o == nil || IsNil(o.ExecutionDescriptionReference) {
		var ret string
		return ret
	}
	return *o.ExecutionDescriptionReference
}

// GetExecutionDescriptionReferenceOk returns a tuple with the ExecutionDescriptionReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubDescriptionDto) GetExecutionDescriptionReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutionDescriptionReference) {
		return nil, false
	}
	return o.ExecutionDescriptionReference, true
}

// HasExecutionDescriptionReference returns a boolean if a field has been set.
func (o *SubDescriptionDto) HasExecutionDescriptionReference() bool {
	if o != nil && !IsNil(o.ExecutionDescriptionReference) {
		return true
	}

	return false
}

// SetExecutionDescriptionReference gets a reference to the given string and assigns it to the ExecutionDescriptionReference field.
func (o *SubDescriptionDto) SetExecutionDescriptionReference(v string) {
	o.ExecutionDescriptionReference = &v
}

// GetProjectCatalogues returns the ProjectCatalogues field value if set, zero value otherwise.
func (o *SubDescriptionDto) GetProjectCatalogues() []CatalogueDto {
	if o == nil || IsNil(o.ProjectCatalogues) {
		var ret []CatalogueDto
		return ret
	}
	return o.ProjectCatalogues
}

// GetProjectCataloguesOk returns a tuple with the ProjectCatalogues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubDescriptionDto) GetProjectCataloguesOk() ([]CatalogueDto, bool) {
	if o == nil || IsNil(o.ProjectCatalogues) {
		return nil, false
	}
	return o.ProjectCatalogues, true
}

// HasProjectCatalogues returns a boolean if a field has been set.
func (o *SubDescriptionDto) HasProjectCatalogues() bool {
	if o != nil && !IsNil(o.ProjectCatalogues) {
		return true
	}

	return false
}

// SetProjectCatalogues gets a reference to the given []CatalogueDto and assigns it to the ProjectCatalogues field.
func (o *SubDescriptionDto) SetProjectCatalogues(v []CatalogueDto) {
	o.ProjectCatalogues = v
}

// GetDescriptionId returns the DescriptionId field value if set, zero value otherwise.
func (o *SubDescriptionDto) GetDescriptionId() string {
	if o == nil || IsNil(o.DescriptionId) {
		var ret string
		return ret
	}
	return *o.DescriptionId
}

// GetDescriptionIdOk returns a tuple with the DescriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubDescriptionDto) GetDescriptionIdOk() (*string, bool) {
	if o == nil || IsNil(o.DescriptionId) {
		return nil, false
	}
	return o.DescriptionId, true
}

// HasDescriptionId returns a boolean if a field has been set.
func (o *SubDescriptionDto) HasDescriptionId() bool {
	if o != nil && !IsNil(o.DescriptionId) {
		return true
	}

	return false
}

// SetDescriptionId gets a reference to the given string and assigns it to the DescriptionId field.
func (o *SubDescriptionDto) SetDescriptionId(v string) {
	o.DescriptionId = &v
}

// GetHasBidderCommentInHtmlLongText returns the HasBidderCommentInHtmlLongText field value
func (o *SubDescriptionDto) GetHasBidderCommentInHtmlLongText() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasBidderCommentInHtmlLongText
}

// GetHasBidderCommentInHtmlLongTextOk returns a tuple with the HasBidderCommentInHtmlLongText field value
// and a boolean to check if the value has been set.
func (o *SubDescriptionDto) GetHasBidderCommentInHtmlLongTextOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasBidderCommentInHtmlLongText, true
}

// SetHasBidderCommentInHtmlLongText sets field value
func (o *SubDescriptionDto) SetHasBidderCommentInHtmlLongText(v bool) {
	o.HasBidderCommentInHtmlLongText = v
}

// GetElementType returns the ElementType field value if set, zero value otherwise.
func (o *SubDescriptionDto) GetElementType() string {
	if o == nil || IsNil(o.ElementType) {
		var ret string
		return ret
	}
	return *o.ElementType
}

// GetElementTypeOk returns a tuple with the ElementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubDescriptionDto) GetElementTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ElementType) {
		return nil, false
	}
	return o.ElementType, true
}

// HasElementType returns a boolean if a field has been set.
func (o *SubDescriptionDto) HasElementType() bool {
	if o != nil && !IsNil(o.ElementType) {
		return true
	}

	return false
}

// SetElementType gets a reference to the given string and assigns it to the ElementType field.
func (o *SubDescriptionDto) SetElementType(v string) {
	o.ElementType = &v
}

// GetElementTypeDiscriminator returns the ElementTypeDiscriminator field value if set, zero value otherwise.
func (o *SubDescriptionDto) GetElementTypeDiscriminator() string {
	if o == nil || IsNil(o.ElementTypeDiscriminator) {
		var ret string
		return ret
	}
	return *o.ElementTypeDiscriminator
}

// GetElementTypeDiscriminatorOk returns a tuple with the ElementTypeDiscriminator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubDescriptionDto) GetElementTypeDiscriminatorOk() (*string, bool) {
	if o == nil || IsNil(o.ElementTypeDiscriminator) {
		return nil, false
	}
	return o.ElementTypeDiscriminator, true
}

// HasElementTypeDiscriminator returns a boolean if a field has been set.
func (o *SubDescriptionDto) HasElementTypeDiscriminator() bool {
	if o != nil && !IsNil(o.ElementTypeDiscriminator) {
		return true
	}

	return false
}

// SetElementTypeDiscriminator gets a reference to the given string and assigns it to the ElementTypeDiscriminator field.
func (o *SubDescriptionDto) SetElementTypeDiscriminator(v string) {
	o.ElementTypeDiscriminator = &v
}

func (o SubDescriptionDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubDescriptionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	// skip: quantity is readOnly
	if !IsNil(o.QuantityOverride) {
		toSerialize["quantityOverride"] = o.QuantityOverride
	}
	if !IsNil(o.QuantityComponents) {
		toSerialize["quantityComponents"] = o.QuantityComponents
	}
	toSerialize["amountToBeEnteredByBidder"] = o.AmountToBeEnteredByBidder
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.ShortText) {
		toSerialize["shortText"] = o.ShortText
	}
	if !IsNil(o.LongText) {
		toSerialize["longText"] = o.LongText
	}
	if !IsNil(o.UnitTag) {
		toSerialize["unitTag"] = o.UnitTag
	}
	if !IsNil(o.HtmlLongText) {
		toSerialize["htmlLongText"] = o.HtmlLongText
	}
	toSerialize["additionType"] = o.AdditionType
	if !IsNil(o.StandardizedDescription) {
		toSerialize["standardizedDescription"] = o.StandardizedDescription
	}
	if !IsNil(o.ExecutionDescriptionReference) {
		toSerialize["executionDescriptionReference"] = o.ExecutionDescriptionReference
	}
	if !IsNil(o.ProjectCatalogues) {
		toSerialize["projectCatalogues"] = o.ProjectCatalogues
	}
	if !IsNil(o.DescriptionId) {
		toSerialize["descriptionId"] = o.DescriptionId
	}
	// skip: hasBidderCommentInHtmlLongText is readOnly
	if !IsNil(o.ElementType) {
		toSerialize["elementType"] = o.ElementType
	}
	if !IsNil(o.ElementTypeDiscriminator) {
		toSerialize["elementTypeDiscriminator"] = o.ElementTypeDiscriminator
	}
	return toSerialize, nil
}

type NullableSubDescriptionDto struct {
	value *SubDescriptionDto
	isSet bool
}

func (v NullableSubDescriptionDto) Get() *SubDescriptionDto {
	return v.value
}

func (v *NullableSubDescriptionDto) Set(val *SubDescriptionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSubDescriptionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSubDescriptionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubDescriptionDto(val *SubDescriptionDto) *NullableSubDescriptionDto {
	return &NullableSubDescriptionDto{value: val, isSet: true}
}

func (v NullableSubDescriptionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubDescriptionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
