/*
AVACloud API 1.51.0

AVACloud API specification

API version: 1.51.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
)

// checks if the BankingInformationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BankingInformationDto{}

// BankingInformationDto This is a class that represents the information about a bank connection. It is usually used within a PartyInformation.
type BankingInformationDto struct {
	// Elements GUID identifier.
	Id string `json:"id"`
	// The name of the bank.
	Name *string `json:"name,omitempty"`
	// The international identifier for the bank account.
	Iban *string `json:"iban,omitempty"`
	// The account number. Typically no longer used since the introduction of IBAN within the SEPA area.
	AccountNumber *string `json:"accountNumber,omitempty"`
	// The international bank identifier.
	Bic *string `json:"bic,omitempty"`
	// The routing number for the bank. Typically no longer used since the introduction of IBAN within the SEPA area.
	RoutingNumber *string `json:"routingNumber,omitempty"`
}

// NewBankingInformationDto instantiates a new BankingInformationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBankingInformationDto(id string) *BankingInformationDto {
	this := BankingInformationDto{}
	this.Id = id
	return &this
}

// NewBankingInformationDtoWithDefaults instantiates a new BankingInformationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBankingInformationDtoWithDefaults() *BankingInformationDto {
	this := BankingInformationDto{}
	return &this
}

// GetId returns the Id field value
func (o *BankingInformationDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BankingInformationDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BankingInformationDto) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BankingInformationDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankingInformationDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BankingInformationDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BankingInformationDto) SetName(v string) {
	o.Name = &v
}

// GetIban returns the Iban field value if set, zero value otherwise.
func (o *BankingInformationDto) GetIban() string {
	if o == nil || IsNil(o.Iban) {
		var ret string
		return ret
	}
	return *o.Iban
}

// GetIbanOk returns a tuple with the Iban field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankingInformationDto) GetIbanOk() (*string, bool) {
	if o == nil || IsNil(o.Iban) {
		return nil, false
	}
	return o.Iban, true
}

// HasIban returns a boolean if a field has been set.
func (o *BankingInformationDto) HasIban() bool {
	if o != nil && !IsNil(o.Iban) {
		return true
	}

	return false
}

// SetIban gets a reference to the given string and assigns it to the Iban field.
func (o *BankingInformationDto) SetIban(v string) {
	o.Iban = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *BankingInformationDto) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankingInformationDto) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *BankingInformationDto) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *BankingInformationDto) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetBic returns the Bic field value if set, zero value otherwise.
func (o *BankingInformationDto) GetBic() string {
	if o == nil || IsNil(o.Bic) {
		var ret string
		return ret
	}
	return *o.Bic
}

// GetBicOk returns a tuple with the Bic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankingInformationDto) GetBicOk() (*string, bool) {
	if o == nil || IsNil(o.Bic) {
		return nil, false
	}
	return o.Bic, true
}

// HasBic returns a boolean if a field has been set.
func (o *BankingInformationDto) HasBic() bool {
	if o != nil && !IsNil(o.Bic) {
		return true
	}

	return false
}

// SetBic gets a reference to the given string and assigns it to the Bic field.
func (o *BankingInformationDto) SetBic(v string) {
	o.Bic = &v
}

// GetRoutingNumber returns the RoutingNumber field value if set, zero value otherwise.
func (o *BankingInformationDto) GetRoutingNumber() string {
	if o == nil || IsNil(o.RoutingNumber) {
		var ret string
		return ret
	}
	return *o.RoutingNumber
}

// GetRoutingNumberOk returns a tuple with the RoutingNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankingInformationDto) GetRoutingNumberOk() (*string, bool) {
	if o == nil || IsNil(o.RoutingNumber) {
		return nil, false
	}
	return o.RoutingNumber, true
}

// HasRoutingNumber returns a boolean if a field has been set.
func (o *BankingInformationDto) HasRoutingNumber() bool {
	if o != nil && !IsNil(o.RoutingNumber) {
		return true
	}

	return false
}

// SetRoutingNumber gets a reference to the given string and assigns it to the RoutingNumber field.
func (o *BankingInformationDto) SetRoutingNumber(v string) {
	o.RoutingNumber = &v
}

func (o BankingInformationDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BankingInformationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Iban) {
		toSerialize["iban"] = o.Iban
	}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.Bic) {
		toSerialize["bic"] = o.Bic
	}
	if !IsNil(o.RoutingNumber) {
		toSerialize["routingNumber"] = o.RoutingNumber
	}
	return toSerialize, nil
}

type NullableBankingInformationDto struct {
	value *BankingInformationDto
	isSet bool
}

func (v NullableBankingInformationDto) Get() *BankingInformationDto {
	return v.value
}

func (v *NullableBankingInformationDto) Set(val *BankingInformationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableBankingInformationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableBankingInformationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBankingInformationDto(val *BankingInformationDto) *NullableBankingInformationDto {
	return &NullableBankingInformationDto{value: val, isSet: true}
}

func (v NullableBankingInformationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBankingInformationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
