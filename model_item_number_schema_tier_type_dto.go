/*
AVACloud API 1.45.0

AVACloud API specification

API version: 1.45.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
	"fmt"
)

// ItemNumberSchemaTierTypeDto Specifies the type an ItemNumberSchemaTier represents. For example, a tier may indicate to be used for positions or for groups.
type ItemNumberSchemaTierTypeDto string

// List of ItemNumberSchemaTierTypeDto
const (
	ITEMNUMBERSCHEMATIERTYPEDTO_UNDEFINED ItemNumberSchemaTierTypeDto = "Undefined"
	ITEMNUMBERSCHEMATIERTYPEDTO_INDEX     ItemNumberSchemaTierTypeDto = "Index"
	ITEMNUMBERSCHEMATIERTYPEDTO_POSITION  ItemNumberSchemaTierTypeDto = "Position"
	ITEMNUMBERSCHEMATIERTYPEDTO_GROUP     ItemNumberSchemaTierTypeDto = "Group"
	ITEMNUMBERSCHEMATIERTYPEDTO_LOT       ItemNumberSchemaTierTypeDto = "Lot"
)

// All allowed values of ItemNumberSchemaTierTypeDto enum
var AllowedItemNumberSchemaTierTypeDtoEnumValues = []ItemNumberSchemaTierTypeDto{
	"Undefined",
	"Index",
	"Position",
	"Group",
	"Lot",
}

func (v *ItemNumberSchemaTierTypeDto) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ItemNumberSchemaTierTypeDto(value)
	for _, existing := range AllowedItemNumberSchemaTierTypeDtoEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ItemNumberSchemaTierTypeDto", value)
}

// NewItemNumberSchemaTierTypeDtoFromValue returns a pointer to a valid ItemNumberSchemaTierTypeDto
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewItemNumberSchemaTierTypeDtoFromValue(v string) (*ItemNumberSchemaTierTypeDto, error) {
	ev := ItemNumberSchemaTierTypeDto(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ItemNumberSchemaTierTypeDto: valid values are %v", v, AllowedItemNumberSchemaTierTypeDtoEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ItemNumberSchemaTierTypeDto) IsValid() bool {
	for _, existing := range AllowedItemNumberSchemaTierTypeDtoEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ItemNumberSchemaTierTypeDto value
func (v ItemNumberSchemaTierTypeDto) Ptr() *ItemNumberSchemaTierTypeDto {
	return &v
}

type NullableItemNumberSchemaTierTypeDto struct {
	value *ItemNumberSchemaTierTypeDto
	isSet bool
}

func (v NullableItemNumberSchemaTierTypeDto) Get() *ItemNumberSchemaTierTypeDto {
	return v.value
}

func (v *NullableItemNumberSchemaTierTypeDto) Set(val *ItemNumberSchemaTierTypeDto) {
	v.value = val
	v.isSet = true
}

func (v NullableItemNumberSchemaTierTypeDto) IsSet() bool {
	return v.isSet
}

func (v *NullableItemNumberSchemaTierTypeDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemNumberSchemaTierTypeDto(val *ItemNumberSchemaTierTypeDto) *NullableItemNumberSchemaTierTypeDto {
	return &NullableItemNumberSchemaTierTypeDto{value: val, isSet: true}
}

func (v NullableItemNumberSchemaTierTypeDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemNumberSchemaTierTypeDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
