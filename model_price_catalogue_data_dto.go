/*
AVACloud API 1.51.0

AVACloud API specification

API version: 1.51.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
)

// checks if the PriceCatalogueDataDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceCatalogueDataDto{}

// PriceCatalogueDataDto Price catalogue data represents assumed or estimated prices from a catalogue source
type PriceCatalogueDataDto struct {
	// Elements GUID identifier.
	Id string `json:"id"`
	// The lower bound of the unit price
	UnitPriceFrom *float32 `json:"unitPriceFrom,omitempty"`
	// The upper bound of the unit price
	UnitPriceTo *float32 `json:"unitPriceTo,omitempty"`
	// The average unit price
	UnitPriceAverage *float32 `json:"unitPriceAverage,omitempty"`
	// The lower bound of the wage price
	WagePriceFrom *float32 `json:"wagePriceFrom,omitempty"`
	// The upper bound of the wage price
	WagePriceTo *float32 `json:"wagePriceTo,omitempty"`
	// The average wage price
	WagePriceAverage *float32 `json:"wagePriceAverage,omitempty"`
}

// NewPriceCatalogueDataDto instantiates a new PriceCatalogueDataDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceCatalogueDataDto(id string) *PriceCatalogueDataDto {
	this := PriceCatalogueDataDto{}
	this.Id = id
	return &this
}

// NewPriceCatalogueDataDtoWithDefaults instantiates a new PriceCatalogueDataDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceCatalogueDataDtoWithDefaults() *PriceCatalogueDataDto {
	this := PriceCatalogueDataDto{}
	return &this
}

// GetId returns the Id field value
func (o *PriceCatalogueDataDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PriceCatalogueDataDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PriceCatalogueDataDto) SetId(v string) {
	o.Id = v
}

// GetUnitPriceFrom returns the UnitPriceFrom field value if set, zero value otherwise.
func (o *PriceCatalogueDataDto) GetUnitPriceFrom() float32 {
	if o == nil || IsNil(o.UnitPriceFrom) {
		var ret float32
		return ret
	}
	return *o.UnitPriceFrom
}

// GetUnitPriceFromOk returns a tuple with the UnitPriceFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceCatalogueDataDto) GetUnitPriceFromOk() (*float32, bool) {
	if o == nil || IsNil(o.UnitPriceFrom) {
		return nil, false
	}
	return o.UnitPriceFrom, true
}

// HasUnitPriceFrom returns a boolean if a field has been set.
func (o *PriceCatalogueDataDto) HasUnitPriceFrom() bool {
	if o != nil && !IsNil(o.UnitPriceFrom) {
		return true
	}

	return false
}

// SetUnitPriceFrom gets a reference to the given float32 and assigns it to the UnitPriceFrom field.
func (o *PriceCatalogueDataDto) SetUnitPriceFrom(v float32) {
	o.UnitPriceFrom = &v
}

// GetUnitPriceTo returns the UnitPriceTo field value if set, zero value otherwise.
func (o *PriceCatalogueDataDto) GetUnitPriceTo() float32 {
	if o == nil || IsNil(o.UnitPriceTo) {
		var ret float32
		return ret
	}
	return *o.UnitPriceTo
}

// GetUnitPriceToOk returns a tuple with the UnitPriceTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceCatalogueDataDto) GetUnitPriceToOk() (*float32, bool) {
	if o == nil || IsNil(o.UnitPriceTo) {
		return nil, false
	}
	return o.UnitPriceTo, true
}

// HasUnitPriceTo returns a boolean if a field has been set.
func (o *PriceCatalogueDataDto) HasUnitPriceTo() bool {
	if o != nil && !IsNil(o.UnitPriceTo) {
		return true
	}

	return false
}

// SetUnitPriceTo gets a reference to the given float32 and assigns it to the UnitPriceTo field.
func (o *PriceCatalogueDataDto) SetUnitPriceTo(v float32) {
	o.UnitPriceTo = &v
}

// GetUnitPriceAverage returns the UnitPriceAverage field value if set, zero value otherwise.
func (o *PriceCatalogueDataDto) GetUnitPriceAverage() float32 {
	if o == nil || IsNil(o.UnitPriceAverage) {
		var ret float32
		return ret
	}
	return *o.UnitPriceAverage
}

// GetUnitPriceAverageOk returns a tuple with the UnitPriceAverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceCatalogueDataDto) GetUnitPriceAverageOk() (*float32, bool) {
	if o == nil || IsNil(o.UnitPriceAverage) {
		return nil, false
	}
	return o.UnitPriceAverage, true
}

// HasUnitPriceAverage returns a boolean if a field has been set.
func (o *PriceCatalogueDataDto) HasUnitPriceAverage() bool {
	if o != nil && !IsNil(o.UnitPriceAverage) {
		return true
	}

	return false
}

// SetUnitPriceAverage gets a reference to the given float32 and assigns it to the UnitPriceAverage field.
func (o *PriceCatalogueDataDto) SetUnitPriceAverage(v float32) {
	o.UnitPriceAverage = &v
}

// GetWagePriceFrom returns the WagePriceFrom field value if set, zero value otherwise.
func (o *PriceCatalogueDataDto) GetWagePriceFrom() float32 {
	if o == nil || IsNil(o.WagePriceFrom) {
		var ret float32
		return ret
	}
	return *o.WagePriceFrom
}

// GetWagePriceFromOk returns a tuple with the WagePriceFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceCatalogueDataDto) GetWagePriceFromOk() (*float32, bool) {
	if o == nil || IsNil(o.WagePriceFrom) {
		return nil, false
	}
	return o.WagePriceFrom, true
}

// HasWagePriceFrom returns a boolean if a field has been set.
func (o *PriceCatalogueDataDto) HasWagePriceFrom() bool {
	if o != nil && !IsNil(o.WagePriceFrom) {
		return true
	}

	return false
}

// SetWagePriceFrom gets a reference to the given float32 and assigns it to the WagePriceFrom field.
func (o *PriceCatalogueDataDto) SetWagePriceFrom(v float32) {
	o.WagePriceFrom = &v
}

// GetWagePriceTo returns the WagePriceTo field value if set, zero value otherwise.
func (o *PriceCatalogueDataDto) GetWagePriceTo() float32 {
	if o == nil || IsNil(o.WagePriceTo) {
		var ret float32
		return ret
	}
	return *o.WagePriceTo
}

// GetWagePriceToOk returns a tuple with the WagePriceTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceCatalogueDataDto) GetWagePriceToOk() (*float32, bool) {
	if o == nil || IsNil(o.WagePriceTo) {
		return nil, false
	}
	return o.WagePriceTo, true
}

// HasWagePriceTo returns a boolean if a field has been set.
func (o *PriceCatalogueDataDto) HasWagePriceTo() bool {
	if o != nil && !IsNil(o.WagePriceTo) {
		return true
	}

	return false
}

// SetWagePriceTo gets a reference to the given float32 and assigns it to the WagePriceTo field.
func (o *PriceCatalogueDataDto) SetWagePriceTo(v float32) {
	o.WagePriceTo = &v
}

// GetWagePriceAverage returns the WagePriceAverage field value if set, zero value otherwise.
func (o *PriceCatalogueDataDto) GetWagePriceAverage() float32 {
	if o == nil || IsNil(o.WagePriceAverage) {
		var ret float32
		return ret
	}
	return *o.WagePriceAverage
}

// GetWagePriceAverageOk returns a tuple with the WagePriceAverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceCatalogueDataDto) GetWagePriceAverageOk() (*float32, bool) {
	if o == nil || IsNil(o.WagePriceAverage) {
		return nil, false
	}
	return o.WagePriceAverage, true
}

// HasWagePriceAverage returns a boolean if a field has been set.
func (o *PriceCatalogueDataDto) HasWagePriceAverage() bool {
	if o != nil && !IsNil(o.WagePriceAverage) {
		return true
	}

	return false
}

// SetWagePriceAverage gets a reference to the given float32 and assigns it to the WagePriceAverage field.
func (o *PriceCatalogueDataDto) SetWagePriceAverage(v float32) {
	o.WagePriceAverage = &v
}

func (o PriceCatalogueDataDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceCatalogueDataDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.UnitPriceFrom) {
		toSerialize["unitPriceFrom"] = o.UnitPriceFrom
	}
	if !IsNil(o.UnitPriceTo) {
		toSerialize["unitPriceTo"] = o.UnitPriceTo
	}
	if !IsNil(o.UnitPriceAverage) {
		toSerialize["unitPriceAverage"] = o.UnitPriceAverage
	}
	if !IsNil(o.WagePriceFrom) {
		toSerialize["wagePriceFrom"] = o.WagePriceFrom
	}
	if !IsNil(o.WagePriceTo) {
		toSerialize["wagePriceTo"] = o.WagePriceTo
	}
	if !IsNil(o.WagePriceAverage) {
		toSerialize["wagePriceAverage"] = o.WagePriceAverage
	}
	return toSerialize, nil
}

type NullablePriceCatalogueDataDto struct {
	value *PriceCatalogueDataDto
	isSet bool
}

func (v NullablePriceCatalogueDataDto) Get() *PriceCatalogueDataDto {
	return v.value
}

func (v *NullablePriceCatalogueDataDto) Set(val *PriceCatalogueDataDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceCatalogueDataDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceCatalogueDataDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceCatalogueDataDto(val *PriceCatalogueDataDto) *NullablePriceCatalogueDataDto {
	return &NullablePriceCatalogueDataDto{value: val, isSet: true}
}

func (v NullablePriceCatalogueDataDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceCatalogueDataDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
