/*
AVACloud API 2.0.0

AVACloud API specification

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
	"fmt"
)

// ValidationSeverity Indicates the severity of a check
type ValidationSeverity string

// List of ValidationSeverity
const (
	VALIDATIONSEVERITY_INFORMATION ValidationSeverity = "Information"
	VALIDATIONSEVERITY_WARNING     ValidationSeverity = "Warning"
	VALIDATIONSEVERITY_ERROR       ValidationSeverity = "Error"
	VALIDATIONSEVERITY_CRITICAL    ValidationSeverity = "Critical"
)

// All allowed values of ValidationSeverity enum
var AllowedValidationSeverityEnumValues = []ValidationSeverity{
	"Information",
	"Warning",
	"Error",
	"Critical",
}

func (v *ValidationSeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ValidationSeverity(value)
	for _, existing := range AllowedValidationSeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ValidationSeverity", value)
}

// NewValidationSeverityFromValue returns a pointer to a valid ValidationSeverity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewValidationSeverityFromValue(v string) (*ValidationSeverity, error) {
	ev := ValidationSeverity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ValidationSeverity: valid values are %v", v, AllowedValidationSeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ValidationSeverity) IsValid() bool {
	for _, existing := range AllowedValidationSeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ValidationSeverity value
func (v ValidationSeverity) Ptr() *ValidationSeverity {
	return &v
}

type NullableValidationSeverity struct {
	value *ValidationSeverity
	isSet bool
}

func (v NullableValidationSeverity) Get() *ValidationSeverity {
	return v.value
}

func (v *NullableValidationSeverity) Set(val *ValidationSeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationSeverity(val *ValidationSeverity) *NullableValidationSeverity {
	return &NullableValidationSeverity{value: val, isSet: true}
}

func (v NullableValidationSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
