/*
AVACloud API 1.45.0

AVACloud API specification

API version: 1.45.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
	"fmt"
)

// AdditionTypeDto Indicates the origin of an element.
type AdditionTypeDto string

// List of AdditionTypeDto
const (
	ADDITIONTYPEDTO_NONE      AdditionTypeDto = "None"
	ADDITIONTYPEDTO_BY_BUYER  AdditionTypeDto = "ByBuyer"
	ADDITIONTYPEDTO_BY_BIDDER AdditionTypeDto = "ByBidder"
)

// All allowed values of AdditionTypeDto enum
var AllowedAdditionTypeDtoEnumValues = []AdditionTypeDto{
	"None",
	"ByBuyer",
	"ByBidder",
}

func (v *AdditionTypeDto) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AdditionTypeDto(value)
	for _, existing := range AllowedAdditionTypeDtoEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AdditionTypeDto", value)
}

// NewAdditionTypeDtoFromValue returns a pointer to a valid AdditionTypeDto
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAdditionTypeDtoFromValue(v string) (*AdditionTypeDto, error) {
	ev := AdditionTypeDto(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AdditionTypeDto: valid values are %v", v, AllowedAdditionTypeDtoEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AdditionTypeDto) IsValid() bool {
	for _, existing := range AllowedAdditionTypeDtoEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AdditionTypeDto value
func (v AdditionTypeDto) Ptr() *AdditionTypeDto {
	return &v
}

type NullableAdditionTypeDto struct {
	value *AdditionTypeDto
	isSet bool
}

func (v NullableAdditionTypeDto) Get() *AdditionTypeDto {
	return v.value
}

func (v *NullableAdditionTypeDto) Set(val *AdditionTypeDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAdditionTypeDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAdditionTypeDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdditionTypeDto(val *AdditionTypeDto) *NullableAdditionTypeDto {
	return &NullableAdditionTypeDto{value: val, isSet: true}
}

func (v NullableAdditionTypeDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdditionTypeDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
