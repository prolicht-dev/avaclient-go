/*
AVACloud API 1.51.0

AVACloud API specification

API version: 1.51.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
)

// checks if the NoteTextDtoAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NoteTextDtoAllOf{}

// NoteTextDtoAllOf Represents an element that holds text information.
type NoteTextDtoAllOf struct {
	// If this is set to true, this text is meant to not be seen as part of the regular elements hierarchy but as a special opening text at the beginning of the project. For example, in GAEB XML, this would map to the GAEB.Award.AddText. Typically, such texts describe project-wide contractual definitions. If this is set to true, this NoteText should be placed at the top of the elements hierarchy directly in the ServiceSpecification.Elements group, otherwise it will likely not be treated correctly when exporting to GAEB. You can only set IsOpeningText or IsClosingText to true.
	IsOpeningText bool `json:"isOpeningText"`
	// If this is set to true, this text is meant to not be seen as part of the regular elements hierarchy but as a special closing text at the end of the project. For Example, in GAEB XML, this would map to the GAEB.AddText. Typically, such texts are used to describe project wide finishing descriptions. If this is set to true, this NoteText should be placed at the top of the elements hierarchy directly in the ServiceSpecification.Elements group, otherwise it will likely not be treated correctly when exporting to GAEB. You can only set IsOpeningText or IsClosingText to true.
	IsClosingText bool `json:"isClosingText"`
	// Short description for this DescriptionBase element.
	ShortText    *string         `json:"shortText,omitempty"`
	AdditionType AdditionTypeDto `json:"additionType"`
	// Detailed description for this DescriptionBase element. When the HtmlLongText is set, this is automatically overwritten and filled with the appropriate plain text representation of the Html text. Vice versa, setting this property overrides the HtmlLongText.
	LongText *string `json:"longText,omitempty"`
	// This contains the Html representation of the Longtext. When the LongText is set, this is automatically overwritten and filled with the appropriate Html representation of the plaintext. Vice versa, setting this property overrides the LongText. GAEB 90 and GAEB 2000 exports do not support any image functionality. In GAEB XML, only images that use an embedded Base64 data uri are exported, regular url references are cleared before written out.
	HtmlLongText *string `json:"htmlLongText,omitempty"`
	// This is an optional internal identifier that may be used to add additional information to this NoteText. It is not supported in GAEB import or export.
	Identifier              *string                     `json:"identifier,omitempty"`
	StandardizedDescription *StandardizedDescriptionDto `json:"standardizedDescription,omitempty"`
	ElementType             *string                     `json:"elementType,omitempty"`
	// This is an identifier specific for this description. Some exchange formats, like GAEB XML, use it to identify descriptions. It's different to an elements identifier in that it should only apply to the description component, meaning the text itself.
	DescriptionId                  *string                      `json:"descriptionId,omitempty"`
	OenormNoteTextProperties       *OenormNoteTextPropertiesDto `json:"oenormNoteTextProperties,omitempty"`
	HasBidderCommentInHtmlLongText bool                         `json:"hasBidderCommentInHtmlLongText"`
}

// NewNoteTextDtoAllOf instantiates a new NoteTextDtoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoteTextDtoAllOf(isOpeningText bool, isClosingText bool, additionType AdditionTypeDto, hasBidderCommentInHtmlLongText bool) *NoteTextDtoAllOf {
	this := NoteTextDtoAllOf{}
	this.IsOpeningText = isOpeningText
	this.IsClosingText = isClosingText
	this.AdditionType = additionType
	this.HasBidderCommentInHtmlLongText = hasBidderCommentInHtmlLongText
	return &this
}

// NewNoteTextDtoAllOfWithDefaults instantiates a new NoteTextDtoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteTextDtoAllOfWithDefaults() *NoteTextDtoAllOf {
	this := NoteTextDtoAllOf{}
	return &this
}

// GetIsOpeningText returns the IsOpeningText field value
func (o *NoteTextDtoAllOf) GetIsOpeningText() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsOpeningText
}

// GetIsOpeningTextOk returns a tuple with the IsOpeningText field value
// and a boolean to check if the value has been set.
func (o *NoteTextDtoAllOf) GetIsOpeningTextOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsOpeningText, true
}

// SetIsOpeningText sets field value
func (o *NoteTextDtoAllOf) SetIsOpeningText(v bool) {
	o.IsOpeningText = v
}

// GetIsClosingText returns the IsClosingText field value
func (o *NoteTextDtoAllOf) GetIsClosingText() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsClosingText
}

// GetIsClosingTextOk returns a tuple with the IsClosingText field value
// and a boolean to check if the value has been set.
func (o *NoteTextDtoAllOf) GetIsClosingTextOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsClosingText, true
}

// SetIsClosingText sets field value
func (o *NoteTextDtoAllOf) SetIsClosingText(v bool) {
	o.IsClosingText = v
}

// GetShortText returns the ShortText field value if set, zero value otherwise.
func (o *NoteTextDtoAllOf) GetShortText() string {
	if o == nil || IsNil(o.ShortText) {
		var ret string
		return ret
	}
	return *o.ShortText
}

// GetShortTextOk returns a tuple with the ShortText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteTextDtoAllOf) GetShortTextOk() (*string, bool) {
	if o == nil || IsNil(o.ShortText) {
		return nil, false
	}
	return o.ShortText, true
}

// HasShortText returns a boolean if a field has been set.
func (o *NoteTextDtoAllOf) HasShortText() bool {
	if o != nil && !IsNil(o.ShortText) {
		return true
	}

	return false
}

// SetShortText gets a reference to the given string and assigns it to the ShortText field.
func (o *NoteTextDtoAllOf) SetShortText(v string) {
	o.ShortText = &v
}

// GetAdditionType returns the AdditionType field value
func (o *NoteTextDtoAllOf) GetAdditionType() AdditionTypeDto {
	if o == nil {
		var ret AdditionTypeDto
		return ret
	}

	return o.AdditionType
}

// GetAdditionTypeOk returns a tuple with the AdditionType field value
// and a boolean to check if the value has been set.
func (o *NoteTextDtoAllOf) GetAdditionTypeOk() (*AdditionTypeDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdditionType, true
}

// SetAdditionType sets field value
func (o *NoteTextDtoAllOf) SetAdditionType(v AdditionTypeDto) {
	o.AdditionType = v
}

// GetLongText returns the LongText field value if set, zero value otherwise.
func (o *NoteTextDtoAllOf) GetLongText() string {
	if o == nil || IsNil(o.LongText) {
		var ret string
		return ret
	}
	return *o.LongText
}

// GetLongTextOk returns a tuple with the LongText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteTextDtoAllOf) GetLongTextOk() (*string, bool) {
	if o == nil || IsNil(o.LongText) {
		return nil, false
	}
	return o.LongText, true
}

// HasLongText returns a boolean if a field has been set.
func (o *NoteTextDtoAllOf) HasLongText() bool {
	if o != nil && !IsNil(o.LongText) {
		return true
	}

	return false
}

// SetLongText gets a reference to the given string and assigns it to the LongText field.
func (o *NoteTextDtoAllOf) SetLongText(v string) {
	o.LongText = &v
}

// GetHtmlLongText returns the HtmlLongText field value if set, zero value otherwise.
func (o *NoteTextDtoAllOf) GetHtmlLongText() string {
	if o == nil || IsNil(o.HtmlLongText) {
		var ret string
		return ret
	}
	return *o.HtmlLongText
}

// GetHtmlLongTextOk returns a tuple with the HtmlLongText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteTextDtoAllOf) GetHtmlLongTextOk() (*string, bool) {
	if o == nil || IsNil(o.HtmlLongText) {
		return nil, false
	}
	return o.HtmlLongText, true
}

// HasHtmlLongText returns a boolean if a field has been set.
func (o *NoteTextDtoAllOf) HasHtmlLongText() bool {
	if o != nil && !IsNil(o.HtmlLongText) {
		return true
	}

	return false
}

// SetHtmlLongText gets a reference to the given string and assigns it to the HtmlLongText field.
func (o *NoteTextDtoAllOf) SetHtmlLongText(v string) {
	o.HtmlLongText = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *NoteTextDtoAllOf) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteTextDtoAllOf) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *NoteTextDtoAllOf) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *NoteTextDtoAllOf) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetStandardizedDescription returns the StandardizedDescription field value if set, zero value otherwise.
func (o *NoteTextDtoAllOf) GetStandardizedDescription() StandardizedDescriptionDto {
	if o == nil || IsNil(o.StandardizedDescription) {
		var ret StandardizedDescriptionDto
		return ret
	}
	return *o.StandardizedDescription
}

// GetStandardizedDescriptionOk returns a tuple with the StandardizedDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteTextDtoAllOf) GetStandardizedDescriptionOk() (*StandardizedDescriptionDto, bool) {
	if o == nil || IsNil(o.StandardizedDescription) {
		return nil, false
	}
	return o.StandardizedDescription, true
}

// HasStandardizedDescription returns a boolean if a field has been set.
func (o *NoteTextDtoAllOf) HasStandardizedDescription() bool {
	if o != nil && !IsNil(o.StandardizedDescription) {
		return true
	}

	return false
}

// SetStandardizedDescription gets a reference to the given StandardizedDescriptionDto and assigns it to the StandardizedDescription field.
func (o *NoteTextDtoAllOf) SetStandardizedDescription(v StandardizedDescriptionDto) {
	o.StandardizedDescription = &v
}

// GetElementType returns the ElementType field value if set, zero value otherwise.
func (o *NoteTextDtoAllOf) GetElementType() string {
	if o == nil || IsNil(o.ElementType) {
		var ret string
		return ret
	}
	return *o.ElementType
}

// GetElementTypeOk returns a tuple with the ElementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteTextDtoAllOf) GetElementTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ElementType) {
		return nil, false
	}
	return o.ElementType, true
}

// HasElementType returns a boolean if a field has been set.
func (o *NoteTextDtoAllOf) HasElementType() bool {
	if o != nil && !IsNil(o.ElementType) {
		return true
	}

	return false
}

// SetElementType gets a reference to the given string and assigns it to the ElementType field.
func (o *NoteTextDtoAllOf) SetElementType(v string) {
	o.ElementType = &v
}

// GetDescriptionId returns the DescriptionId field value if set, zero value otherwise.
func (o *NoteTextDtoAllOf) GetDescriptionId() string {
	if o == nil || IsNil(o.DescriptionId) {
		var ret string
		return ret
	}
	return *o.DescriptionId
}

// GetDescriptionIdOk returns a tuple with the DescriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteTextDtoAllOf) GetDescriptionIdOk() (*string, bool) {
	if o == nil || IsNil(o.DescriptionId) {
		return nil, false
	}
	return o.DescriptionId, true
}

// HasDescriptionId returns a boolean if a field has been set.
func (o *NoteTextDtoAllOf) HasDescriptionId() bool {
	if o != nil && !IsNil(o.DescriptionId) {
		return true
	}

	return false
}

// SetDescriptionId gets a reference to the given string and assigns it to the DescriptionId field.
func (o *NoteTextDtoAllOf) SetDescriptionId(v string) {
	o.DescriptionId = &v
}

// GetOenormNoteTextProperties returns the OenormNoteTextProperties field value if set, zero value otherwise.
func (o *NoteTextDtoAllOf) GetOenormNoteTextProperties() OenormNoteTextPropertiesDto {
	if o == nil || IsNil(o.OenormNoteTextProperties) {
		var ret OenormNoteTextPropertiesDto
		return ret
	}
	return *o.OenormNoteTextProperties
}

// GetOenormNoteTextPropertiesOk returns a tuple with the OenormNoteTextProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteTextDtoAllOf) GetOenormNoteTextPropertiesOk() (*OenormNoteTextPropertiesDto, bool) {
	if o == nil || IsNil(o.OenormNoteTextProperties) {
		return nil, false
	}
	return o.OenormNoteTextProperties, true
}

// HasOenormNoteTextProperties returns a boolean if a field has been set.
func (o *NoteTextDtoAllOf) HasOenormNoteTextProperties() bool {
	if o != nil && !IsNil(o.OenormNoteTextProperties) {
		return true
	}

	return false
}

// SetOenormNoteTextProperties gets a reference to the given OenormNoteTextPropertiesDto and assigns it to the OenormNoteTextProperties field.
func (o *NoteTextDtoAllOf) SetOenormNoteTextProperties(v OenormNoteTextPropertiesDto) {
	o.OenormNoteTextProperties = &v
}

// GetHasBidderCommentInHtmlLongText returns the HasBidderCommentInHtmlLongText field value
func (o *NoteTextDtoAllOf) GetHasBidderCommentInHtmlLongText() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasBidderCommentInHtmlLongText
}

// GetHasBidderCommentInHtmlLongTextOk returns a tuple with the HasBidderCommentInHtmlLongText field value
// and a boolean to check if the value has been set.
func (o *NoteTextDtoAllOf) GetHasBidderCommentInHtmlLongTextOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasBidderCommentInHtmlLongText, true
}

// SetHasBidderCommentInHtmlLongText sets field value
func (o *NoteTextDtoAllOf) SetHasBidderCommentInHtmlLongText(v bool) {
	o.HasBidderCommentInHtmlLongText = v
}

func (o NoteTextDtoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NoteTextDtoAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isOpeningText"] = o.IsOpeningText
	toSerialize["isClosingText"] = o.IsClosingText
	if !IsNil(o.ShortText) {
		toSerialize["shortText"] = o.ShortText
	}
	toSerialize["additionType"] = o.AdditionType
	if !IsNil(o.LongText) {
		toSerialize["longText"] = o.LongText
	}
	if !IsNil(o.HtmlLongText) {
		toSerialize["htmlLongText"] = o.HtmlLongText
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.StandardizedDescription) {
		toSerialize["standardizedDescription"] = o.StandardizedDescription
	}
	if !IsNil(o.ElementType) {
		toSerialize["elementType"] = o.ElementType
	}
	if !IsNil(o.DescriptionId) {
		toSerialize["descriptionId"] = o.DescriptionId
	}
	if !IsNil(o.OenormNoteTextProperties) {
		toSerialize["oenormNoteTextProperties"] = o.OenormNoteTextProperties
	}
	// skip: hasBidderCommentInHtmlLongText is readOnly
	return toSerialize, nil
}

type NullableNoteTextDtoAllOf struct {
	value *NoteTextDtoAllOf
	isSet bool
}

func (v NullableNoteTextDtoAllOf) Get() *NoteTextDtoAllOf {
	return v.value
}

func (v *NullableNoteTextDtoAllOf) Set(val *NoteTextDtoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteTextDtoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteTextDtoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteTextDtoAllOf(val *NoteTextDtoAllOf) *NullableNoteTextDtoAllOf {
	return &NullableNoteTextDtoAllOf{value: val, isSet: true}
}

func (v NullableNoteTextDtoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteTextDtoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
