/*
AVACloud API 1.41.8

AVACloud API specification

API version: 1.41.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
)

// GaebConversionApiService GaebConversionApi service
type GaebConversionApiService service

type ApiGaebConversionConvertToAvaRequest struct {
	ctx                                       context.Context
	ApiService                                *GaebConversionApiService
	supportSkippedItemNumberLevelsInPositions *bool
	removePlainTextLongTexts                  *bool
	removeHtmlLongTexts                       *bool
	outputHtmlAsXml                           *bool
	keepEmptyHtmlText                         *bool
	allowUpperCaseItemNumbers                 *bool
	gaebFile                                  *os.File
}

// Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true.
func (r ApiGaebConversionConvertToAvaRequest) SupportSkippedItemNumberLevelsInPositions(supportSkippedItemNumberLevelsInPositions bool) ApiGaebConversionConvertToAvaRequest {
	r.supportSkippedItemNumberLevelsInPositions = &supportSkippedItemNumberLevelsInPositions
	return r
}

// If set to true, plain text long texts will be removed from the output to reduce response sizes
func (r ApiGaebConversionConvertToAvaRequest) RemovePlainTextLongTexts(removePlainTextLongTexts bool) ApiGaebConversionConvertToAvaRequest {
	r.removePlainTextLongTexts = &removePlainTextLongTexts
	return r
}

// If set to true, html long texts will be removed from the output to reduce response sizes
func (r ApiGaebConversionConvertToAvaRequest) RemoveHtmlLongTexts(removeHtmlLongTexts bool) ApiGaebConversionConvertToAvaRequest {
	r.removeHtmlLongTexts = &removeHtmlLongTexts
	return r
}

// Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;.
func (r ApiGaebConversionConvertToAvaRequest) OutputHtmlAsXml(outputHtmlAsXml bool) ApiGaebConversionConvertToAvaRequest {
	r.outputHtmlAsXml = &outputHtmlAsXml
	return r
}

// Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output.
func (r ApiGaebConversionConvertToAvaRequest) KeepEmptyHtmlText(keepEmptyHtmlText bool) ApiGaebConversionConvertToAvaRequest {
	r.keepEmptyHtmlText = &keepEmptyHtmlText
	return r
}

// Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well.
func (r ApiGaebConversionConvertToAvaRequest) AllowUpperCaseItemNumbers(allowUpperCaseItemNumbers bool) ApiGaebConversionConvertToAvaRequest {
	r.allowUpperCaseItemNumbers = &allowUpperCaseItemNumbers
	return r
}

// The input file
func (r ApiGaebConversionConvertToAvaRequest) GaebFile(gaebFile *os.File) ApiGaebConversionConvertToAvaRequest {
	r.gaebFile = gaebFile
	return r
}

func (r ApiGaebConversionConvertToAvaRequest) Execute() (*ProjectDto, *http.Response, error) {
	return r.ApiService.GaebConversionConvertToAvaExecute(r)
}

/*
GaebConversionConvertToAva Converts GAEB files to Dangl.AVA projects

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGaebConversionConvertToAvaRequest
*/
func (a *GaebConversionApiService) GaebConversionConvertToAva(ctx context.Context) ApiGaebConversionConvertToAvaRequest {
	return ApiGaebConversionConvertToAvaRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ProjectDto
func (a *GaebConversionApiService) GaebConversionConvertToAvaExecute(r ApiGaebConversionConvertToAvaRequest) (*ProjectDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GaebConversionApiService.GaebConversionConvertToAva")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversion/gaeb/ava"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.supportSkippedItemNumberLevelsInPositions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SupportSkippedItemNumberLevelsInPositions", r.supportSkippedItemNumberLevelsInPositions, "")
	}
	if r.removePlainTextLongTexts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "RemovePlainTextLongTexts", r.removePlainTextLongTexts, "")
	}
	if r.removeHtmlLongTexts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "RemoveHtmlLongTexts", r.removeHtmlLongTexts, "")
	}
	if r.outputHtmlAsXml != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "OutputHtmlAsXml", r.outputHtmlAsXml, "")
	}
	if r.keepEmptyHtmlText != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "KeepEmptyHtmlText", r.keepEmptyHtmlText, "")
	}
	if r.allowUpperCaseItemNumbers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AllowUpperCaseItemNumbers", r.allowUpperCaseItemNumbers, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.com.dangl-it.ProjectDto.v1+json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var gaebFileLocalVarFormFileName string
	var gaebFileLocalVarFileName string
	var gaebFileLocalVarFileBytes []byte

	gaebFileLocalVarFormFileName = "gaebFile"

	gaebFileLocalVarFile := r.gaebFile

	if gaebFileLocalVarFile != nil {
		fbs, _ := io.ReadAll(gaebFileLocalVarFile)

		gaebFileLocalVarFileBytes = fbs
		gaebFileLocalVarFileName = gaebFileLocalVarFile.Name()
		gaebFileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: gaebFileLocalVarFileBytes, fileName: gaebFileLocalVarFileName, formFileName: gaebFileLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGaebConversionConvertToExcelRequest struct {
	ctx                                       context.Context
	ApiService                                *GaebConversionApiService
	supportSkippedItemNumberLevelsInPositions *bool
	writePrices                               *bool
	writeLongTexts                            *bool
	conversionCulture                         *string
	outputHtmlAsXml                           *bool
	keepEmptyHtmlText                         *bool
	allowUpperCaseItemNumbers                 *bool
	gaebFile                                  *os.File
}

// Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true.
func (r ApiGaebConversionConvertToExcelRequest) SupportSkippedItemNumberLevelsInPositions(supportSkippedItemNumberLevelsInPositions bool) ApiGaebConversionConvertToExcelRequest {
	r.supportSkippedItemNumberLevelsInPositions = &supportSkippedItemNumberLevelsInPositions
	return r
}

// Defaults to true
func (r ApiGaebConversionConvertToExcelRequest) WritePrices(writePrices bool) ApiGaebConversionConvertToExcelRequest {
	r.writePrices = &writePrices
	return r
}

// Defaults to true
func (r ApiGaebConversionConvertToExcelRequest) WriteLongTexts(writeLongTexts bool) ApiGaebConversionConvertToExcelRequest {
	r.writeLongTexts = &writeLongTexts
	return r
}

// The culture that should be used for the conversion process, to have localized Excel files
func (r ApiGaebConversionConvertToExcelRequest) ConversionCulture(conversionCulture string) ApiGaebConversionConvertToExcelRequest {
	r.conversionCulture = &conversionCulture
	return r
}

// Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;.
func (r ApiGaebConversionConvertToExcelRequest) OutputHtmlAsXml(outputHtmlAsXml bool) ApiGaebConversionConvertToExcelRequest {
	r.outputHtmlAsXml = &outputHtmlAsXml
	return r
}

// Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output.
func (r ApiGaebConversionConvertToExcelRequest) KeepEmptyHtmlText(keepEmptyHtmlText bool) ApiGaebConversionConvertToExcelRequest {
	r.keepEmptyHtmlText = &keepEmptyHtmlText
	return r
}

// Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well.
func (r ApiGaebConversionConvertToExcelRequest) AllowUpperCaseItemNumbers(allowUpperCaseItemNumbers bool) ApiGaebConversionConvertToExcelRequest {
	r.allowUpperCaseItemNumbers = &allowUpperCaseItemNumbers
	return r
}

// The input file
func (r ApiGaebConversionConvertToExcelRequest) GaebFile(gaebFile *os.File) ApiGaebConversionConvertToExcelRequest {
	r.gaebFile = gaebFile
	return r
}

func (r ApiGaebConversionConvertToExcelRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GaebConversionConvertToExcelExecute(r)
}

/*
GaebConversionConvertToExcel Converts GAEB files to Excel

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGaebConversionConvertToExcelRequest
*/
func (a *GaebConversionApiService) GaebConversionConvertToExcel(ctx context.Context) ApiGaebConversionConvertToExcelRequest {
	return ApiGaebConversionConvertToExcelRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *GaebConversionApiService) GaebConversionConvertToExcelExecute(r ApiGaebConversionConvertToExcelRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GaebConversionApiService.GaebConversionConvertToExcel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversion/gaeb/excel"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.supportSkippedItemNumberLevelsInPositions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SupportSkippedItemNumberLevelsInPositions", r.supportSkippedItemNumberLevelsInPositions, "")
	}
	if r.writePrices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "WritePrices", r.writePrices, "")
	}
	if r.writeLongTexts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "WriteLongTexts", r.writeLongTexts, "")
	}
	if r.conversionCulture != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ConversionCulture", r.conversionCulture, "")
	}
	if r.outputHtmlAsXml != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "OutputHtmlAsXml", r.outputHtmlAsXml, "")
	}
	if r.keepEmptyHtmlText != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "KeepEmptyHtmlText", r.keepEmptyHtmlText, "")
	}
	if r.allowUpperCaseItemNumbers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AllowUpperCaseItemNumbers", r.allowUpperCaseItemNumbers, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var gaebFileLocalVarFormFileName string
	var gaebFileLocalVarFileName string
	var gaebFileLocalVarFileBytes []byte

	gaebFileLocalVarFormFileName = "gaebFile"

	gaebFileLocalVarFile := r.gaebFile

	if gaebFileLocalVarFile != nil {
		fbs, _ := io.ReadAll(gaebFileLocalVarFile)

		gaebFileLocalVarFileBytes = fbs
		gaebFileLocalVarFileName = gaebFileLocalVarFile.Name()
		gaebFileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: gaebFileLocalVarFileBytes, fileName: gaebFileLocalVarFileName, formFileName: gaebFileLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGaebConversionConvertToGaebRequest struct {
	ctx                                       context.Context
	ApiService                                *GaebConversionApiService
	supportSkippedItemNumberLevelsInPositions *bool
	destinationGaebType                       *string
	targetExchangePhaseTransform              *string
	enforceStrictOfferPhaseLongTextOutput     *bool
	exportQuantityDetermination               *bool
	removeUnprintableCharactersFromTexts      *bool
	forceIncludeDescriptions                  *bool
	treatNullItemNumberSchemaAsInvalid        *bool
	outputHtmlAsXml                           *bool
	keepEmptyHtmlText                         *bool
	allowUpperCaseItemNumbers                 *bool
	gaebFile                                  *os.File
}

// Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true.
func (r ApiGaebConversionConvertToGaebRequest) SupportSkippedItemNumberLevelsInPositions(supportSkippedItemNumberLevelsInPositions bool) ApiGaebConversionConvertToGaebRequest {
	r.supportSkippedItemNumberLevelsInPositions = &supportSkippedItemNumberLevelsInPositions
	return r
}

// Defaults to GAEB XML V3.2
func (r ApiGaebConversionConvertToGaebRequest) DestinationGaebType(destinationGaebType string) ApiGaebConversionConvertToGaebRequest {
	r.destinationGaebType = &destinationGaebType
	return r
}

// Defaults to none, meaning no transformation will be done
func (r ApiGaebConversionConvertToGaebRequest) TargetExchangePhaseTransform(targetExchangePhaseTransform string) ApiGaebConversionConvertToGaebRequest {
	r.targetExchangePhaseTransform = &targetExchangePhaseTransform
	return r
}

// Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export.
func (r ApiGaebConversionConvertToGaebRequest) EnforceStrictOfferPhaseLongTextOutput(enforceStrictOfferPhaseLongTextOutput bool) ApiGaebConversionConvertToGaebRequest {
	r.enforceStrictOfferPhaseLongTextOutput = &enforceStrictOfferPhaseLongTextOutput
	return r
}

// Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the &#39;QtyDeterm&#39; (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the &#39;QuantityComponents&#39; property of positions. Please see the entry for &#39;Quantity Determination&#39; in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the &#39;QuantityComponents&#39; property.
func (r ApiGaebConversionConvertToGaebRequest) ExportQuantityDetermination(exportQuantityDetermination bool) ApiGaebConversionConvertToGaebRequest {
	r.exportQuantityDetermination = &exportQuantityDetermination
	return r
}

// If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true.
func (r ApiGaebConversionConvertToGaebRequest) RemoveUnprintableCharactersFromTexts(removeUnprintableCharactersFromTexts bool) ApiGaebConversionConvertToGaebRequest {
	r.removeUnprintableCharactersFromTexts = &removeUnprintableCharactersFromTexts
	return r
}

// If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions.
func (r ApiGaebConversionConvertToGaebRequest) ForceIncludeDescriptions(forceIncludeDescriptions bool) ApiGaebConversionConvertToGaebRequest {
	r.forceIncludeDescriptions = &forceIncludeDescriptions
	return r
}

// When exporting to GAEB, an item number schema is usually required. AVACloud will try to fix invalid item number schemas. With this setting, you can also tell AVACloud to treat a null value as invalid. Otherwise, null schemas will simply be ignored and not lead to any schema being generated. It is recommended to enable this option, but it is disabled by default for compatibility reasons.
func (r ApiGaebConversionConvertToGaebRequest) TreatNullItemNumberSchemaAsInvalid(treatNullItemNumberSchemaAsInvalid bool) ApiGaebConversionConvertToGaebRequest {
	r.treatNullItemNumberSchemaAsInvalid = &treatNullItemNumberSchemaAsInvalid
	return r
}

// Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;.
func (r ApiGaebConversionConvertToGaebRequest) OutputHtmlAsXml(outputHtmlAsXml bool) ApiGaebConversionConvertToGaebRequest {
	r.outputHtmlAsXml = &outputHtmlAsXml
	return r
}

// Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output.
func (r ApiGaebConversionConvertToGaebRequest) KeepEmptyHtmlText(keepEmptyHtmlText bool) ApiGaebConversionConvertToGaebRequest {
	r.keepEmptyHtmlText = &keepEmptyHtmlText
	return r
}

// Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well.
func (r ApiGaebConversionConvertToGaebRequest) AllowUpperCaseItemNumbers(allowUpperCaseItemNumbers bool) ApiGaebConversionConvertToGaebRequest {
	r.allowUpperCaseItemNumbers = &allowUpperCaseItemNumbers
	return r
}

// The input file
func (r ApiGaebConversionConvertToGaebRequest) GaebFile(gaebFile *os.File) ApiGaebConversionConvertToGaebRequest {
	r.gaebFile = gaebFile
	return r
}

func (r ApiGaebConversionConvertToGaebRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GaebConversionConvertToGaebExecute(r)
}

/*
GaebConversionConvertToGaeb Converts GAEB files to GAEB files. Used for example when transforming or repairing GAEB files.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGaebConversionConvertToGaebRequest
*/
func (a *GaebConversionApiService) GaebConversionConvertToGaeb(ctx context.Context) ApiGaebConversionConvertToGaebRequest {
	return ApiGaebConversionConvertToGaebRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *GaebConversionApiService) GaebConversionConvertToGaebExecute(r ApiGaebConversionConvertToGaebRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GaebConversionApiService.GaebConversionConvertToGaeb")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversion/gaeb/gaeb"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.supportSkippedItemNumberLevelsInPositions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SupportSkippedItemNumberLevelsInPositions", r.supportSkippedItemNumberLevelsInPositions, "")
	}
	if r.destinationGaebType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DestinationGaebType", r.destinationGaebType, "")
	}
	if r.targetExchangePhaseTransform != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "TargetExchangePhaseTransform", r.targetExchangePhaseTransform, "")
	}
	if r.enforceStrictOfferPhaseLongTextOutput != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnforceStrictOfferPhaseLongTextOutput", r.enforceStrictOfferPhaseLongTextOutput, "")
	}
	if r.exportQuantityDetermination != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ExportQuantityDetermination", r.exportQuantityDetermination, "")
	}
	if r.removeUnprintableCharactersFromTexts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "RemoveUnprintableCharactersFromTexts", r.removeUnprintableCharactersFromTexts, "")
	}
	if r.forceIncludeDescriptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForceIncludeDescriptions", r.forceIncludeDescriptions, "")
	}
	if r.treatNullItemNumberSchemaAsInvalid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "TreatNullItemNumberSchemaAsInvalid", r.treatNullItemNumberSchemaAsInvalid, "")
	}
	if r.outputHtmlAsXml != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "OutputHtmlAsXml", r.outputHtmlAsXml, "")
	}
	if r.keepEmptyHtmlText != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "KeepEmptyHtmlText", r.keepEmptyHtmlText, "")
	}
	if r.allowUpperCaseItemNumbers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AllowUpperCaseItemNumbers", r.allowUpperCaseItemNumbers, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var gaebFileLocalVarFormFileName string
	var gaebFileLocalVarFileName string
	var gaebFileLocalVarFileBytes []byte

	gaebFileLocalVarFormFileName = "gaebFile"

	gaebFileLocalVarFile := r.gaebFile

	if gaebFileLocalVarFile != nil {
		fbs, _ := io.ReadAll(gaebFileLocalVarFile)

		gaebFileLocalVarFileBytes = fbs
		gaebFileLocalVarFileName = gaebFileLocalVarFile.Name()
		gaebFileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: gaebFileLocalVarFileBytes, fileName: gaebFileLocalVarFileName, formFileName: gaebFileLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGaebConversionConvertToOenormRequest struct {
	ctx                                       context.Context
	ApiService                                *GaebConversionApiService
	supportSkippedItemNumberLevelsInPositions *bool
	destinationOenormType                     *string
	tryRepairProjectStructure                 *bool
	skipTryEnforceSchemaCompliantXmlOutput    *bool
	removeUnprintableCharactersFromTexts      *bool
	outputHtmlAsXml                           *bool
	keepEmptyHtmlText                         *bool
	allowUpperCaseItemNumbers                 *bool
	gaebFile                                  *os.File
}

// Defaults to &#39;false&#39;. This controls if, when deserializing GAEB files, skipped levels in position item numbers should be supported. For example, if an ItemNumberSchema defines three levels - two group levels and one position level - but the ItemNumber of the position is just &#39;01.02&#39;, then it will be displayed as &#39;01.__.02&#39; if this is set to true.
func (r ApiGaebConversionConvertToOenormRequest) SupportSkippedItemNumberLevelsInPositions(supportSkippedItemNumberLevelsInPositions bool) ApiGaebConversionConvertToOenormRequest {
	r.supportSkippedItemNumberLevelsInPositions = &supportSkippedItemNumberLevelsInPositions
	return r
}

// Defaults to Lv2015
func (r ApiGaebConversionConvertToOenormRequest) DestinationOenormType(destinationOenormType string) ApiGaebConversionConvertToOenormRequest {
	r.destinationOenormType = &destinationOenormType
	return r
}

// Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target
func (r ApiGaebConversionConvertToOenormRequest) TryRepairProjectStructure(tryRepairProjectStructure bool) ApiGaebConversionConvertToOenormRequest {
	r.tryRepairProjectStructure = &tryRepairProjectStructure
	return r
}

// If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option.
func (r ApiGaebConversionConvertToOenormRequest) SkipTryEnforceSchemaCompliantXmlOutput(skipTryEnforceSchemaCompliantXmlOutput bool) ApiGaebConversionConvertToOenormRequest {
	r.skipTryEnforceSchemaCompliantXmlOutput = &skipTryEnforceSchemaCompliantXmlOutput
	return r
}

// If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true.
func (r ApiGaebConversionConvertToOenormRequest) RemoveUnprintableCharactersFromTexts(removeUnprintableCharactersFromTexts bool) ApiGaebConversionConvertToOenormRequest {
	r.removeUnprintableCharactersFromTexts = &removeUnprintableCharactersFromTexts
	return r
}

// Defaults to &#39;false&#39;. If this is enabled, then Html text will be output as XML in the output. This means that e.g. void Html tags will always be output with their closing tag, e.g. it will produce &#39;&lt;br /&gt;&#39; instead of &#39;&lt;br&gt;&#39;.
func (r ApiGaebConversionConvertToOenormRequest) OutputHtmlAsXml(outputHtmlAsXml bool) ApiGaebConversionConvertToOenormRequest {
	r.outputHtmlAsXml = &outputHtmlAsXml
	return r
}

// Defaults to &#39;false&#39;. If this is enabled, then Html text that is empty will be kept in the output. Otherwise, Html text without any plain text will be removed. This is useful for example if you want to keep texts that only consist of empty paragraphs in the output.
func (r ApiGaebConversionConvertToOenormRequest) KeepEmptyHtmlText(keepEmptyHtmlText bool) ApiGaebConversionConvertToOenormRequest {
	r.keepEmptyHtmlText = &keepEmptyHtmlText
	return r
}

// Defaults to &#39;false&#39;. If this is enabled, then the ItemNumber of positions will be in uppercase format if the source file has them. By default, all item numbers will be converted to lowercase, but this option will enable the option to support uppercase item numbers as well.
func (r ApiGaebConversionConvertToOenormRequest) AllowUpperCaseItemNumbers(allowUpperCaseItemNumbers bool) ApiGaebConversionConvertToOenormRequest {
	r.allowUpperCaseItemNumbers = &allowUpperCaseItemNumbers
	return r
}

// The input file
func (r ApiGaebConversionConvertToOenormRequest) GaebFile(gaebFile *os.File) ApiGaebConversionConvertToOenormRequest {
	r.gaebFile = gaebFile
	return r
}

func (r ApiGaebConversionConvertToOenormRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GaebConversionConvertToOenormExecute(r)
}

/*
GaebConversionConvertToOenorm Converts GAEB files to Oenorm files

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGaebConversionConvertToOenormRequest
*/
func (a *GaebConversionApiService) GaebConversionConvertToOenorm(ctx context.Context) ApiGaebConversionConvertToOenormRequest {
	return ApiGaebConversionConvertToOenormRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *GaebConversionApiService) GaebConversionConvertToOenormExecute(r ApiGaebConversionConvertToOenormRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GaebConversionApiService.GaebConversionConvertToOenorm")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversion/gaeb/oenorm"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.supportSkippedItemNumberLevelsInPositions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SupportSkippedItemNumberLevelsInPositions", r.supportSkippedItemNumberLevelsInPositions, "")
	}
	if r.destinationOenormType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DestinationOenormType", r.destinationOenormType, "")
	}
	if r.tryRepairProjectStructure != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "TryRepairProjectStructure", r.tryRepairProjectStructure, "")
	}
	if r.skipTryEnforceSchemaCompliantXmlOutput != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SkipTryEnforceSchemaCompliantXmlOutput", r.skipTryEnforceSchemaCompliantXmlOutput, "")
	}
	if r.removeUnprintableCharactersFromTexts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "RemoveUnprintableCharactersFromTexts", r.removeUnprintableCharactersFromTexts, "")
	}
	if r.outputHtmlAsXml != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "OutputHtmlAsXml", r.outputHtmlAsXml, "")
	}
	if r.keepEmptyHtmlText != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "KeepEmptyHtmlText", r.keepEmptyHtmlText, "")
	}
	if r.allowUpperCaseItemNumbers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AllowUpperCaseItemNumbers", r.allowUpperCaseItemNumbers, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var gaebFileLocalVarFormFileName string
	var gaebFileLocalVarFileName string
	var gaebFileLocalVarFileBytes []byte

	gaebFileLocalVarFormFileName = "gaebFile"

	gaebFileLocalVarFile := r.gaebFile

	if gaebFileLocalVarFile != nil {
		fbs, _ := io.ReadAll(gaebFileLocalVarFile)

		gaebFileLocalVarFileBytes = fbs
		gaebFileLocalVarFileName = gaebFileLocalVarFile.Name()
		gaebFileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: gaebFileLocalVarFileBytes, fileName: gaebFileLocalVarFileName, formFileName: gaebFileLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
