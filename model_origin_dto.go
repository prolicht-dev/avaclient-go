/*
AVACloud API 1.51.0

AVACloud API specification

API version: 1.51.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
	"fmt"
)

// OriginDto Indicates where a service specification was originally created.
type OriginDto string

// List of OriginDto
const (
	ORIGINDTO_SELF     OriginDto = "Self"
	ORIGINDTO_GAEB90   OriginDto = "Gaeb90"
	ORIGINDTO_GAEB2000 OriginDto = "Gaeb2000"
	ORIGINDTO_GAEB_XML OriginDto = "GaebXml"
	ORIGINDTO_OENORM   OriginDto = "Oenorm"
	ORIGINDTO_REB      OriginDto = "Reb"
	ORIGINDTO_SIA      OriginDto = "Sia"
)

// All allowed values of OriginDto enum
var AllowedOriginDtoEnumValues = []OriginDto{
	"Self",
	"Gaeb90",
	"Gaeb2000",
	"GaebXml",
	"Oenorm",
	"Reb",
	"Sia",
}

func (v *OriginDto) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OriginDto(value)
	for _, existing := range AllowedOriginDtoEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OriginDto", value)
}

// NewOriginDtoFromValue returns a pointer to a valid OriginDto
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOriginDtoFromValue(v string) (*OriginDto, error) {
	ev := OriginDto(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OriginDto: valid values are %v", v, AllowedOriginDtoEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OriginDto) IsValid() bool {
	for _, existing := range AllowedOriginDtoEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OriginDto value
func (v OriginDto) Ptr() *OriginDto {
	return &v
}

type NullableOriginDto struct {
	value *OriginDto
	isSet bool
}

func (v NullableOriginDto) Get() *OriginDto {
	return v.value
}

func (v *NullableOriginDto) Set(val *OriginDto) {
	v.value = val
	v.isSet = true
}

func (v NullableOriginDto) IsSet() bool {
	return v.isSet
}

func (v *NullableOriginDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOriginDto(val *OriginDto) *NullableOriginDto {
	return &NullableOriginDto{value: val, isSet: true}
}

func (v NullableOriginDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOriginDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
