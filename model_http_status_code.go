/*
AVACloud API 1.41.4

AVACloud API specification

API version: 1.41.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
	"fmt"
)

// HttpStatusCode
type HttpStatusCode string

// List of HttpStatusCode
const (
	HTTPSTATUSCODE_CONTINUE                        HttpStatusCode = "Continue"
	HTTPSTATUSCODE_SWITCHING_PROTOCOLS             HttpStatusCode = "SwitchingProtocols"
	HTTPSTATUSCODE_PROCESSING                      HttpStatusCode = "Processing"
	HTTPSTATUSCODE_EARLY_HINTS                     HttpStatusCode = "EarlyHints"
	HTTPSTATUSCODE_OK                              HttpStatusCode = "OK"
	HTTPSTATUSCODE_CREATED                         HttpStatusCode = "Created"
	HTTPSTATUSCODE_ACCEPTED                        HttpStatusCode = "Accepted"
	HTTPSTATUSCODE_NON_AUTHORITATIVE_INFORMATION   HttpStatusCode = "NonAuthoritativeInformation"
	HTTPSTATUSCODE_NO_CONTENT                      HttpStatusCode = "NoContent"
	HTTPSTATUSCODE_RESET_CONTENT                   HttpStatusCode = "ResetContent"
	HTTPSTATUSCODE_PARTIAL_CONTENT                 HttpStatusCode = "PartialContent"
	HTTPSTATUSCODE_MULTI_STATUS                    HttpStatusCode = "MultiStatus"
	HTTPSTATUSCODE_ALREADY_REPORTED                HttpStatusCode = "AlreadyReported"
	HTTPSTATUSCODE_IM_USED                         HttpStatusCode = "IMUsed"
	HTTPSTATUSCODE_AMBIGUOUS                       HttpStatusCode = "Ambiguous"
	HTTPSTATUSCODE_MOVED                           HttpStatusCode = "Moved"
	HTTPSTATUSCODE_REDIRECT                        HttpStatusCode = "Redirect"
	HTTPSTATUSCODE_REDIRECT_METHOD                 HttpStatusCode = "RedirectMethod"
	HTTPSTATUSCODE_NOT_MODIFIED                    HttpStatusCode = "NotModified"
	HTTPSTATUSCODE_USE_PROXY                       HttpStatusCode = "UseProxy"
	HTTPSTATUSCODE_UNUSED                          HttpStatusCode = "Unused"
	HTTPSTATUSCODE_TEMPORARY_REDIRECT              HttpStatusCode = "TemporaryRedirect"
	HTTPSTATUSCODE_PERMANENT_REDIRECT              HttpStatusCode = "PermanentRedirect"
	HTTPSTATUSCODE_BAD_REQUEST                     HttpStatusCode = "BadRequest"
	HTTPSTATUSCODE_UNAUTHORIZED                    HttpStatusCode = "Unauthorized"
	HTTPSTATUSCODE_PAYMENT_REQUIRED                HttpStatusCode = "PaymentRequired"
	HTTPSTATUSCODE_FORBIDDEN                       HttpStatusCode = "Forbidden"
	HTTPSTATUSCODE_NOT_FOUND                       HttpStatusCode = "NotFound"
	HTTPSTATUSCODE_METHOD_NOT_ALLOWED              HttpStatusCode = "MethodNotAllowed"
	HTTPSTATUSCODE_NOT_ACCEPTABLE                  HttpStatusCode = "NotAcceptable"
	HTTPSTATUSCODE_PROXY_AUTHENTICATION_REQUIRED   HttpStatusCode = "ProxyAuthenticationRequired"
	HTTPSTATUSCODE_REQUEST_TIMEOUT                 HttpStatusCode = "RequestTimeout"
	HTTPSTATUSCODE_CONFLICT                        HttpStatusCode = "Conflict"
	HTTPSTATUSCODE_GONE                            HttpStatusCode = "Gone"
	HTTPSTATUSCODE_LENGTH_REQUIRED                 HttpStatusCode = "LengthRequired"
	HTTPSTATUSCODE_PRECONDITION_FAILED             HttpStatusCode = "PreconditionFailed"
	HTTPSTATUSCODE_REQUEST_ENTITY_TOO_LARGE        HttpStatusCode = "RequestEntityTooLarge"
	HTTPSTATUSCODE_REQUEST_URI_TOO_LONG            HttpStatusCode = "RequestUriTooLong"
	HTTPSTATUSCODE_UNSUPPORTED_MEDIA_TYPE          HttpStatusCode = "UnsupportedMediaType"
	HTTPSTATUSCODE_REQUESTED_RANGE_NOT_SATISFIABLE HttpStatusCode = "RequestedRangeNotSatisfiable"
	HTTPSTATUSCODE_EXPECTATION_FAILED              HttpStatusCode = "ExpectationFailed"
	HTTPSTATUSCODE_MISDIRECTED_REQUEST             HttpStatusCode = "MisdirectedRequest"
	HTTPSTATUSCODE_UNPROCESSABLE_ENTITY            HttpStatusCode = "UnprocessableEntity"
	HTTPSTATUSCODE_LOCKED                          HttpStatusCode = "Locked"
	HTTPSTATUSCODE_FAILED_DEPENDENCY               HttpStatusCode = "FailedDependency"
	HTTPSTATUSCODE_UPGRADE_REQUIRED                HttpStatusCode = "UpgradeRequired"
	HTTPSTATUSCODE_PRECONDITION_REQUIRED           HttpStatusCode = "PreconditionRequired"
	HTTPSTATUSCODE_TOO_MANY_REQUESTS               HttpStatusCode = "TooManyRequests"
	HTTPSTATUSCODE_REQUEST_HEADER_FIELDS_TOO_LARGE HttpStatusCode = "RequestHeaderFieldsTooLarge"
	HTTPSTATUSCODE_UNAVAILABLE_FOR_LEGAL_REASONS   HttpStatusCode = "UnavailableForLegalReasons"
	HTTPSTATUSCODE_INTERNAL_SERVER_ERROR           HttpStatusCode = "InternalServerError"
	HTTPSTATUSCODE_NOT_IMPLEMENTED                 HttpStatusCode = "NotImplemented"
	HTTPSTATUSCODE_BAD_GATEWAY                     HttpStatusCode = "BadGateway"
	HTTPSTATUSCODE_SERVICE_UNAVAILABLE             HttpStatusCode = "ServiceUnavailable"
	HTTPSTATUSCODE_GATEWAY_TIMEOUT                 HttpStatusCode = "GatewayTimeout"
	HTTPSTATUSCODE_HTTP_VERSION_NOT_SUPPORTED      HttpStatusCode = "HttpVersionNotSupported"
	HTTPSTATUSCODE_VARIANT_ALSO_NEGOTIATES         HttpStatusCode = "VariantAlsoNegotiates"
	HTTPSTATUSCODE_INSUFFICIENT_STORAGE            HttpStatusCode = "InsufficientStorage"
	HTTPSTATUSCODE_LOOP_DETECTED                   HttpStatusCode = "LoopDetected"
	HTTPSTATUSCODE_NOT_EXTENDED                    HttpStatusCode = "NotExtended"
	HTTPSTATUSCODE_NETWORK_AUTHENTICATION_REQUIRED HttpStatusCode = "NetworkAuthenticationRequired"
)

// All allowed values of HttpStatusCode enum
var AllowedHttpStatusCodeEnumValues = []HttpStatusCode{
	"Continue",
	"SwitchingProtocols",
	"Processing",
	"EarlyHints",
	"OK",
	"Created",
	"Accepted",
	"NonAuthoritativeInformation",
	"NoContent",
	"ResetContent",
	"PartialContent",
	"MultiStatus",
	"AlreadyReported",
	"IMUsed",
	"Ambiguous",
	"Moved",
	"Redirect",
	"RedirectMethod",
	"NotModified",
	"UseProxy",
	"Unused",
	"TemporaryRedirect",
	"PermanentRedirect",
	"BadRequest",
	"Unauthorized",
	"PaymentRequired",
	"Forbidden",
	"NotFound",
	"MethodNotAllowed",
	"NotAcceptable",
	"ProxyAuthenticationRequired",
	"RequestTimeout",
	"Conflict",
	"Gone",
	"LengthRequired",
	"PreconditionFailed",
	"RequestEntityTooLarge",
	"RequestUriTooLong",
	"UnsupportedMediaType",
	"RequestedRangeNotSatisfiable",
	"ExpectationFailed",
	"MisdirectedRequest",
	"UnprocessableEntity",
	"Locked",
	"FailedDependency",
	"UpgradeRequired",
	"PreconditionRequired",
	"TooManyRequests",
	"RequestHeaderFieldsTooLarge",
	"UnavailableForLegalReasons",
	"InternalServerError",
	"NotImplemented",
	"BadGateway",
	"ServiceUnavailable",
	"GatewayTimeout",
	"HttpVersionNotSupported",
	"VariantAlsoNegotiates",
	"InsufficientStorage",
	"LoopDetected",
	"NotExtended",
	"NetworkAuthenticationRequired",
}

func (v *HttpStatusCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HttpStatusCode(value)
	for _, existing := range AllowedHttpStatusCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HttpStatusCode", value)
}

// NewHttpStatusCodeFromValue returns a pointer to a valid HttpStatusCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHttpStatusCodeFromValue(v string) (*HttpStatusCode, error) {
	ev := HttpStatusCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HttpStatusCode: valid values are %v", v, AllowedHttpStatusCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HttpStatusCode) IsValid() bool {
	for _, existing := range AllowedHttpStatusCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HttpStatusCode value
func (v HttpStatusCode) Ptr() *HttpStatusCode {
	return &v
}

type NullableHttpStatusCode struct {
	value *HttpStatusCode
	isSet bool
}

func (v NullableHttpStatusCode) Get() *HttpStatusCode {
	return v.value
}

func (v *NullableHttpStatusCode) Set(val *HttpStatusCode) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpStatusCode) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpStatusCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpStatusCode(val *HttpStatusCode) *NullableHttpStatusCode {
	return &NullableHttpStatusCode{value: val, isSet: true}
}

func (v NullableHttpStatusCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpStatusCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
