/*
AVACloud API 1.41.8

AVACloud API specification

API version: 1.41.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
)

// checks if the CatalogueDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogueDto{}

// CatalogueDto This class describes an external catalogue. Catalogues, or collections, hold information to categorize and describe items. For example, the German DIN 276 cost group standards describe different types of costs for building projects. When referencing the DIN 276 catalogue and providing an item key or identifier, it is possible to reference data in this catalogue.
type CatalogueDto struct {
	// Elements GUID identifier.
	Id string `json:"id"`
	// This is used to store the GAEB XML Id within this Catalogue. This data is not used for any calculations or evaluations but only for GAEB serialization and deserialization.
	GaebXmlId *string `json:"gaebXmlId,omitempty"`
	// The name that is given for this catalogue.
	Name *string `json:"name,omitempty"`
	// Additional information about this catalogue.
	Description   *string          `json:"description,omitempty"`
	CatalogueType CatalogueTypeDto `json:"catalogueType"`
}

// NewCatalogueDto instantiates a new CatalogueDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogueDto(id string, catalogueType CatalogueTypeDto) *CatalogueDto {
	this := CatalogueDto{}
	this.Id = id
	this.CatalogueType = catalogueType
	return &this
}

// NewCatalogueDtoWithDefaults instantiates a new CatalogueDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogueDtoWithDefaults() *CatalogueDto {
	this := CatalogueDto{}
	return &this
}

// GetId returns the Id field value
func (o *CatalogueDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CatalogueDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CatalogueDto) SetId(v string) {
	o.Id = v
}

// GetGaebXmlId returns the GaebXmlId field value if set, zero value otherwise.
func (o *CatalogueDto) GetGaebXmlId() string {
	if o == nil || IsNil(o.GaebXmlId) {
		var ret string
		return ret
	}
	return *o.GaebXmlId
}

// GetGaebXmlIdOk returns a tuple with the GaebXmlId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogueDto) GetGaebXmlIdOk() (*string, bool) {
	if o == nil || IsNil(o.GaebXmlId) {
		return nil, false
	}
	return o.GaebXmlId, true
}

// HasGaebXmlId returns a boolean if a field has been set.
func (o *CatalogueDto) HasGaebXmlId() bool {
	if o != nil && !IsNil(o.GaebXmlId) {
		return true
	}

	return false
}

// SetGaebXmlId gets a reference to the given string and assigns it to the GaebXmlId field.
func (o *CatalogueDto) SetGaebXmlId(v string) {
	o.GaebXmlId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CatalogueDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogueDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CatalogueDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CatalogueDto) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CatalogueDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogueDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CatalogueDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CatalogueDto) SetDescription(v string) {
	o.Description = &v
}

// GetCatalogueType returns the CatalogueType field value
func (o *CatalogueDto) GetCatalogueType() CatalogueTypeDto {
	if o == nil {
		var ret CatalogueTypeDto
		return ret
	}

	return o.CatalogueType
}

// GetCatalogueTypeOk returns a tuple with the CatalogueType field value
// and a boolean to check if the value has been set.
func (o *CatalogueDto) GetCatalogueTypeOk() (*CatalogueTypeDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogueType, true
}

// SetCatalogueType sets field value
func (o *CatalogueDto) SetCatalogueType(v CatalogueTypeDto) {
	o.CatalogueType = v
}

func (o CatalogueDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogueDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.GaebXmlId) {
		toSerialize["gaebXmlId"] = o.GaebXmlId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["catalogueType"] = o.CatalogueType
	return toSerialize, nil
}

type NullableCatalogueDto struct {
	value *CatalogueDto
	isSet bool
}

func (v NullableCatalogueDto) Get() *CatalogueDto {
	return v.value
}

func (v *NullableCatalogueDto) Set(val *CatalogueDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogueDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogueDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogueDto(val *CatalogueDto) *NullableCatalogueDto {
	return &NullableCatalogueDto{value: val, isSet: true}
}

func (v NullableCatalogueDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogueDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
