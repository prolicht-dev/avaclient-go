/*
AVACloud API 1.41.4

AVACloud API specification

API version: 1.41.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
	"fmt"
)

// AwardTypeDto This enumeration describes the type of the award / procurement process. If this is used in a GAEB context, more information about award types can be found in the German VOB/A rules and the GAEB standard
type AwardTypeDto string

// List of AwardTypeDto
const (
	AWARDTYPEDTO_UNSPECIFIED                                         AwardTypeDto = "Unspecified"
	AWARDTYPEDTO_OPEN_PROCUREMENT                                    AwardTypeDto = "OpenProcurement"
	AWARDTYPEDTO_CLOSED_PRODUCREMENT                                 AwardTypeDto = "ClosedProducrement"
	AWARDTYPEDTO_NEGOTIATION_PROCUREMENT_WITHOUT_PUBLIC_ANNOUNCEMENT AwardTypeDto = "NegotiationProcurementWithoutPublicAnnouncement"
	AWARDTYPEDTO_NEGOTIATION_PROCUREMENT                             AwardTypeDto = "NegotiationProcurement"
	AWARDTYPEDTO_OPEN_CALL                                           AwardTypeDto = "OpenCall"
	AWARDTYPEDTO_SELECTED_CALL_WITHOUT_PUBLIC_COMPETITION            AwardTypeDto = "SelectedCallWithoutPublicCompetition"
	AWARDTYPEDTO_SELECTED_CALL                                       AwardTypeDto = "SelectedCall"
	AWARDTYPEDTO_DIRECT_AWARD                                        AwardTypeDto = "DirectAward"
	AWARDTYPEDTO_INTERNATIONAL_NATO_PROCUREMENT                      AwardTypeDto = "InternationalNATOProcurement"
	AWARDTYPEDTO_COMPETITIVE_DIALOG                                  AwardTypeDto = "CompetitiveDialog"
)

// All allowed values of AwardTypeDto enum
var AllowedAwardTypeDtoEnumValues = []AwardTypeDto{
	"Unspecified",
	"OpenProcurement",
	"ClosedProducrement",
	"NegotiationProcurementWithoutPublicAnnouncement",
	"NegotiationProcurement",
	"OpenCall",
	"SelectedCallWithoutPublicCompetition",
	"SelectedCall",
	"DirectAward",
	"InternationalNATOProcurement",
	"CompetitiveDialog",
}

func (v *AwardTypeDto) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwardTypeDto(value)
	for _, existing := range AllowedAwardTypeDtoEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwardTypeDto", value)
}

// NewAwardTypeDtoFromValue returns a pointer to a valid AwardTypeDto
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwardTypeDtoFromValue(v string) (*AwardTypeDto, error) {
	ev := AwardTypeDto(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwardTypeDto: valid values are %v", v, AllowedAwardTypeDtoEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwardTypeDto) IsValid() bool {
	for _, existing := range AllowedAwardTypeDtoEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwardTypeDto value
func (v AwardTypeDto) Ptr() *AwardTypeDto {
	return &v
}

type NullableAwardTypeDto struct {
	value *AwardTypeDto
	isSet bool
}

func (v NullableAwardTypeDto) Get() *AwardTypeDto {
	return v.value
}

func (v *NullableAwardTypeDto) Set(val *AwardTypeDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAwardTypeDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAwardTypeDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwardTypeDto(val *AwardTypeDto) *NullableAwardTypeDto {
	return &NullableAwardTypeDto{value: val, isSet: true}
}

func (v NullableAwardTypeDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwardTypeDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
