/*
AVACloud API 1.41.8

AVACloud API specification

API version: 1.41.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
)

// checks if the OenormPropertiesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OenormPropertiesDto{}

// OenormPropertiesDto This class models special properties that only apply to some exchange scenarios where ÖNorm is used.
type OenormPropertiesDto struct {
	OriginCode OenormOriginCodeDto `json:"originCode"`
	// This marks if the opening texts within this element are considered free text. It corresponds to 'vorbemerkungskennzeichen' in ÖNorm.
	OpeningTextIsFreeText bool `json:"openingTextIsFreeText"`
}

// NewOenormPropertiesDto instantiates a new OenormPropertiesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOenormPropertiesDto(originCode OenormOriginCodeDto, openingTextIsFreeText bool) *OenormPropertiesDto {
	this := OenormPropertiesDto{}
	this.OriginCode = originCode
	this.OpeningTextIsFreeText = openingTextIsFreeText
	return &this
}

// NewOenormPropertiesDtoWithDefaults instantiates a new OenormPropertiesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOenormPropertiesDtoWithDefaults() *OenormPropertiesDto {
	this := OenormPropertiesDto{}
	return &this
}

// GetOriginCode returns the OriginCode field value
func (o *OenormPropertiesDto) GetOriginCode() OenormOriginCodeDto {
	if o == nil {
		var ret OenormOriginCodeDto
		return ret
	}

	return o.OriginCode
}

// GetOriginCodeOk returns a tuple with the OriginCode field value
// and a boolean to check if the value has been set.
func (o *OenormPropertiesDto) GetOriginCodeOk() (*OenormOriginCodeDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginCode, true
}

// SetOriginCode sets field value
func (o *OenormPropertiesDto) SetOriginCode(v OenormOriginCodeDto) {
	o.OriginCode = v
}

// GetOpeningTextIsFreeText returns the OpeningTextIsFreeText field value
func (o *OenormPropertiesDto) GetOpeningTextIsFreeText() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.OpeningTextIsFreeText
}

// GetOpeningTextIsFreeTextOk returns a tuple with the OpeningTextIsFreeText field value
// and a boolean to check if the value has been set.
func (o *OenormPropertiesDto) GetOpeningTextIsFreeTextOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpeningTextIsFreeText, true
}

// SetOpeningTextIsFreeText sets field value
func (o *OenormPropertiesDto) SetOpeningTextIsFreeText(v bool) {
	o.OpeningTextIsFreeText = v
}

func (o OenormPropertiesDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OenormPropertiesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["originCode"] = o.OriginCode
	toSerialize["openingTextIsFreeText"] = o.OpeningTextIsFreeText
	return toSerialize, nil
}

type NullableOenormPropertiesDto struct {
	value *OenormPropertiesDto
	isSet bool
}

func (v NullableOenormPropertiesDto) Get() *OenormPropertiesDto {
	return v.value
}

func (v *NullableOenormPropertiesDto) Set(val *OenormPropertiesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableOenormPropertiesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableOenormPropertiesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOenormPropertiesDto(val *OenormPropertiesDto) *NullableOenormPropertiesDto {
	return &NullableOenormPropertiesDto{value: val, isSet: true}
}

func (v NullableOenormPropertiesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOenormPropertiesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
