/*
AVACloud API 1.51.0

AVACloud API specification

API version: 1.51.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
)

// checks if the PositionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PositionDto{}

// PositionDto struct for PositionDto
type PositionDto struct {
	IElementDto
	// Will return the price per unit, rounded according to the project settings or the default value of three decimal places
	UnitPrice float32 `json:"unitPrice"`
	// You can use this property to directly set the unit price for this position. This will override any given PriceComponents
	UnitPriceOverride *float32 `json:"unitPriceOverride,omitempty"`
	// Will return this Position's total quantity, rounded to three decimal places.
	Quantity float32 `json:"quantity"`
	// You can use this property to directly set the quantity for this position. This will override any given QuantityComponents
	QuantityOverride *float32 `json:"quantityOverride,omitempty"`
	// This indicates true if this specific position is specified as a complementing position for any base position.
	IsComplementingPosition bool `json:"isComplementingPosition"`
	// If IsComplementingPosition is set to true, this will indicate which base positions are targeted by this complementing position.
	ComplementsPositions []string `json:"complementsPositions,omitempty"`
	// You can use this property to directly specify the total price of this position as a percentage of the sum of the total prices of base positions that this position complements. It will essentially set the total price for this position to the sum of all total prices of the positions specified in ComplementsPositions multiplied by the percentage here. If present, this has precedence over UnitPriceOverride as well as QuantityOverride.
	ComplementingPricePercentageOverride *float32 `json:"complementingPricePercentageOverride,omitempty"`
	// This is a read only property showing the total price of this positions as a percentage of the sum of the total prices of all base positions, in case this position is a complementing positions. If this position is not a complementing position, this will be null. Also, if no prices are present, this will also be null.
	ComplementingPricePercentage *float32 `json:"complementingPricePercentage,omitempty"`
	// The tag of the unit used for this positions quantity.
	UnitTag          *string                  `json:"unitTag,omitempty"`
	LabourComponents *LabourPriceComponentDto `json:"labourComponents,omitempty"`
	// The single price components in this Position. Price components should not be handled directly on a per-position basis but set globally in the parent Projects ProjectInformation.
	PriceComponents []PriceComponentDto `json:"priceComponents,omitempty"`
	// The quantity components of this Position.
	QuantityComponents []CalculationDto `json:"quantityComponents,omitempty"`
	// Further structuring of this Position.
	SubDescriptions []SubDescriptionDto `json:"subDescriptions,omitempty"`
	ComissionStatus ComissionStatusDto  `json:"comissionStatus"`
	// A list of positions that complement this Position. The positions are referenced by their GUIDs. It might be used together with ComplementedByQuantities in case that only a given quantity is complemented by positions.
	ComplementedBy []string `json:"complementedBy,omitempty"`
	// Will indicate if this Position is complemented in this ServiceSpecification by other Positions. It can not be set to false when there are entries in the ComplementedBy property.
	Complemented bool `json:"complemented"`
	// Indicates that the amount for this Position is to be set by the bidder.
	AmountToBeEnteredByBidder bool `json:"amountToBeEnteredByBidder"`
	// Indicates if the bidder demands for prices to be broken up into their price components.
	PriceCompositionRequired bool `json:"priceCompositionRequired"`
	// Indicates if this Position should use a different TaxRate than what is the default for the Project.
	UseDifferentTaxRate bool `json:"useDifferentTaxRate"`
	// Will return either the parent ServiceSpecification's TaxRate or it's own if it has a different value. (For example, in Germany Water has a different TaxRate than regular Positions)
	TaxRate    float32        `json:"taxRate"`
	ItemNumber *ItemNumberDto `json:"itemNumber,omitempty"`
	// The rate of deductions, i.e. 0.12m means 12% price deduction.
	DeductionFactor float32 `json:"deductionFactor"`
	// Returns the product of UnitPrice times Quantity.
	TotalPrice float32 `json:"totalPrice"`
	// The total gross price for this Position.
	TotalPriceGross float32 `json:"totalPriceGross"`
	// Total gross price after applied deductions.
	TotalPriceGrossDeducted float32 `json:"totalPriceGrossDeducted"`
	// Net price after applied deductions. Please be aware that this is the total price, from TotalPrice, not the unit price of the position.
	DeductedPrice float32         `json:"deductedPrice"`
	PositionType  PositionTypeDto `json:"positionType"`
	PriceType     PriceTypeDto    `json:"priceType"`
	ServiceType   ServiceTypeDto  `json:"serviceType"`
	ProductData   *ProductDataDto `json:"productData,omitempty"`
	// Short description for this DescriptionBase element.
	ShortText *string `json:"shortText,omitempty"`
	// Detailed description for this DescriptionBase element. When the HtmlLongText is set, this is automatically overwritten and filled with the appropriate plain text representation of the Html text. Vice versa, setting this property overrides the HtmlLongText.
	LongText *string `json:"longText,omitempty"`
	// This contains the Html representation of the Longtext. When the LongText is set, this is automatically overwritten and filled with the appropriate Html representation of the plaintext. Vice versa, setting this property overrides the LongText. GAEB 90 and GAEB 2000 exports do not support any image functionality. In GAEB XML, only images that use an embedded Base64 data uri are exported, regular url references are cleared before written out.
	HtmlLongText *string         `json:"htmlLongText,omitempty"`
	AdditionType AdditionTypeDto `json:"additionType"`
	ElementType  *string         `json:"elementType,omitempty"`
	// Quantity assignments are, in contrast to SubDescriptions, used to categorize parts of this Position. For example, it could be categorized by cost group - e.g. a Position describing concrete walls could follow the German DIN 276 Cost Groups Standard and specify that of the total 1.000m² wall, 500m² are classified as exterior walls and 500m² are classified as interior walls. They would then have different cost groups associated, e.g. for accounting purposes.
	QuantityAssignments []QuantityAssignmentDto `json:"quantityAssignments,omitempty"`
	CommerceProperties  *CommercePropertiesDto  `json:"commerceProperties,omitempty"`
	// If this position is an Alternative, then this property should point to the id of the position in this service specification that it can replace. If this is set to a value, you can optionally also specify an identifier via AlternativeIdentifier to specifiy multiple positions that must be used together to be an alternative to a single base position.
	AlternativeTo *string `json:"alternativeTo,omitempty"`
	// This is an optional property that can be used together with AlternativeTo. If this is set, you can indicate which alternative group a specific position is assigned to. That way, if you specifiy multiple alternative Positions with the same AlternativeIdentifier, you can indicate that to replace a single base Position, multiple alternative Positions should be used. This property is not checked or managed automatically, so it is possible for this property to become invalid, by for example setting this property but not setting a base position via AlternativeTo.
	AlternativeIdentifier *int32 `json:"alternativeIdentifier,omitempty"`
	// This is an optional property that can be used together with AlternativeTo and AlternativeGroupIdentifier. If this is set, you can indicate which alternative group a specific position is assigned to. That way, you can specify the id (in integer format) for the alternative group this position belongs to. It's different to AlternativeIdentifier in that the other property describes the id of the group, while this property here describes the group itself. If a position only has set AlternativeGroupIdentifier but not AlternativeIdentifier, then it likely is a base position for a specific group. This was introduced in version v2.9.0 to be able to model both position and group ids for alternative group combinations. This property is not checked or managed automatically, so it is possible for this property to become invalid, by for example setting this property but not setting a base position via AlternativeTo.
	AlternativeGroupIdentifier *int32 `json:"alternativeGroupIdentifier,omitempty"`
	// If this is true, it indicates that the position is intended to be a lump sum, \"Pauschal\" in German. This means the position total price that is being invoiced should not depend on the actual quantity. In practice, partial invoices are still often used for partial services rendered. This property does not affect the price calculation for this position. Typically, the Quantity should be set to 1.0 when this flag is used.
	IsLumpSum bool `json:"isLumpSum"`
	// This identifier can be used to point to the Id of a position in the same ServiceSpecification that acts as a base position. It matches \"Bezugsposition\" in GAEB. This can be used for positions that repeat partially or are linked together
	RepetitionTo            *string                     `json:"repetitionTo,omitempty"`
	StandardizedDescription *StandardizedDescriptionDto `json:"standardizedDescription,omitempty"`
	// This list contains references to positions that complement this one, additionally also specifying a quantity for which the addition is intended. This does not replace the ComplementedBy property and there are no automatic checks being done between these two properties, so it's up to the user code to ensure deletions (and additions, if desired) are performed for both properties. When copying withing keeping Ids, this list will not be part of the copy process, since it would only contain quantities without actual position references. Containers, however, will rebuild the list with updated position references when copying positions that contain entries here.
	ComplementedByQuantities []ComplementedByQuantityDto `json:"complementedByQuantities,omitempty"`
	// This identifier can be used to point to the Id of an ExecutionDescription in the same ServiceSpecification. ExecutionDescriptions act as a way to centrally describe how positions should be executed in practice. Often, the position itself still has text of its own to highlight deviations from that or add more details.
	ExecutionDescriptionReference *string `json:"executionDescriptionReference,omitempty"`
	// This indicates if a position has not been offered. This is typically only expected to be true when the exchange phase of the parent ServiceSpecification is Offer, and it means that the position has not been offered at all.
	NotOffered               bool                         `json:"notOffered"`
	OenormPositionProperties *OenormPositionPropertiesDto `json:"oenormPositionProperties,omitempty"`
	// This is an identifier specific for this description. Some exchange formats, like GAEB XML, use it to identify descriptions. It's different to an elements identifier in that it should only apply to the description component, meaning the text itself.
	DescriptionId *string `json:"descriptionId,omitempty"`
	// This is a zero based hierarchy level. It's set automatically when used in the context of a Project, and can be used to identify the hierarchy level of the current element.
	HierarchyLevel                 int32                         `json:"hierarchyLevel"`
	AddendumStatus                 *AddendumStatusDto            `json:"addendumStatus,omitempty"`
	HasBidderCommentInHtmlLongText bool                          `json:"hasBidderCommentInHtmlLongText"`
	GaebComplementingType          PositionComplementingTypeDto  `json:"gaebComplementingType"`
	HoldOutProperties              *PositionHoldOutPropertiesDto `json:"holdOutProperties,omitempty"`
	// This is an informational property, which directly holds a numerical value for an estimated quantity. It is not used for any price calculations.
	EstimatedQuantity  *float32               `json:"estimatedQuantity,omitempty"`
	PriceCatalogueData *PriceCatalogueDataDto `json:"priceCatalogueData,omitempty"`
	// If this is set to true, the ProjectCatalogues property will not be propagated to child elements. This is useful in mapping scenarios, where you want to disable propagation for multiple changes, and only enable it once you have mapped all properties.
	IgnoreProjectCataloguePropagation bool `json:"ignoreProjectCataloguePropagation"`
}

// NewPositionDto instantiates a new PositionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPositionDto(unitPrice float32, quantity float32, isComplementingPosition bool, comissionStatus ComissionStatusDto, complemented bool, amountToBeEnteredByBidder bool, priceCompositionRequired bool, useDifferentTaxRate bool, taxRate float32, deductionFactor float32, totalPrice float32, totalPriceGross float32, totalPriceGrossDeducted float32, deductedPrice float32, positionType PositionTypeDto, priceType PriceTypeDto, serviceType ServiceTypeDto, additionType AdditionTypeDto, isLumpSum bool, notOffered bool, hierarchyLevel int32, hasBidderCommentInHtmlLongText bool, gaebComplementingType PositionComplementingTypeDto, ignoreProjectCataloguePropagation bool, id string, elementTypeDiscriminator string) *PositionDto {
	this := PositionDto{}
	this.Id = id
	this.ElementTypeDiscriminator = elementTypeDiscriminator
	this.UnitPrice = unitPrice
	this.Quantity = quantity
	this.IsComplementingPosition = isComplementingPosition
	this.ComissionStatus = comissionStatus
	this.Complemented = complemented
	this.AmountToBeEnteredByBidder = amountToBeEnteredByBidder
	this.PriceCompositionRequired = priceCompositionRequired
	this.UseDifferentTaxRate = useDifferentTaxRate
	this.TaxRate = taxRate
	this.DeductionFactor = deductionFactor
	this.TotalPrice = totalPrice
	this.TotalPriceGross = totalPriceGross
	this.TotalPriceGrossDeducted = totalPriceGrossDeducted
	this.DeductedPrice = deductedPrice
	this.PositionType = positionType
	this.PriceType = priceType
	this.ServiceType = serviceType
	this.AdditionType = additionType
	this.IsLumpSum = isLumpSum
	this.NotOffered = notOffered
	this.HierarchyLevel = hierarchyLevel
	this.HasBidderCommentInHtmlLongText = hasBidderCommentInHtmlLongText
	this.GaebComplementingType = gaebComplementingType
	this.IgnoreProjectCataloguePropagation = ignoreProjectCataloguePropagation
	return &this
}

// NewPositionDtoWithDefaults instantiates a new PositionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPositionDtoWithDefaults() *PositionDto {
	this := PositionDto{}
	return &this
}

// GetUnitPrice returns the UnitPrice field value
func (o *PositionDto) GetUnitPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.UnitPrice
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetUnitPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnitPrice, true
}

// SetUnitPrice sets field value
func (o *PositionDto) SetUnitPrice(v float32) {
	o.UnitPrice = v
}

// GetUnitPriceOverride returns the UnitPriceOverride field value if set, zero value otherwise.
func (o *PositionDto) GetUnitPriceOverride() float32 {
	if o == nil || IsNil(o.UnitPriceOverride) {
		var ret float32
		return ret
	}
	return *o.UnitPriceOverride
}

// GetUnitPriceOverrideOk returns a tuple with the UnitPriceOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetUnitPriceOverrideOk() (*float32, bool) {
	if o == nil || IsNil(o.UnitPriceOverride) {
		return nil, false
	}
	return o.UnitPriceOverride, true
}

// HasUnitPriceOverride returns a boolean if a field has been set.
func (o *PositionDto) HasUnitPriceOverride() bool {
	if o != nil && !IsNil(o.UnitPriceOverride) {
		return true
	}

	return false
}

// SetUnitPriceOverride gets a reference to the given float32 and assigns it to the UnitPriceOverride field.
func (o *PositionDto) SetUnitPriceOverride(v float32) {
	o.UnitPriceOverride = &v
}

// GetQuantity returns the Quantity field value
func (o *PositionDto) GetQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *PositionDto) SetQuantity(v float32) {
	o.Quantity = v
}

// GetQuantityOverride returns the QuantityOverride field value if set, zero value otherwise.
func (o *PositionDto) GetQuantityOverride() float32 {
	if o == nil || IsNil(o.QuantityOverride) {
		var ret float32
		return ret
	}
	return *o.QuantityOverride
}

// GetQuantityOverrideOk returns a tuple with the QuantityOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetQuantityOverrideOk() (*float32, bool) {
	if o == nil || IsNil(o.QuantityOverride) {
		return nil, false
	}
	return o.QuantityOverride, true
}

// HasQuantityOverride returns a boolean if a field has been set.
func (o *PositionDto) HasQuantityOverride() bool {
	if o != nil && !IsNil(o.QuantityOverride) {
		return true
	}

	return false
}

// SetQuantityOverride gets a reference to the given float32 and assigns it to the QuantityOverride field.
func (o *PositionDto) SetQuantityOverride(v float32) {
	o.QuantityOverride = &v
}

// GetIsComplementingPosition returns the IsComplementingPosition field value
func (o *PositionDto) GetIsComplementingPosition() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsComplementingPosition
}

// GetIsComplementingPositionOk returns a tuple with the IsComplementingPosition field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetIsComplementingPositionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsComplementingPosition, true
}

// SetIsComplementingPosition sets field value
func (o *PositionDto) SetIsComplementingPosition(v bool) {
	o.IsComplementingPosition = v
}

// GetComplementsPositions returns the ComplementsPositions field value if set, zero value otherwise.
func (o *PositionDto) GetComplementsPositions() []string {
	if o == nil || IsNil(o.ComplementsPositions) {
		var ret []string
		return ret
	}
	return o.ComplementsPositions
}

// GetComplementsPositionsOk returns a tuple with the ComplementsPositions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetComplementsPositionsOk() ([]string, bool) {
	if o == nil || IsNil(o.ComplementsPositions) {
		return nil, false
	}
	return o.ComplementsPositions, true
}

// HasComplementsPositions returns a boolean if a field has been set.
func (o *PositionDto) HasComplementsPositions() bool {
	if o != nil && !IsNil(o.ComplementsPositions) {
		return true
	}

	return false
}

// SetComplementsPositions gets a reference to the given []string and assigns it to the ComplementsPositions field.
func (o *PositionDto) SetComplementsPositions(v []string) {
	o.ComplementsPositions = v
}

// GetComplementingPricePercentageOverride returns the ComplementingPricePercentageOverride field value if set, zero value otherwise.
func (o *PositionDto) GetComplementingPricePercentageOverride() float32 {
	if o == nil || IsNil(o.ComplementingPricePercentageOverride) {
		var ret float32
		return ret
	}
	return *o.ComplementingPricePercentageOverride
}

// GetComplementingPricePercentageOverrideOk returns a tuple with the ComplementingPricePercentageOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetComplementingPricePercentageOverrideOk() (*float32, bool) {
	if o == nil || IsNil(o.ComplementingPricePercentageOverride) {
		return nil, false
	}
	return o.ComplementingPricePercentageOverride, true
}

// HasComplementingPricePercentageOverride returns a boolean if a field has been set.
func (o *PositionDto) HasComplementingPricePercentageOverride() bool {
	if o != nil && !IsNil(o.ComplementingPricePercentageOverride) {
		return true
	}

	return false
}

// SetComplementingPricePercentageOverride gets a reference to the given float32 and assigns it to the ComplementingPricePercentageOverride field.
func (o *PositionDto) SetComplementingPricePercentageOverride(v float32) {
	o.ComplementingPricePercentageOverride = &v
}

// GetComplementingPricePercentage returns the ComplementingPricePercentage field value if set, zero value otherwise.
func (o *PositionDto) GetComplementingPricePercentage() float32 {
	if o == nil || IsNil(o.ComplementingPricePercentage) {
		var ret float32
		return ret
	}
	return *o.ComplementingPricePercentage
}

// GetComplementingPricePercentageOk returns a tuple with the ComplementingPricePercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetComplementingPricePercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.ComplementingPricePercentage) {
		return nil, false
	}
	return o.ComplementingPricePercentage, true
}

// HasComplementingPricePercentage returns a boolean if a field has been set.
func (o *PositionDto) HasComplementingPricePercentage() bool {
	if o != nil && !IsNil(o.ComplementingPricePercentage) {
		return true
	}

	return false
}

// SetComplementingPricePercentage gets a reference to the given float32 and assigns it to the ComplementingPricePercentage field.
func (o *PositionDto) SetComplementingPricePercentage(v float32) {
	o.ComplementingPricePercentage = &v
}

// GetUnitTag returns the UnitTag field value if set, zero value otherwise.
func (o *PositionDto) GetUnitTag() string {
	if o == nil || IsNil(o.UnitTag) {
		var ret string
		return ret
	}
	return *o.UnitTag
}

// GetUnitTagOk returns a tuple with the UnitTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetUnitTagOk() (*string, bool) {
	if o == nil || IsNil(o.UnitTag) {
		return nil, false
	}
	return o.UnitTag, true
}

// HasUnitTag returns a boolean if a field has been set.
func (o *PositionDto) HasUnitTag() bool {
	if o != nil && !IsNil(o.UnitTag) {
		return true
	}

	return false
}

// SetUnitTag gets a reference to the given string and assigns it to the UnitTag field.
func (o *PositionDto) SetUnitTag(v string) {
	o.UnitTag = &v
}

// GetLabourComponents returns the LabourComponents field value if set, zero value otherwise.
func (o *PositionDto) GetLabourComponents() LabourPriceComponentDto {
	if o == nil || IsNil(o.LabourComponents) {
		var ret LabourPriceComponentDto
		return ret
	}
	return *o.LabourComponents
}

// GetLabourComponentsOk returns a tuple with the LabourComponents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetLabourComponentsOk() (*LabourPriceComponentDto, bool) {
	if o == nil || IsNil(o.LabourComponents) {
		return nil, false
	}
	return o.LabourComponents, true
}

// HasLabourComponents returns a boolean if a field has been set.
func (o *PositionDto) HasLabourComponents() bool {
	if o != nil && !IsNil(o.LabourComponents) {
		return true
	}

	return false
}

// SetLabourComponents gets a reference to the given LabourPriceComponentDto and assigns it to the LabourComponents field.
func (o *PositionDto) SetLabourComponents(v LabourPriceComponentDto) {
	o.LabourComponents = &v
}

// GetPriceComponents returns the PriceComponents field value if set, zero value otherwise.
func (o *PositionDto) GetPriceComponents() []PriceComponentDto {
	if o == nil || IsNil(o.PriceComponents) {
		var ret []PriceComponentDto
		return ret
	}
	return o.PriceComponents
}

// GetPriceComponentsOk returns a tuple with the PriceComponents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetPriceComponentsOk() ([]PriceComponentDto, bool) {
	if o == nil || IsNil(o.PriceComponents) {
		return nil, false
	}
	return o.PriceComponents, true
}

// HasPriceComponents returns a boolean if a field has been set.
func (o *PositionDto) HasPriceComponents() bool {
	if o != nil && !IsNil(o.PriceComponents) {
		return true
	}

	return false
}

// SetPriceComponents gets a reference to the given []PriceComponentDto and assigns it to the PriceComponents field.
func (o *PositionDto) SetPriceComponents(v []PriceComponentDto) {
	o.PriceComponents = v
}

// GetQuantityComponents returns the QuantityComponents field value if set, zero value otherwise.
func (o *PositionDto) GetQuantityComponents() []CalculationDto {
	if o == nil || IsNil(o.QuantityComponents) {
		var ret []CalculationDto
		return ret
	}
	return o.QuantityComponents
}

// GetQuantityComponentsOk returns a tuple with the QuantityComponents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetQuantityComponentsOk() ([]CalculationDto, bool) {
	if o == nil || IsNil(o.QuantityComponents) {
		return nil, false
	}
	return o.QuantityComponents, true
}

// HasQuantityComponents returns a boolean if a field has been set.
func (o *PositionDto) HasQuantityComponents() bool {
	if o != nil && !IsNil(o.QuantityComponents) {
		return true
	}

	return false
}

// SetQuantityComponents gets a reference to the given []CalculationDto and assigns it to the QuantityComponents field.
func (o *PositionDto) SetQuantityComponents(v []CalculationDto) {
	o.QuantityComponents = v
}

// GetSubDescriptions returns the SubDescriptions field value if set, zero value otherwise.
func (o *PositionDto) GetSubDescriptions() []SubDescriptionDto {
	if o == nil || IsNil(o.SubDescriptions) {
		var ret []SubDescriptionDto
		return ret
	}
	return o.SubDescriptions
}

// GetSubDescriptionsOk returns a tuple with the SubDescriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetSubDescriptionsOk() ([]SubDescriptionDto, bool) {
	if o == nil || IsNil(o.SubDescriptions) {
		return nil, false
	}
	return o.SubDescriptions, true
}

// HasSubDescriptions returns a boolean if a field has been set.
func (o *PositionDto) HasSubDescriptions() bool {
	if o != nil && !IsNil(o.SubDescriptions) {
		return true
	}

	return false
}

// SetSubDescriptions gets a reference to the given []SubDescriptionDto and assigns it to the SubDescriptions field.
func (o *PositionDto) SetSubDescriptions(v []SubDescriptionDto) {
	o.SubDescriptions = v
}

// GetComissionStatus returns the ComissionStatus field value
func (o *PositionDto) GetComissionStatus() ComissionStatusDto {
	if o == nil {
		var ret ComissionStatusDto
		return ret
	}

	return o.ComissionStatus
}

// GetComissionStatusOk returns a tuple with the ComissionStatus field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetComissionStatusOk() (*ComissionStatusDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComissionStatus, true
}

// SetComissionStatus sets field value
func (o *PositionDto) SetComissionStatus(v ComissionStatusDto) {
	o.ComissionStatus = v
}

// GetComplementedBy returns the ComplementedBy field value if set, zero value otherwise.
func (o *PositionDto) GetComplementedBy() []string {
	if o == nil || IsNil(o.ComplementedBy) {
		var ret []string
		return ret
	}
	return o.ComplementedBy
}

// GetComplementedByOk returns a tuple with the ComplementedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetComplementedByOk() ([]string, bool) {
	if o == nil || IsNil(o.ComplementedBy) {
		return nil, false
	}
	return o.ComplementedBy, true
}

// HasComplementedBy returns a boolean if a field has been set.
func (o *PositionDto) HasComplementedBy() bool {
	if o != nil && !IsNil(o.ComplementedBy) {
		return true
	}

	return false
}

// SetComplementedBy gets a reference to the given []string and assigns it to the ComplementedBy field.
func (o *PositionDto) SetComplementedBy(v []string) {
	o.ComplementedBy = v
}

// GetComplemented returns the Complemented field value
func (o *PositionDto) GetComplemented() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Complemented
}

// GetComplementedOk returns a tuple with the Complemented field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetComplementedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Complemented, true
}

// SetComplemented sets field value
func (o *PositionDto) SetComplemented(v bool) {
	o.Complemented = v
}

// GetAmountToBeEnteredByBidder returns the AmountToBeEnteredByBidder field value
func (o *PositionDto) GetAmountToBeEnteredByBidder() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AmountToBeEnteredByBidder
}

// GetAmountToBeEnteredByBidderOk returns a tuple with the AmountToBeEnteredByBidder field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetAmountToBeEnteredByBidderOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountToBeEnteredByBidder, true
}

// SetAmountToBeEnteredByBidder sets field value
func (o *PositionDto) SetAmountToBeEnteredByBidder(v bool) {
	o.AmountToBeEnteredByBidder = v
}

// GetPriceCompositionRequired returns the PriceCompositionRequired field value
func (o *PositionDto) GetPriceCompositionRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PriceCompositionRequired
}

// GetPriceCompositionRequiredOk returns a tuple with the PriceCompositionRequired field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetPriceCompositionRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceCompositionRequired, true
}

// SetPriceCompositionRequired sets field value
func (o *PositionDto) SetPriceCompositionRequired(v bool) {
	o.PriceCompositionRequired = v
}

// GetUseDifferentTaxRate returns the UseDifferentTaxRate field value
func (o *PositionDto) GetUseDifferentTaxRate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseDifferentTaxRate
}

// GetUseDifferentTaxRateOk returns a tuple with the UseDifferentTaxRate field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetUseDifferentTaxRateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseDifferentTaxRate, true
}

// SetUseDifferentTaxRate sets field value
func (o *PositionDto) SetUseDifferentTaxRate(v bool) {
	o.UseDifferentTaxRate = v
}

// GetTaxRate returns the TaxRate field value
func (o *PositionDto) GetTaxRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TaxRate
}

// GetTaxRateOk returns a tuple with the TaxRate field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetTaxRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxRate, true
}

// SetTaxRate sets field value
func (o *PositionDto) SetTaxRate(v float32) {
	o.TaxRate = v
}

// GetItemNumber returns the ItemNumber field value if set, zero value otherwise.
func (o *PositionDto) GetItemNumber() ItemNumberDto {
	if o == nil || IsNil(o.ItemNumber) {
		var ret ItemNumberDto
		return ret
	}
	return *o.ItemNumber
}

// GetItemNumberOk returns a tuple with the ItemNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetItemNumberOk() (*ItemNumberDto, bool) {
	if o == nil || IsNil(o.ItemNumber) {
		return nil, false
	}
	return o.ItemNumber, true
}

// HasItemNumber returns a boolean if a field has been set.
func (o *PositionDto) HasItemNumber() bool {
	if o != nil && !IsNil(o.ItemNumber) {
		return true
	}

	return false
}

// SetItemNumber gets a reference to the given ItemNumberDto and assigns it to the ItemNumber field.
func (o *PositionDto) SetItemNumber(v ItemNumberDto) {
	o.ItemNumber = &v
}

// GetDeductionFactor returns the DeductionFactor field value
func (o *PositionDto) GetDeductionFactor() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DeductionFactor
}

// GetDeductionFactorOk returns a tuple with the DeductionFactor field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetDeductionFactorOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeductionFactor, true
}

// SetDeductionFactor sets field value
func (o *PositionDto) SetDeductionFactor(v float32) {
	o.DeductionFactor = v
}

// GetTotalPrice returns the TotalPrice field value
func (o *PositionDto) GetTotalPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalPrice
}

// GetTotalPriceOk returns a tuple with the TotalPrice field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetTotalPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalPrice, true
}

// SetTotalPrice sets field value
func (o *PositionDto) SetTotalPrice(v float32) {
	o.TotalPrice = v
}

// GetTotalPriceGross returns the TotalPriceGross field value
func (o *PositionDto) GetTotalPriceGross() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalPriceGross
}

// GetTotalPriceGrossOk returns a tuple with the TotalPriceGross field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetTotalPriceGrossOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalPriceGross, true
}

// SetTotalPriceGross sets field value
func (o *PositionDto) SetTotalPriceGross(v float32) {
	o.TotalPriceGross = v
}

// GetTotalPriceGrossDeducted returns the TotalPriceGrossDeducted field value
func (o *PositionDto) GetTotalPriceGrossDeducted() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalPriceGrossDeducted
}

// GetTotalPriceGrossDeductedOk returns a tuple with the TotalPriceGrossDeducted field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetTotalPriceGrossDeductedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalPriceGrossDeducted, true
}

// SetTotalPriceGrossDeducted sets field value
func (o *PositionDto) SetTotalPriceGrossDeducted(v float32) {
	o.TotalPriceGrossDeducted = v
}

// GetDeductedPrice returns the DeductedPrice field value
func (o *PositionDto) GetDeductedPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DeductedPrice
}

// GetDeductedPriceOk returns a tuple with the DeductedPrice field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetDeductedPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeductedPrice, true
}

// SetDeductedPrice sets field value
func (o *PositionDto) SetDeductedPrice(v float32) {
	o.DeductedPrice = v
}

// GetPositionType returns the PositionType field value
func (o *PositionDto) GetPositionType() PositionTypeDto {
	if o == nil {
		var ret PositionTypeDto
		return ret
	}

	return o.PositionType
}

// GetPositionTypeOk returns a tuple with the PositionType field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetPositionTypeOk() (*PositionTypeDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PositionType, true
}

// SetPositionType sets field value
func (o *PositionDto) SetPositionType(v PositionTypeDto) {
	o.PositionType = v
}

// GetPriceType returns the PriceType field value
func (o *PositionDto) GetPriceType() PriceTypeDto {
	if o == nil {
		var ret PriceTypeDto
		return ret
	}

	return o.PriceType
}

// GetPriceTypeOk returns a tuple with the PriceType field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetPriceTypeOk() (*PriceTypeDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceType, true
}

// SetPriceType sets field value
func (o *PositionDto) SetPriceType(v PriceTypeDto) {
	o.PriceType = v
}

// GetServiceType returns the ServiceType field value
func (o *PositionDto) GetServiceType() ServiceTypeDto {
	if o == nil {
		var ret ServiceTypeDto
		return ret
	}

	return o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetServiceTypeOk() (*ServiceTypeDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceType, true
}

// SetServiceType sets field value
func (o *PositionDto) SetServiceType(v ServiceTypeDto) {
	o.ServiceType = v
}

// GetProductData returns the ProductData field value if set, zero value otherwise.
func (o *PositionDto) GetProductData() ProductDataDto {
	if o == nil || IsNil(o.ProductData) {
		var ret ProductDataDto
		return ret
	}
	return *o.ProductData
}

// GetProductDataOk returns a tuple with the ProductData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetProductDataOk() (*ProductDataDto, bool) {
	if o == nil || IsNil(o.ProductData) {
		return nil, false
	}
	return o.ProductData, true
}

// HasProductData returns a boolean if a field has been set.
func (o *PositionDto) HasProductData() bool {
	if o != nil && !IsNil(o.ProductData) {
		return true
	}

	return false
}

// SetProductData gets a reference to the given ProductDataDto and assigns it to the ProductData field.
func (o *PositionDto) SetProductData(v ProductDataDto) {
	o.ProductData = &v
}

// GetShortText returns the ShortText field value if set, zero value otherwise.
func (o *PositionDto) GetShortText() string {
	if o == nil || IsNil(o.ShortText) {
		var ret string
		return ret
	}
	return *o.ShortText
}

// GetShortTextOk returns a tuple with the ShortText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetShortTextOk() (*string, bool) {
	if o == nil || IsNil(o.ShortText) {
		return nil, false
	}
	return o.ShortText, true
}

// HasShortText returns a boolean if a field has been set.
func (o *PositionDto) HasShortText() bool {
	if o != nil && !IsNil(o.ShortText) {
		return true
	}

	return false
}

// SetShortText gets a reference to the given string and assigns it to the ShortText field.
func (o *PositionDto) SetShortText(v string) {
	o.ShortText = &v
}

// GetLongText returns the LongText field value if set, zero value otherwise.
func (o *PositionDto) GetLongText() string {
	if o == nil || IsNil(o.LongText) {
		var ret string
		return ret
	}
	return *o.LongText
}

// GetLongTextOk returns a tuple with the LongText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetLongTextOk() (*string, bool) {
	if o == nil || IsNil(o.LongText) {
		return nil, false
	}
	return o.LongText, true
}

// HasLongText returns a boolean if a field has been set.
func (o *PositionDto) HasLongText() bool {
	if o != nil && !IsNil(o.LongText) {
		return true
	}

	return false
}

// SetLongText gets a reference to the given string and assigns it to the LongText field.
func (o *PositionDto) SetLongText(v string) {
	o.LongText = &v
}

// GetHtmlLongText returns the HtmlLongText field value if set, zero value otherwise.
func (o *PositionDto) GetHtmlLongText() string {
	if o == nil || IsNil(o.HtmlLongText) {
		var ret string
		return ret
	}
	return *o.HtmlLongText
}

// GetHtmlLongTextOk returns a tuple with the HtmlLongText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetHtmlLongTextOk() (*string, bool) {
	if o == nil || IsNil(o.HtmlLongText) {
		return nil, false
	}
	return o.HtmlLongText, true
}

// HasHtmlLongText returns a boolean if a field has been set.
func (o *PositionDto) HasHtmlLongText() bool {
	if o != nil && !IsNil(o.HtmlLongText) {
		return true
	}

	return false
}

// SetHtmlLongText gets a reference to the given string and assigns it to the HtmlLongText field.
func (o *PositionDto) SetHtmlLongText(v string) {
	o.HtmlLongText = &v
}

// GetAdditionType returns the AdditionType field value
func (o *PositionDto) GetAdditionType() AdditionTypeDto {
	if o == nil {
		var ret AdditionTypeDto
		return ret
	}

	return o.AdditionType
}

// GetAdditionTypeOk returns a tuple with the AdditionType field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetAdditionTypeOk() (*AdditionTypeDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdditionType, true
}

// SetAdditionType sets field value
func (o *PositionDto) SetAdditionType(v AdditionTypeDto) {
	o.AdditionType = v
}

// GetElementType returns the ElementType field value if set, zero value otherwise.
func (o *PositionDto) GetElementType() string {
	if o == nil || IsNil(o.ElementType) {
		var ret string
		return ret
	}
	return *o.ElementType
}

// GetElementTypeOk returns a tuple with the ElementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetElementTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ElementType) {
		return nil, false
	}
	return o.ElementType, true
}

// HasElementType returns a boolean if a field has been set.
func (o *PositionDto) HasElementType() bool {
	if o != nil && !IsNil(o.ElementType) {
		return true
	}

	return false
}

// SetElementType gets a reference to the given string and assigns it to the ElementType field.
func (o *PositionDto) SetElementType(v string) {
	o.ElementType = &v
}

// GetQuantityAssignments returns the QuantityAssignments field value if set, zero value otherwise.
func (o *PositionDto) GetQuantityAssignments() []QuantityAssignmentDto {
	if o == nil || IsNil(o.QuantityAssignments) {
		var ret []QuantityAssignmentDto
		return ret
	}
	return o.QuantityAssignments
}

// GetQuantityAssignmentsOk returns a tuple with the QuantityAssignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetQuantityAssignmentsOk() ([]QuantityAssignmentDto, bool) {
	if o == nil || IsNil(o.QuantityAssignments) {
		return nil, false
	}
	return o.QuantityAssignments, true
}

// HasQuantityAssignments returns a boolean if a field has been set.
func (o *PositionDto) HasQuantityAssignments() bool {
	if o != nil && !IsNil(o.QuantityAssignments) {
		return true
	}

	return false
}

// SetQuantityAssignments gets a reference to the given []QuantityAssignmentDto and assigns it to the QuantityAssignments field.
func (o *PositionDto) SetQuantityAssignments(v []QuantityAssignmentDto) {
	o.QuantityAssignments = v
}

// GetCommerceProperties returns the CommerceProperties field value if set, zero value otherwise.
func (o *PositionDto) GetCommerceProperties() CommercePropertiesDto {
	if o == nil || IsNil(o.CommerceProperties) {
		var ret CommercePropertiesDto
		return ret
	}
	return *o.CommerceProperties
}

// GetCommercePropertiesOk returns a tuple with the CommerceProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetCommercePropertiesOk() (*CommercePropertiesDto, bool) {
	if o == nil || IsNil(o.CommerceProperties) {
		return nil, false
	}
	return o.CommerceProperties, true
}

// HasCommerceProperties returns a boolean if a field has been set.
func (o *PositionDto) HasCommerceProperties() bool {
	if o != nil && !IsNil(o.CommerceProperties) {
		return true
	}

	return false
}

// SetCommerceProperties gets a reference to the given CommercePropertiesDto and assigns it to the CommerceProperties field.
func (o *PositionDto) SetCommerceProperties(v CommercePropertiesDto) {
	o.CommerceProperties = &v
}

// GetAlternativeTo returns the AlternativeTo field value if set, zero value otherwise.
func (o *PositionDto) GetAlternativeTo() string {
	if o == nil || IsNil(o.AlternativeTo) {
		var ret string
		return ret
	}
	return *o.AlternativeTo
}

// GetAlternativeToOk returns a tuple with the AlternativeTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetAlternativeToOk() (*string, bool) {
	if o == nil || IsNil(o.AlternativeTo) {
		return nil, false
	}
	return o.AlternativeTo, true
}

// HasAlternativeTo returns a boolean if a field has been set.
func (o *PositionDto) HasAlternativeTo() bool {
	if o != nil && !IsNil(o.AlternativeTo) {
		return true
	}

	return false
}

// SetAlternativeTo gets a reference to the given string and assigns it to the AlternativeTo field.
func (o *PositionDto) SetAlternativeTo(v string) {
	o.AlternativeTo = &v
}

// GetAlternativeIdentifier returns the AlternativeIdentifier field value if set, zero value otherwise.
func (o *PositionDto) GetAlternativeIdentifier() int32 {
	if o == nil || IsNil(o.AlternativeIdentifier) {
		var ret int32
		return ret
	}
	return *o.AlternativeIdentifier
}

// GetAlternativeIdentifierOk returns a tuple with the AlternativeIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetAlternativeIdentifierOk() (*int32, bool) {
	if o == nil || IsNil(o.AlternativeIdentifier) {
		return nil, false
	}
	return o.AlternativeIdentifier, true
}

// HasAlternativeIdentifier returns a boolean if a field has been set.
func (o *PositionDto) HasAlternativeIdentifier() bool {
	if o != nil && !IsNil(o.AlternativeIdentifier) {
		return true
	}

	return false
}

// SetAlternativeIdentifier gets a reference to the given int32 and assigns it to the AlternativeIdentifier field.
func (o *PositionDto) SetAlternativeIdentifier(v int32) {
	o.AlternativeIdentifier = &v
}

// GetAlternativeGroupIdentifier returns the AlternativeGroupIdentifier field value if set, zero value otherwise.
func (o *PositionDto) GetAlternativeGroupIdentifier() int32 {
	if o == nil || IsNil(o.AlternativeGroupIdentifier) {
		var ret int32
		return ret
	}
	return *o.AlternativeGroupIdentifier
}

// GetAlternativeGroupIdentifierOk returns a tuple with the AlternativeGroupIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetAlternativeGroupIdentifierOk() (*int32, bool) {
	if o == nil || IsNil(o.AlternativeGroupIdentifier) {
		return nil, false
	}
	return o.AlternativeGroupIdentifier, true
}

// HasAlternativeGroupIdentifier returns a boolean if a field has been set.
func (o *PositionDto) HasAlternativeGroupIdentifier() bool {
	if o != nil && !IsNil(o.AlternativeGroupIdentifier) {
		return true
	}

	return false
}

// SetAlternativeGroupIdentifier gets a reference to the given int32 and assigns it to the AlternativeGroupIdentifier field.
func (o *PositionDto) SetAlternativeGroupIdentifier(v int32) {
	o.AlternativeGroupIdentifier = &v
}

// GetIsLumpSum returns the IsLumpSum field value
func (o *PositionDto) GetIsLumpSum() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsLumpSum
}

// GetIsLumpSumOk returns a tuple with the IsLumpSum field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetIsLumpSumOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsLumpSum, true
}

// SetIsLumpSum sets field value
func (o *PositionDto) SetIsLumpSum(v bool) {
	o.IsLumpSum = v
}

// GetRepetitionTo returns the RepetitionTo field value if set, zero value otherwise.
func (o *PositionDto) GetRepetitionTo() string {
	if o == nil || IsNil(o.RepetitionTo) {
		var ret string
		return ret
	}
	return *o.RepetitionTo
}

// GetRepetitionToOk returns a tuple with the RepetitionTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetRepetitionToOk() (*string, bool) {
	if o == nil || IsNil(o.RepetitionTo) {
		return nil, false
	}
	return o.RepetitionTo, true
}

// HasRepetitionTo returns a boolean if a field has been set.
func (o *PositionDto) HasRepetitionTo() bool {
	if o != nil && !IsNil(o.RepetitionTo) {
		return true
	}

	return false
}

// SetRepetitionTo gets a reference to the given string and assigns it to the RepetitionTo field.
func (o *PositionDto) SetRepetitionTo(v string) {
	o.RepetitionTo = &v
}

// GetStandardizedDescription returns the StandardizedDescription field value if set, zero value otherwise.
func (o *PositionDto) GetStandardizedDescription() StandardizedDescriptionDto {
	if o == nil || IsNil(o.StandardizedDescription) {
		var ret StandardizedDescriptionDto
		return ret
	}
	return *o.StandardizedDescription
}

// GetStandardizedDescriptionOk returns a tuple with the StandardizedDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetStandardizedDescriptionOk() (*StandardizedDescriptionDto, bool) {
	if o == nil || IsNil(o.StandardizedDescription) {
		return nil, false
	}
	return o.StandardizedDescription, true
}

// HasStandardizedDescription returns a boolean if a field has been set.
func (o *PositionDto) HasStandardizedDescription() bool {
	if o != nil && !IsNil(o.StandardizedDescription) {
		return true
	}

	return false
}

// SetStandardizedDescription gets a reference to the given StandardizedDescriptionDto and assigns it to the StandardizedDescription field.
func (o *PositionDto) SetStandardizedDescription(v StandardizedDescriptionDto) {
	o.StandardizedDescription = &v
}

// GetComplementedByQuantities returns the ComplementedByQuantities field value if set, zero value otherwise.
func (o *PositionDto) GetComplementedByQuantities() []ComplementedByQuantityDto {
	if o == nil || IsNil(o.ComplementedByQuantities) {
		var ret []ComplementedByQuantityDto
		return ret
	}
	return o.ComplementedByQuantities
}

// GetComplementedByQuantitiesOk returns a tuple with the ComplementedByQuantities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetComplementedByQuantitiesOk() ([]ComplementedByQuantityDto, bool) {
	if o == nil || IsNil(o.ComplementedByQuantities) {
		return nil, false
	}
	return o.ComplementedByQuantities, true
}

// HasComplementedByQuantities returns a boolean if a field has been set.
func (o *PositionDto) HasComplementedByQuantities() bool {
	if o != nil && !IsNil(o.ComplementedByQuantities) {
		return true
	}

	return false
}

// SetComplementedByQuantities gets a reference to the given []ComplementedByQuantityDto and assigns it to the ComplementedByQuantities field.
func (o *PositionDto) SetComplementedByQuantities(v []ComplementedByQuantityDto) {
	o.ComplementedByQuantities = v
}

// GetExecutionDescriptionReference returns the ExecutionDescriptionReference field value if set, zero value otherwise.
func (o *PositionDto) GetExecutionDescriptionReference() string {
	if o == nil || IsNil(o.ExecutionDescriptionReference) {
		var ret string
		return ret
	}
	return *o.ExecutionDescriptionReference
}

// GetExecutionDescriptionReferenceOk returns a tuple with the ExecutionDescriptionReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetExecutionDescriptionReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutionDescriptionReference) {
		return nil, false
	}
	return o.ExecutionDescriptionReference, true
}

// HasExecutionDescriptionReference returns a boolean if a field has been set.
func (o *PositionDto) HasExecutionDescriptionReference() bool {
	if o != nil && !IsNil(o.ExecutionDescriptionReference) {
		return true
	}

	return false
}

// SetExecutionDescriptionReference gets a reference to the given string and assigns it to the ExecutionDescriptionReference field.
func (o *PositionDto) SetExecutionDescriptionReference(v string) {
	o.ExecutionDescriptionReference = &v
}

// GetNotOffered returns the NotOffered field value
func (o *PositionDto) GetNotOffered() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.NotOffered
}

// GetNotOfferedOk returns a tuple with the NotOffered field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetNotOfferedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotOffered, true
}

// SetNotOffered sets field value
func (o *PositionDto) SetNotOffered(v bool) {
	o.NotOffered = v
}

// GetOenormPositionProperties returns the OenormPositionProperties field value if set, zero value otherwise.
func (o *PositionDto) GetOenormPositionProperties() OenormPositionPropertiesDto {
	if o == nil || IsNil(o.OenormPositionProperties) {
		var ret OenormPositionPropertiesDto
		return ret
	}
	return *o.OenormPositionProperties
}

// GetOenormPositionPropertiesOk returns a tuple with the OenormPositionProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetOenormPositionPropertiesOk() (*OenormPositionPropertiesDto, bool) {
	if o == nil || IsNil(o.OenormPositionProperties) {
		return nil, false
	}
	return o.OenormPositionProperties, true
}

// HasOenormPositionProperties returns a boolean if a field has been set.
func (o *PositionDto) HasOenormPositionProperties() bool {
	if o != nil && !IsNil(o.OenormPositionProperties) {
		return true
	}

	return false
}

// SetOenormPositionProperties gets a reference to the given OenormPositionPropertiesDto and assigns it to the OenormPositionProperties field.
func (o *PositionDto) SetOenormPositionProperties(v OenormPositionPropertiesDto) {
	o.OenormPositionProperties = &v
}

// GetDescriptionId returns the DescriptionId field value if set, zero value otherwise.
func (o *PositionDto) GetDescriptionId() string {
	if o == nil || IsNil(o.DescriptionId) {
		var ret string
		return ret
	}
	return *o.DescriptionId
}

// GetDescriptionIdOk returns a tuple with the DescriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetDescriptionIdOk() (*string, bool) {
	if o == nil || IsNil(o.DescriptionId) {
		return nil, false
	}
	return o.DescriptionId, true
}

// HasDescriptionId returns a boolean if a field has been set.
func (o *PositionDto) HasDescriptionId() bool {
	if o != nil && !IsNil(o.DescriptionId) {
		return true
	}

	return false
}

// SetDescriptionId gets a reference to the given string and assigns it to the DescriptionId field.
func (o *PositionDto) SetDescriptionId(v string) {
	o.DescriptionId = &v
}

// GetHierarchyLevel returns the HierarchyLevel field value
func (o *PositionDto) GetHierarchyLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HierarchyLevel
}

// GetHierarchyLevelOk returns a tuple with the HierarchyLevel field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetHierarchyLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HierarchyLevel, true
}

// SetHierarchyLevel sets field value
func (o *PositionDto) SetHierarchyLevel(v int32) {
	o.HierarchyLevel = v
}

// GetAddendumStatus returns the AddendumStatus field value if set, zero value otherwise.
func (o *PositionDto) GetAddendumStatus() AddendumStatusDto {
	if o == nil || IsNil(o.AddendumStatus) {
		var ret AddendumStatusDto
		return ret
	}
	return *o.AddendumStatus
}

// GetAddendumStatusOk returns a tuple with the AddendumStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetAddendumStatusOk() (*AddendumStatusDto, bool) {
	if o == nil || IsNil(o.AddendumStatus) {
		return nil, false
	}
	return o.AddendumStatus, true
}

// HasAddendumStatus returns a boolean if a field has been set.
func (o *PositionDto) HasAddendumStatus() bool {
	if o != nil && !IsNil(o.AddendumStatus) {
		return true
	}

	return false
}

// SetAddendumStatus gets a reference to the given AddendumStatusDto and assigns it to the AddendumStatus field.
func (o *PositionDto) SetAddendumStatus(v AddendumStatusDto) {
	o.AddendumStatus = &v
}

// GetHasBidderCommentInHtmlLongText returns the HasBidderCommentInHtmlLongText field value
func (o *PositionDto) GetHasBidderCommentInHtmlLongText() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasBidderCommentInHtmlLongText
}

// GetHasBidderCommentInHtmlLongTextOk returns a tuple with the HasBidderCommentInHtmlLongText field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetHasBidderCommentInHtmlLongTextOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasBidderCommentInHtmlLongText, true
}

// SetHasBidderCommentInHtmlLongText sets field value
func (o *PositionDto) SetHasBidderCommentInHtmlLongText(v bool) {
	o.HasBidderCommentInHtmlLongText = v
}

// GetGaebComplementingType returns the GaebComplementingType field value
func (o *PositionDto) GetGaebComplementingType() PositionComplementingTypeDto {
	if o == nil {
		var ret PositionComplementingTypeDto
		return ret
	}

	return o.GaebComplementingType
}

// GetGaebComplementingTypeOk returns a tuple with the GaebComplementingType field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetGaebComplementingTypeOk() (*PositionComplementingTypeDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GaebComplementingType, true
}

// SetGaebComplementingType sets field value
func (o *PositionDto) SetGaebComplementingType(v PositionComplementingTypeDto) {
	o.GaebComplementingType = v
}

// GetHoldOutProperties returns the HoldOutProperties field value if set, zero value otherwise.
func (o *PositionDto) GetHoldOutProperties() PositionHoldOutPropertiesDto {
	if o == nil || IsNil(o.HoldOutProperties) {
		var ret PositionHoldOutPropertiesDto
		return ret
	}
	return *o.HoldOutProperties
}

// GetHoldOutPropertiesOk returns a tuple with the HoldOutProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetHoldOutPropertiesOk() (*PositionHoldOutPropertiesDto, bool) {
	if o == nil || IsNil(o.HoldOutProperties) {
		return nil, false
	}
	return o.HoldOutProperties, true
}

// HasHoldOutProperties returns a boolean if a field has been set.
func (o *PositionDto) HasHoldOutProperties() bool {
	if o != nil && !IsNil(o.HoldOutProperties) {
		return true
	}

	return false
}

// SetHoldOutProperties gets a reference to the given PositionHoldOutPropertiesDto and assigns it to the HoldOutProperties field.
func (o *PositionDto) SetHoldOutProperties(v PositionHoldOutPropertiesDto) {
	o.HoldOutProperties = &v
}

// GetEstimatedQuantity returns the EstimatedQuantity field value if set, zero value otherwise.
func (o *PositionDto) GetEstimatedQuantity() float32 {
	if o == nil || IsNil(o.EstimatedQuantity) {
		var ret float32
		return ret
	}
	return *o.EstimatedQuantity
}

// GetEstimatedQuantityOk returns a tuple with the EstimatedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetEstimatedQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.EstimatedQuantity) {
		return nil, false
	}
	return o.EstimatedQuantity, true
}

// HasEstimatedQuantity returns a boolean if a field has been set.
func (o *PositionDto) HasEstimatedQuantity() bool {
	if o != nil && !IsNil(o.EstimatedQuantity) {
		return true
	}

	return false
}

// SetEstimatedQuantity gets a reference to the given float32 and assigns it to the EstimatedQuantity field.
func (o *PositionDto) SetEstimatedQuantity(v float32) {
	o.EstimatedQuantity = &v
}

// GetPriceCatalogueData returns the PriceCatalogueData field value if set, zero value otherwise.
func (o *PositionDto) GetPriceCatalogueData() PriceCatalogueDataDto {
	if o == nil || IsNil(o.PriceCatalogueData) {
		var ret PriceCatalogueDataDto
		return ret
	}
	return *o.PriceCatalogueData
}

// GetPriceCatalogueDataOk returns a tuple with the PriceCatalogueData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDto) GetPriceCatalogueDataOk() (*PriceCatalogueDataDto, bool) {
	if o == nil || IsNil(o.PriceCatalogueData) {
		return nil, false
	}
	return o.PriceCatalogueData, true
}

// HasPriceCatalogueData returns a boolean if a field has been set.
func (o *PositionDto) HasPriceCatalogueData() bool {
	if o != nil && !IsNil(o.PriceCatalogueData) {
		return true
	}

	return false
}

// SetPriceCatalogueData gets a reference to the given PriceCatalogueDataDto and assigns it to the PriceCatalogueData field.
func (o *PositionDto) SetPriceCatalogueData(v PriceCatalogueDataDto) {
	o.PriceCatalogueData = &v
}

// GetIgnoreProjectCataloguePropagation returns the IgnoreProjectCataloguePropagation field value
func (o *PositionDto) GetIgnoreProjectCataloguePropagation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IgnoreProjectCataloguePropagation
}

// GetIgnoreProjectCataloguePropagationOk returns a tuple with the IgnoreProjectCataloguePropagation field value
// and a boolean to check if the value has been set.
func (o *PositionDto) GetIgnoreProjectCataloguePropagationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IgnoreProjectCataloguePropagation, true
}

// SetIgnoreProjectCataloguePropagation sets field value
func (o *PositionDto) SetIgnoreProjectCataloguePropagation(v bool) {
	o.IgnoreProjectCataloguePropagation = v
}

func (o PositionDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PositionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedIElementDto, errIElementDto := json.Marshal(o.IElementDto)
	if errIElementDto != nil {
		return map[string]interface{}{}, errIElementDto
	}
	errIElementDto = json.Unmarshal([]byte(serializedIElementDto), &toSerialize)
	if errIElementDto != nil {
		return map[string]interface{}{}, errIElementDto
	}
	// skip: unitPrice is readOnly
	if !IsNil(o.UnitPriceOverride) {
		toSerialize["unitPriceOverride"] = o.UnitPriceOverride
	}
	// skip: quantity is readOnly
	if !IsNil(o.QuantityOverride) {
		toSerialize["quantityOverride"] = o.QuantityOverride
	}
	toSerialize["isComplementingPosition"] = o.IsComplementingPosition
	if !IsNil(o.ComplementsPositions) {
		toSerialize["complementsPositions"] = o.ComplementsPositions
	}
	if !IsNil(o.ComplementingPricePercentageOverride) {
		toSerialize["complementingPricePercentageOverride"] = o.ComplementingPricePercentageOverride
	}
	if !IsNil(o.ComplementingPricePercentage) {
		toSerialize["complementingPricePercentage"] = o.ComplementingPricePercentage
	}
	if !IsNil(o.UnitTag) {
		toSerialize["unitTag"] = o.UnitTag
	}
	if !IsNil(o.LabourComponents) {
		toSerialize["labourComponents"] = o.LabourComponents
	}
	if !IsNil(o.PriceComponents) {
		toSerialize["priceComponents"] = o.PriceComponents
	}
	if !IsNil(o.QuantityComponents) {
		toSerialize["quantityComponents"] = o.QuantityComponents
	}
	if !IsNil(o.SubDescriptions) {
		toSerialize["subDescriptions"] = o.SubDescriptions
	}
	toSerialize["comissionStatus"] = o.ComissionStatus
	if !IsNil(o.ComplementedBy) {
		toSerialize["complementedBy"] = o.ComplementedBy
	}
	toSerialize["complemented"] = o.Complemented
	toSerialize["amountToBeEnteredByBidder"] = o.AmountToBeEnteredByBidder
	toSerialize["priceCompositionRequired"] = o.PriceCompositionRequired
	toSerialize["useDifferentTaxRate"] = o.UseDifferentTaxRate
	toSerialize["taxRate"] = o.TaxRate
	if !IsNil(o.ItemNumber) {
		toSerialize["itemNumber"] = o.ItemNumber
	}
	toSerialize["deductionFactor"] = o.DeductionFactor
	// skip: totalPrice is readOnly
	// skip: totalPriceGross is readOnly
	// skip: totalPriceGrossDeducted is readOnly
	// skip: deductedPrice is readOnly
	toSerialize["positionType"] = o.PositionType
	toSerialize["priceType"] = o.PriceType
	toSerialize["serviceType"] = o.ServiceType
	if !IsNil(o.ProductData) {
		toSerialize["productData"] = o.ProductData
	}
	if !IsNil(o.ShortText) {
		toSerialize["shortText"] = o.ShortText
	}
	if !IsNil(o.LongText) {
		toSerialize["longText"] = o.LongText
	}
	if !IsNil(o.HtmlLongText) {
		toSerialize["htmlLongText"] = o.HtmlLongText
	}
	toSerialize["additionType"] = o.AdditionType
	if !IsNil(o.ElementType) {
		toSerialize["elementType"] = o.ElementType
	}
	if !IsNil(o.QuantityAssignments) {
		toSerialize["quantityAssignments"] = o.QuantityAssignments
	}
	if !IsNil(o.CommerceProperties) {
		toSerialize["commerceProperties"] = o.CommerceProperties
	}
	if !IsNil(o.AlternativeTo) {
		toSerialize["alternativeTo"] = o.AlternativeTo
	}
	if !IsNil(o.AlternativeIdentifier) {
		toSerialize["alternativeIdentifier"] = o.AlternativeIdentifier
	}
	if !IsNil(o.AlternativeGroupIdentifier) {
		toSerialize["alternativeGroupIdentifier"] = o.AlternativeGroupIdentifier
	}
	toSerialize["isLumpSum"] = o.IsLumpSum
	if !IsNil(o.RepetitionTo) {
		toSerialize["repetitionTo"] = o.RepetitionTo
	}
	if !IsNil(o.StandardizedDescription) {
		toSerialize["standardizedDescription"] = o.StandardizedDescription
	}
	if !IsNil(o.ComplementedByQuantities) {
		toSerialize["complementedByQuantities"] = o.ComplementedByQuantities
	}
	if !IsNil(o.ExecutionDescriptionReference) {
		toSerialize["executionDescriptionReference"] = o.ExecutionDescriptionReference
	}
	toSerialize["notOffered"] = o.NotOffered
	if !IsNil(o.OenormPositionProperties) {
		toSerialize["oenormPositionProperties"] = o.OenormPositionProperties
	}
	if !IsNil(o.DescriptionId) {
		toSerialize["descriptionId"] = o.DescriptionId
	}
	toSerialize["hierarchyLevel"] = o.HierarchyLevel
	if !IsNil(o.AddendumStatus) {
		toSerialize["addendumStatus"] = o.AddendumStatus
	}
	// skip: hasBidderCommentInHtmlLongText is readOnly
	toSerialize["gaebComplementingType"] = o.GaebComplementingType
	if !IsNil(o.HoldOutProperties) {
		toSerialize["holdOutProperties"] = o.HoldOutProperties
	}
	if !IsNil(o.EstimatedQuantity) {
		toSerialize["estimatedQuantity"] = o.EstimatedQuantity
	}
	if !IsNil(o.PriceCatalogueData) {
		toSerialize["priceCatalogueData"] = o.PriceCatalogueData
	}
	toSerialize["ignoreProjectCataloguePropagation"] = o.IgnoreProjectCataloguePropagation
	return toSerialize, nil
}

type NullablePositionDto struct {
	value *PositionDto
	isSet bool
}

func (v NullablePositionDto) Get() *PositionDto {
	return v.value
}

func (v *NullablePositionDto) Set(val *PositionDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePositionDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePositionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePositionDto(val *PositionDto) *NullablePositionDto {
	return &NullablePositionDto{value: val, isSet: true}
}

func (v NullablePositionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePositionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
