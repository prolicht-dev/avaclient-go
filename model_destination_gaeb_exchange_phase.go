/*
AVACloud API 1.41.4

AVACloud API specification

API version: 1.41.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
	"fmt"
)

// DestinationGaebExchangePhase The GAEB exchange phase to transform to
type DestinationGaebExchangePhase string

// List of DestinationGaebExchangePhase
const (
	DESTINATIONGAEBEXCHANGEPHASE_NONE          DestinationGaebExchangePhase = "None"
	DESTINATIONGAEBEXCHANGEPHASE_BASE          DestinationGaebExchangePhase = "Base"
	DESTINATIONGAEBEXCHANGEPHASE_OFFER_REQUEST DestinationGaebExchangePhase = "OfferRequest"
	DESTINATIONGAEBEXCHANGEPHASE_OFFER         DestinationGaebExchangePhase = "Offer"
	DESTINATIONGAEBEXCHANGEPHASE_GRANT         DestinationGaebExchangePhase = "Grant"
	DESTINATIONGAEBEXCHANGEPHASE_COST_ESTIMATE DestinationGaebExchangePhase = "CostEstimate"
	DESTINATIONGAEBEXCHANGEPHASE_SIDE_OFFER    DestinationGaebExchangePhase = "SideOffer"
)

// All allowed values of DestinationGaebExchangePhase enum
var AllowedDestinationGaebExchangePhaseEnumValues = []DestinationGaebExchangePhase{
	"None",
	"Base",
	"OfferRequest",
	"Offer",
	"Grant",
	"CostEstimate",
	"SideOffer",
}

func (v *DestinationGaebExchangePhase) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DestinationGaebExchangePhase(value)
	for _, existing := range AllowedDestinationGaebExchangePhaseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DestinationGaebExchangePhase", value)
}

// NewDestinationGaebExchangePhaseFromValue returns a pointer to a valid DestinationGaebExchangePhase
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDestinationGaebExchangePhaseFromValue(v string) (*DestinationGaebExchangePhase, error) {
	ev := DestinationGaebExchangePhase(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DestinationGaebExchangePhase: valid values are %v", v, AllowedDestinationGaebExchangePhaseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DestinationGaebExchangePhase) IsValid() bool {
	for _, existing := range AllowedDestinationGaebExchangePhaseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DestinationGaebExchangePhase value
func (v DestinationGaebExchangePhase) Ptr() *DestinationGaebExchangePhase {
	return &v
}

type NullableDestinationGaebExchangePhase struct {
	value *DestinationGaebExchangePhase
	isSet bool
}

func (v NullableDestinationGaebExchangePhase) Get() *DestinationGaebExchangePhase {
	return v.value
}

func (v *NullableDestinationGaebExchangePhase) Set(val *DestinationGaebExchangePhase) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationGaebExchangePhase) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationGaebExchangePhase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationGaebExchangePhase(val *DestinationGaebExchangePhase) *NullableDestinationGaebExchangePhase {
	return &NullableDestinationGaebExchangePhase{value: val, isSet: true}
}

func (v NullableDestinationGaebExchangePhase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationGaebExchangePhase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
