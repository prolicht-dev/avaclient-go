/*
AVACloud API 1.41.4

AVACloud API specification

API version: 1.41.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
)

// checks if the ExecutionDescriptionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionDescriptionDto{}

// ExecutionDescriptionDto struct for ExecutionDescriptionDto
type ExecutionDescriptionDto struct {
	IElementDto
	// Blocks within an ExecutionDescription contain the actual information.
	Blocks []NoteTextDto `json:"blocks,omitempty"`
	// Labels this ExecutionDescription.
	Label *string `json:"label,omitempty"`
	// Uniquely identifies this ExecutionDescription.
	Identifier  *string `json:"identifier,omitempty"`
	ElementType *string `json:"elementType,omitempty"`
}

// NewExecutionDescriptionDto instantiates a new ExecutionDescriptionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionDescriptionDto(id string, elementTypeDiscriminator string) *ExecutionDescriptionDto {
	this := ExecutionDescriptionDto{}
	this.Id = id
	this.ElementTypeDiscriminator = elementTypeDiscriminator
	return &this
}

// NewExecutionDescriptionDtoWithDefaults instantiates a new ExecutionDescriptionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionDescriptionDtoWithDefaults() *ExecutionDescriptionDto {
	this := ExecutionDescriptionDto{}
	return &this
}

// GetBlocks returns the Blocks field value if set, zero value otherwise.
func (o *ExecutionDescriptionDto) GetBlocks() []NoteTextDto {
	if o == nil || IsNil(o.Blocks) {
		var ret []NoteTextDto
		return ret
	}
	return o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionDescriptionDto) GetBlocksOk() ([]NoteTextDto, bool) {
	if o == nil || IsNil(o.Blocks) {
		return nil, false
	}
	return o.Blocks, true
}

// HasBlocks returns a boolean if a field has been set.
func (o *ExecutionDescriptionDto) HasBlocks() bool {
	if o != nil && !IsNil(o.Blocks) {
		return true
	}

	return false
}

// SetBlocks gets a reference to the given []NoteTextDto and assigns it to the Blocks field.
func (o *ExecutionDescriptionDto) SetBlocks(v []NoteTextDto) {
	o.Blocks = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ExecutionDescriptionDto) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionDescriptionDto) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ExecutionDescriptionDto) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ExecutionDescriptionDto) SetLabel(v string) {
	o.Label = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ExecutionDescriptionDto) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionDescriptionDto) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ExecutionDescriptionDto) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *ExecutionDescriptionDto) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetElementType returns the ElementType field value if set, zero value otherwise.
func (o *ExecutionDescriptionDto) GetElementType() string {
	if o == nil || IsNil(o.ElementType) {
		var ret string
		return ret
	}
	return *o.ElementType
}

// GetElementTypeOk returns a tuple with the ElementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionDescriptionDto) GetElementTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ElementType) {
		return nil, false
	}
	return o.ElementType, true
}

// HasElementType returns a boolean if a field has been set.
func (o *ExecutionDescriptionDto) HasElementType() bool {
	if o != nil && !IsNil(o.ElementType) {
		return true
	}

	return false
}

// SetElementType gets a reference to the given string and assigns it to the ElementType field.
func (o *ExecutionDescriptionDto) SetElementType(v string) {
	o.ElementType = &v
}

func (o ExecutionDescriptionDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionDescriptionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedIElementDto, errIElementDto := json.Marshal(o.IElementDto)
	if errIElementDto != nil {
		return map[string]interface{}{}, errIElementDto
	}
	errIElementDto = json.Unmarshal([]byte(serializedIElementDto), &toSerialize)
	if errIElementDto != nil {
		return map[string]interface{}{}, errIElementDto
	}
	if !IsNil(o.Blocks) {
		toSerialize["blocks"] = o.Blocks
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.ElementType) {
		toSerialize["elementType"] = o.ElementType
	}
	return toSerialize, nil
}

type NullableExecutionDescriptionDto struct {
	value *ExecutionDescriptionDto
	isSet bool
}

func (v NullableExecutionDescriptionDto) Get() *ExecutionDescriptionDto {
	return v.value
}

func (v *NullableExecutionDescriptionDto) Set(val *ExecutionDescriptionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionDescriptionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionDescriptionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionDescriptionDto(val *ExecutionDescriptionDto) *NullableExecutionDescriptionDto {
	return &NullableExecutionDescriptionDto{value: val, isSet: true}
}

func (v NullableExecutionDescriptionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionDescriptionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
