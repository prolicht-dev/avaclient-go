/*
AVACloud API 2.0.0

Testing FlatAvaConversionApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package avaclient

import (
	"context"
	openapiclient "github.com/prolicht-dev/avaclient-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_avaclient_FlatAvaConversionApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FlatAvaConversionApiService FlatAvaConversionConvertToAva", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FlatAvaConversionApi.FlatAvaConversionConvertToAva(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlatAvaConversionApiService FlatAvaConversionConvertToDatanorm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FlatAvaConversionApi.FlatAvaConversionConvertToDatanorm(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlatAvaConversionApiService FlatAvaConversionConvertToExcel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FlatAvaConversionApi.FlatAvaConversionConvertToExcel(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlatAvaConversionApiService FlatAvaConversionConvertToFlatAva", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FlatAvaConversionApi.FlatAvaConversionConvertToFlatAva(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlatAvaConversionApiService FlatAvaConversionConvertToGaeb", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FlatAvaConversionApi.FlatAvaConversionConvertToGaeb(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlatAvaConversionApiService FlatAvaConversionConvertToIdsConnect", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FlatAvaConversionApi.FlatAvaConversionConvertToIdsConnect(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlatAvaConversionApiService FlatAvaConversionConvertToOenorm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FlatAvaConversionApi.FlatAvaConversionConvertToOenorm(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlatAvaConversionApiService FlatAvaConversionConvertToReb", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FlatAvaConversionApi.FlatAvaConversionConvertToReb(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlatAvaConversionApiService FlatAvaConversionConvertToSia", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FlatAvaConversionApi.FlatAvaConversionConvertToSia(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlatAvaConversionApiService FlatAvaConversionConvertToUgl", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FlatAvaConversionApi.FlatAvaConversionConvertToUgl(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
