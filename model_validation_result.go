/*
AVACloud API 1.51.0

AVACloud API specification

API version: 1.51.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
)

// checks if the ValidationResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidationResult{}

// ValidationResult This class represents the result of a validation operation
type ValidationResult struct {
	// Indicates if the validation produced no errors
	IsSchemaCompliant bool `json:"isSchemaCompliant"`
	// List of validation check results, which are usually errors
	CheckResults   []ValidationCheckResult `json:"checkResults,omitempty"`
	ValidationType ValidationType          `json:"validationType"`
	// Name of the validated file
	FileName *string `json:"fileName,omitempty"`
}

// NewValidationResult instantiates a new ValidationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationResult(isSchemaCompliant bool, validationType ValidationType) *ValidationResult {
	this := ValidationResult{}
	this.IsSchemaCompliant = isSchemaCompliant
	this.ValidationType = validationType
	return &this
}

// NewValidationResultWithDefaults instantiates a new ValidationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationResultWithDefaults() *ValidationResult {
	this := ValidationResult{}
	return &this
}

// GetIsSchemaCompliant returns the IsSchemaCompliant field value
func (o *ValidationResult) GetIsSchemaCompliant() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSchemaCompliant
}

// GetIsSchemaCompliantOk returns a tuple with the IsSchemaCompliant field value
// and a boolean to check if the value has been set.
func (o *ValidationResult) GetIsSchemaCompliantOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSchemaCompliant, true
}

// SetIsSchemaCompliant sets field value
func (o *ValidationResult) SetIsSchemaCompliant(v bool) {
	o.IsSchemaCompliant = v
}

// GetCheckResults returns the CheckResults field value if set, zero value otherwise.
func (o *ValidationResult) GetCheckResults() []ValidationCheckResult {
	if o == nil || IsNil(o.CheckResults) {
		var ret []ValidationCheckResult
		return ret
	}
	return o.CheckResults
}

// GetCheckResultsOk returns a tuple with the CheckResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationResult) GetCheckResultsOk() ([]ValidationCheckResult, bool) {
	if o == nil || IsNil(o.CheckResults) {
		return nil, false
	}
	return o.CheckResults, true
}

// HasCheckResults returns a boolean if a field has been set.
func (o *ValidationResult) HasCheckResults() bool {
	if o != nil && !IsNil(o.CheckResults) {
		return true
	}

	return false
}

// SetCheckResults gets a reference to the given []ValidationCheckResult and assigns it to the CheckResults field.
func (o *ValidationResult) SetCheckResults(v []ValidationCheckResult) {
	o.CheckResults = v
}

// GetValidationType returns the ValidationType field value
func (o *ValidationResult) GetValidationType() ValidationType {
	if o == nil {
		var ret ValidationType
		return ret
	}

	return o.ValidationType
}

// GetValidationTypeOk returns a tuple with the ValidationType field value
// and a boolean to check if the value has been set.
func (o *ValidationResult) GetValidationTypeOk() (*ValidationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidationType, true
}

// SetValidationType sets field value
func (o *ValidationResult) SetValidationType(v ValidationType) {
	o.ValidationType = v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *ValidationResult) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationResult) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *ValidationResult) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *ValidationResult) SetFileName(v string) {
	o.FileName = &v
}

func (o ValidationResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidationResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isSchemaCompliant"] = o.IsSchemaCompliant
	if !IsNil(o.CheckResults) {
		toSerialize["checkResults"] = o.CheckResults
	}
	toSerialize["validationType"] = o.ValidationType
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	return toSerialize, nil
}

type NullableValidationResult struct {
	value *ValidationResult
	isSet bool
}

func (v NullableValidationResult) Get() *ValidationResult {
	return v.value
}

func (v *NullableValidationResult) Set(val *ValidationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationResult(val *ValidationResult) *NullableValidationResult {
	return &NullableValidationResult{value: val, isSet: true}
}

func (v NullableValidationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
