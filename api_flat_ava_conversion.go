/*
AVACloud API 1.51.0

AVACloud API specification

API version: 1.51.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
)

// FlatAvaConversionApiService FlatAvaConversionApi service
type FlatAvaConversionApiService service

type ApiFlatAvaConversionConvertToAvaRequest struct {
	ctx                                 context.Context
	ApiService                          *FlatAvaConversionApiService
	flatAvaProject                      *FlatAvaProject
	tryAutoGenerateItemNumbersAndSchema *bool
	removePlainTextLongTexts            *bool
	removeHtmlLongTexts                 *bool
}

// The flat Dangl.AVA project
func (r ApiFlatAvaConversionConvertToAvaRequest) FlatAvaProject(flatAvaProject FlatAvaProject) ApiFlatAvaConversionConvertToAvaRequest {
	r.flatAvaProject = &flatAvaProject
	return r
}

// If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number.
func (r ApiFlatAvaConversionConvertToAvaRequest) TryAutoGenerateItemNumbersAndSchema(tryAutoGenerateItemNumbersAndSchema bool) ApiFlatAvaConversionConvertToAvaRequest {
	r.tryAutoGenerateItemNumbersAndSchema = &tryAutoGenerateItemNumbersAndSchema
	return r
}

// If set to true, plain text long texts will be removed from the output to reduce response sizes
func (r ApiFlatAvaConversionConvertToAvaRequest) RemovePlainTextLongTexts(removePlainTextLongTexts bool) ApiFlatAvaConversionConvertToAvaRequest {
	r.removePlainTextLongTexts = &removePlainTextLongTexts
	return r
}

// If set to true, html long texts will be removed from the output to reduce response sizes
func (r ApiFlatAvaConversionConvertToAvaRequest) RemoveHtmlLongTexts(removeHtmlLongTexts bool) ApiFlatAvaConversionConvertToAvaRequest {
	r.removeHtmlLongTexts = &removeHtmlLongTexts
	return r
}

func (r ApiFlatAvaConversionConvertToAvaRequest) Execute() (*ProjectDto, *http.Response, error) {
	return r.ApiService.FlatAvaConversionConvertToAvaExecute(r)
}

/*
FlatAvaConversionConvertToAva Converts flat Dangl.AVA projects to Dangl.AVA. This is useful when you want to generate the calculated properties.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFlatAvaConversionConvertToAvaRequest
*/
func (a *FlatAvaConversionApiService) FlatAvaConversionConvertToAva(ctx context.Context) ApiFlatAvaConversionConvertToAvaRequest {
	return ApiFlatAvaConversionConvertToAvaRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ProjectDto
func (a *FlatAvaConversionApiService) FlatAvaConversionConvertToAvaExecute(r ApiFlatAvaConversionConvertToAvaRequest) (*ProjectDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlatAvaConversionApiService.FlatAvaConversionConvertToAva")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversion/flat-ava/ava"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.flatAvaProject == nil {
		return localVarReturnValue, nil, reportError("flatAvaProject is required and must be specified")
	}

	if r.tryAutoGenerateItemNumbersAndSchema != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "TryAutoGenerateItemNumbersAndSchema", r.tryAutoGenerateItemNumbersAndSchema, "")
	}
	if r.removePlainTextLongTexts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "RemovePlainTextLongTexts", r.removePlainTextLongTexts, "")
	}
	if r.removeHtmlLongTexts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "RemoveHtmlLongTexts", r.removeHtmlLongTexts, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.com.dangl-it.ProjectDto.v1+json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.flatAvaProject
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlatAvaConversionConvertToDatanormRequest struct {
	ctx                                 context.Context
	ApiService                          *FlatAvaConversionApiService
	flatAvaProject                      *FlatAvaProject
	tryAutoGenerateItemNumbersAndSchema *bool
	datanormDestinationVersion          *string
}

// The flat Dangl.AVA project
func (r ApiFlatAvaConversionConvertToDatanormRequest) FlatAvaProject(flatAvaProject FlatAvaProject) ApiFlatAvaConversionConvertToDatanormRequest {
	r.flatAvaProject = &flatAvaProject
	return r
}

// If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number.
func (r ApiFlatAvaConversionConvertToDatanormRequest) TryAutoGenerateItemNumbersAndSchema(tryAutoGenerateItemNumbersAndSchema bool) ApiFlatAvaConversionConvertToDatanormRequest {
	r.tryAutoGenerateItemNumbersAndSchema = &tryAutoGenerateItemNumbersAndSchema
	return r
}

// The Datanorm version to convert to. Defaults to V4.
func (r ApiFlatAvaConversionConvertToDatanormRequest) DatanormDestinationVersion(datanormDestinationVersion string) ApiFlatAvaConversionConvertToDatanormRequest {
	r.datanormDestinationVersion = &datanormDestinationVersion
	return r
}

func (r ApiFlatAvaConversionConvertToDatanormRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.FlatAvaConversionConvertToDatanormExecute(r)
}

/*
FlatAvaConversionConvertToDatanorm Converts flat Dangl.AVA projects to Datanorm

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFlatAvaConversionConvertToDatanormRequest
*/
func (a *FlatAvaConversionApiService) FlatAvaConversionConvertToDatanorm(ctx context.Context) ApiFlatAvaConversionConvertToDatanormRequest {
	return ApiFlatAvaConversionConvertToDatanormRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *FlatAvaConversionApiService) FlatAvaConversionConvertToDatanormExecute(r ApiFlatAvaConversionConvertToDatanormRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlatAvaConversionApiService.FlatAvaConversionConvertToDatanorm")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversion/flat-ava/datanorm"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.flatAvaProject == nil {
		return localVarReturnValue, nil, reportError("flatAvaProject is required and must be specified")
	}

	if r.tryAutoGenerateItemNumbersAndSchema != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "TryAutoGenerateItemNumbersAndSchema", r.tryAutoGenerateItemNumbersAndSchema, "")
	}
	if r.datanormDestinationVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DatanormDestinationVersion", r.datanormDestinationVersion, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.flatAvaProject
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlatAvaConversionConvertToExcelRequest struct {
	ctx                                 context.Context
	ApiService                          *FlatAvaConversionApiService
	flatAvaProject                      *FlatAvaProject
	tryAutoGenerateItemNumbersAndSchema *bool
	writePrices                         *bool
	writeLongTexts                      *bool
	conversionCulture                   *string
	includeArticleNumbers               *bool
}

// The flat Dangl.AVA project
func (r ApiFlatAvaConversionConvertToExcelRequest) FlatAvaProject(flatAvaProject FlatAvaProject) ApiFlatAvaConversionConvertToExcelRequest {
	r.flatAvaProject = &flatAvaProject
	return r
}

// If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number.
func (r ApiFlatAvaConversionConvertToExcelRequest) TryAutoGenerateItemNumbersAndSchema(tryAutoGenerateItemNumbersAndSchema bool) ApiFlatAvaConversionConvertToExcelRequest {
	r.tryAutoGenerateItemNumbersAndSchema = &tryAutoGenerateItemNumbersAndSchema
	return r
}

// Defaults to true
func (r ApiFlatAvaConversionConvertToExcelRequest) WritePrices(writePrices bool) ApiFlatAvaConversionConvertToExcelRequest {
	r.writePrices = &writePrices
	return r
}

// Defaults to true
func (r ApiFlatAvaConversionConvertToExcelRequest) WriteLongTexts(writeLongTexts bool) ApiFlatAvaConversionConvertToExcelRequest {
	r.writeLongTexts = &writeLongTexts
	return r
}

// The culture that should be used for the conversion process, to have localized Excel files
func (r ApiFlatAvaConversionConvertToExcelRequest) ConversionCulture(conversionCulture string) ApiFlatAvaConversionConvertToExcelRequest {
	r.conversionCulture = &conversionCulture
	return r
}

// If this is enabled, then a new column will be created in the overview worksheet that contains the article numbers for positions. Article numbers will be read from &#39;position.commerceProperties.articleNumber&#39;
func (r ApiFlatAvaConversionConvertToExcelRequest) IncludeArticleNumbers(includeArticleNumbers bool) ApiFlatAvaConversionConvertToExcelRequest {
	r.includeArticleNumbers = &includeArticleNumbers
	return r
}

func (r ApiFlatAvaConversionConvertToExcelRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.FlatAvaConversionConvertToExcelExecute(r)
}

/*
FlatAvaConversionConvertToExcel Converts flat Dangl.AVA projects to Excel

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFlatAvaConversionConvertToExcelRequest
*/
func (a *FlatAvaConversionApiService) FlatAvaConversionConvertToExcel(ctx context.Context) ApiFlatAvaConversionConvertToExcelRequest {
	return ApiFlatAvaConversionConvertToExcelRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *FlatAvaConversionApiService) FlatAvaConversionConvertToExcelExecute(r ApiFlatAvaConversionConvertToExcelRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlatAvaConversionApiService.FlatAvaConversionConvertToExcel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversion/flat-ava/excel"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.flatAvaProject == nil {
		return localVarReturnValue, nil, reportError("flatAvaProject is required and must be specified")
	}

	if r.tryAutoGenerateItemNumbersAndSchema != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "TryAutoGenerateItemNumbersAndSchema", r.tryAutoGenerateItemNumbersAndSchema, "")
	}
	if r.writePrices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "WritePrices", r.writePrices, "")
	}
	if r.writeLongTexts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "WriteLongTexts", r.writeLongTexts, "")
	}
	if r.conversionCulture != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ConversionCulture", r.conversionCulture, "")
	}
	if r.includeArticleNumbers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeArticleNumbers", r.includeArticleNumbers, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.flatAvaProject
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlatAvaConversionConvertToFlatAvaRequest struct {
	ctx                                 context.Context
	ApiService                          *FlatAvaConversionApiService
	flatAvaProject                      *FlatAvaProject
	tryAutoGenerateItemNumbersAndSchema *bool
}

// The flat Dangl.AVA project
func (r ApiFlatAvaConversionConvertToFlatAvaRequest) FlatAvaProject(flatAvaProject FlatAvaProject) ApiFlatAvaConversionConvertToFlatAvaRequest {
	r.flatAvaProject = &flatAvaProject
	return r
}

// If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number.
func (r ApiFlatAvaConversionConvertToFlatAvaRequest) TryAutoGenerateItemNumbersAndSchema(tryAutoGenerateItemNumbersAndSchema bool) ApiFlatAvaConversionConvertToFlatAvaRequest {
	r.tryAutoGenerateItemNumbersAndSchema = &tryAutoGenerateItemNumbersAndSchema
	return r
}

func (r ApiFlatAvaConversionConvertToFlatAvaRequest) Execute() (*FlatAvaProject, *http.Response, error) {
	return r.ApiService.FlatAvaConversionConvertToFlatAvaExecute(r)
}

/*
FlatAvaConversionConvertToFlatAva Converts flat Dangl.AVA projects to Dangl.AVA. This is useful when you want to generate the calculated properties.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFlatAvaConversionConvertToFlatAvaRequest
*/
func (a *FlatAvaConversionApiService) FlatAvaConversionConvertToFlatAva(ctx context.Context) ApiFlatAvaConversionConvertToFlatAvaRequest {
	return ApiFlatAvaConversionConvertToFlatAvaRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FlatAvaProject
func (a *FlatAvaConversionApiService) FlatAvaConversionConvertToFlatAvaExecute(r ApiFlatAvaConversionConvertToFlatAvaRequest) (*FlatAvaProject, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FlatAvaProject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlatAvaConversionApiService.FlatAvaConversionConvertToFlatAva")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversion/flat-ava/flat-ava"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.flatAvaProject == nil {
		return localVarReturnValue, nil, reportError("flatAvaProject is required and must be specified")
	}

	if r.tryAutoGenerateItemNumbersAndSchema != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "TryAutoGenerateItemNumbersAndSchema", r.tryAutoGenerateItemNumbersAndSchema, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.flatAvaProject
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlatAvaConversionConvertToGaebRequest struct {
	ctx                                   context.Context
	ApiService                            *FlatAvaConversionApiService
	flatAvaProject                        *FlatAvaProject
	tryAutoGenerateItemNumbersAndSchema   *bool
	destinationGaebType                   *string
	targetExchangePhaseTransform          *string
	enforceStrictOfferPhaseLongTextOutput *bool
	exportQuantityDetermination           *bool
	removeUnprintableCharactersFromTexts  *bool
	forceIncludeDescriptions              *bool
	treatNullItemNumberSchemaAsInvalid    *bool
}

// The flat Dangl.AVA project
func (r ApiFlatAvaConversionConvertToGaebRequest) FlatAvaProject(flatAvaProject FlatAvaProject) ApiFlatAvaConversionConvertToGaebRequest {
	r.flatAvaProject = &flatAvaProject
	return r
}

// If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number.
func (r ApiFlatAvaConversionConvertToGaebRequest) TryAutoGenerateItemNumbersAndSchema(tryAutoGenerateItemNumbersAndSchema bool) ApiFlatAvaConversionConvertToGaebRequest {
	r.tryAutoGenerateItemNumbersAndSchema = &tryAutoGenerateItemNumbersAndSchema
	return r
}

// Defaults to GAEB XML V3.2
func (r ApiFlatAvaConversionConvertToGaebRequest) DestinationGaebType(destinationGaebType string) ApiFlatAvaConversionConvertToGaebRequest {
	r.destinationGaebType = &destinationGaebType
	return r
}

// Defaults to none, meaning no transformation will be done. The phases are: Base &#x3D; 81 CostEstimate &#x3D; 82 OfferRequest &#x3D; 83 Offer &#x3D; 84 SideOffer &#x3D; 85 Grant &#x3D; 86
func (r ApiFlatAvaConversionConvertToGaebRequest) TargetExchangePhaseTransform(targetExchangePhaseTransform string) ApiFlatAvaConversionConvertToGaebRequest {
	r.targetExchangePhaseTransform = &targetExchangePhaseTransform
	return r
}

// Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export.
func (r ApiFlatAvaConversionConvertToGaebRequest) EnforceStrictOfferPhaseLongTextOutput(enforceStrictOfferPhaseLongTextOutput bool) ApiFlatAvaConversionConvertToGaebRequest {
	r.enforceStrictOfferPhaseLongTextOutput = &enforceStrictOfferPhaseLongTextOutput
	return r
}

// Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the &#39;QtyDeterm&#39; (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the &#39;QuantityComponents&#39; property of positions. Please see the entry for &#39;Quantity Determination&#39; in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the &#39;QuantityComponents&#39; property.
func (r ApiFlatAvaConversionConvertToGaebRequest) ExportQuantityDetermination(exportQuantityDetermination bool) ApiFlatAvaConversionConvertToGaebRequest {
	r.exportQuantityDetermination = &exportQuantityDetermination
	return r
}

// If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true.
func (r ApiFlatAvaConversionConvertToGaebRequest) RemoveUnprintableCharactersFromTexts(removeUnprintableCharactersFromTexts bool) ApiFlatAvaConversionConvertToGaebRequest {
	r.removeUnprintableCharactersFromTexts = &removeUnprintableCharactersFromTexts
	return r
}

// If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions.
func (r ApiFlatAvaConversionConvertToGaebRequest) ForceIncludeDescriptions(forceIncludeDescriptions bool) ApiFlatAvaConversionConvertToGaebRequest {
	r.forceIncludeDescriptions = &forceIncludeDescriptions
	return r
}

// When exporting to GAEB, an item number schema is usually required. AVACloud will try to fix invalid item number schemas. With this setting, you can also tell AVACloud to treat a null value as invalid. Otherwise, null schemas will simply be ignored and not lead to any schema being generated. It is recommended to enable this option, but it is disabled by default for compatibility reasons.
func (r ApiFlatAvaConversionConvertToGaebRequest) TreatNullItemNumberSchemaAsInvalid(treatNullItemNumberSchemaAsInvalid bool) ApiFlatAvaConversionConvertToGaebRequest {
	r.treatNullItemNumberSchemaAsInvalid = &treatNullItemNumberSchemaAsInvalid
	return r
}

func (r ApiFlatAvaConversionConvertToGaebRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.FlatAvaConversionConvertToGaebExecute(r)
}

/*
FlatAvaConversionConvertToGaeb Converts flat Dangl.AVA projects to GAEB

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFlatAvaConversionConvertToGaebRequest
*/
func (a *FlatAvaConversionApiService) FlatAvaConversionConvertToGaeb(ctx context.Context) ApiFlatAvaConversionConvertToGaebRequest {
	return ApiFlatAvaConversionConvertToGaebRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *FlatAvaConversionApiService) FlatAvaConversionConvertToGaebExecute(r ApiFlatAvaConversionConvertToGaebRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlatAvaConversionApiService.FlatAvaConversionConvertToGaeb")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversion/flat-ava/gaeb"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.flatAvaProject == nil {
		return localVarReturnValue, nil, reportError("flatAvaProject is required and must be specified")
	}

	if r.tryAutoGenerateItemNumbersAndSchema != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "TryAutoGenerateItemNumbersAndSchema", r.tryAutoGenerateItemNumbersAndSchema, "")
	}
	if r.destinationGaebType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DestinationGaebType", r.destinationGaebType, "")
	}
	if r.targetExchangePhaseTransform != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "TargetExchangePhaseTransform", r.targetExchangePhaseTransform, "")
	}
	if r.enforceStrictOfferPhaseLongTextOutput != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnforceStrictOfferPhaseLongTextOutput", r.enforceStrictOfferPhaseLongTextOutput, "")
	}
	if r.exportQuantityDetermination != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ExportQuantityDetermination", r.exportQuantityDetermination, "")
	}
	if r.removeUnprintableCharactersFromTexts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "RemoveUnprintableCharactersFromTexts", r.removeUnprintableCharactersFromTexts, "")
	}
	if r.forceIncludeDescriptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ForceIncludeDescriptions", r.forceIncludeDescriptions, "")
	}
	if r.treatNullItemNumberSchemaAsInvalid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "TreatNullItemNumberSchemaAsInvalid", r.treatNullItemNumberSchemaAsInvalid, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.flatAvaProject
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlatAvaConversionConvertToIdsConnectRequest struct {
	ctx                                 context.Context
	ApiService                          *FlatAvaConversionApiService
	flatAvaProject                      *FlatAvaProject
	tryAutoGenerateItemNumbersAndSchema *bool
	version                             *string
}

// The flat Dangl.AVA project
func (r ApiFlatAvaConversionConvertToIdsConnectRequest) FlatAvaProject(flatAvaProject FlatAvaProject) ApiFlatAvaConversionConvertToIdsConnectRequest {
	r.flatAvaProject = &flatAvaProject
	return r
}

// If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number.
func (r ApiFlatAvaConversionConvertToIdsConnectRequest) TryAutoGenerateItemNumbersAndSchema(tryAutoGenerateItemNumbersAndSchema bool) ApiFlatAvaConversionConvertToIdsConnectRequest {
	r.tryAutoGenerateItemNumbersAndSchema = &tryAutoGenerateItemNumbersAndSchema
	return r
}

// The IDS Connect version to convert to. Defaults to V2_5.
func (r ApiFlatAvaConversionConvertToIdsConnectRequest) Version(version string) ApiFlatAvaConversionConvertToIdsConnectRequest {
	r.version = &version
	return r
}

func (r ApiFlatAvaConversionConvertToIdsConnectRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.FlatAvaConversionConvertToIdsConnectExecute(r)
}

/*
FlatAvaConversionConvertToIdsConnect Converts flat Dangl.AVA projects to IDS Connect files

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFlatAvaConversionConvertToIdsConnectRequest
*/
func (a *FlatAvaConversionApiService) FlatAvaConversionConvertToIdsConnect(ctx context.Context) ApiFlatAvaConversionConvertToIdsConnectRequest {
	return ApiFlatAvaConversionConvertToIdsConnectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *FlatAvaConversionApiService) FlatAvaConversionConvertToIdsConnectExecute(r ApiFlatAvaConversionConvertToIdsConnectRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlatAvaConversionApiService.FlatAvaConversionConvertToIdsConnect")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversion/flat-ava/ids-connect"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.flatAvaProject == nil {
		return localVarReturnValue, nil, reportError("flatAvaProject is required and must be specified")
	}

	if r.tryAutoGenerateItemNumbersAndSchema != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "TryAutoGenerateItemNumbersAndSchema", r.tryAutoGenerateItemNumbersAndSchema, "")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Version", r.version, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.flatAvaProject
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlatAvaConversionConvertToOenormRequest struct {
	ctx                                    context.Context
	ApiService                             *FlatAvaConversionApiService
	flatAvaProject                         *FlatAvaProject
	tryAutoGenerateItemNumbersAndSchema    *bool
	destinationOenormType                  *string
	tryRepairProjectStructure              *bool
	skipTryEnforceSchemaCompliantXmlOutput *bool
	removeUnprintableCharactersFromTexts   *bool
}

// The flat Dangl.AVA project
func (r ApiFlatAvaConversionConvertToOenormRequest) FlatAvaProject(flatAvaProject FlatAvaProject) ApiFlatAvaConversionConvertToOenormRequest {
	r.flatAvaProject = &flatAvaProject
	return r
}

// If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number.
func (r ApiFlatAvaConversionConvertToOenormRequest) TryAutoGenerateItemNumbersAndSchema(tryAutoGenerateItemNumbersAndSchema bool) ApiFlatAvaConversionConvertToOenormRequest {
	r.tryAutoGenerateItemNumbersAndSchema = &tryAutoGenerateItemNumbersAndSchema
	return r
}

// Defaults to Lv2015
func (r ApiFlatAvaConversionConvertToOenormRequest) DestinationOenormType(destinationOenormType string) ApiFlatAvaConversionConvertToOenormRequest {
	r.destinationOenormType = &destinationOenormType
	return r
}

// Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target
func (r ApiFlatAvaConversionConvertToOenormRequest) TryRepairProjectStructure(tryRepairProjectStructure bool) ApiFlatAvaConversionConvertToOenormRequest {
	r.tryRepairProjectStructure = &tryRepairProjectStructure
	return r
}

// If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option.
func (r ApiFlatAvaConversionConvertToOenormRequest) SkipTryEnforceSchemaCompliantXmlOutput(skipTryEnforceSchemaCompliantXmlOutput bool) ApiFlatAvaConversionConvertToOenormRequest {
	r.skipTryEnforceSchemaCompliantXmlOutput = &skipTryEnforceSchemaCompliantXmlOutput
	return r
}

// If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true.
func (r ApiFlatAvaConversionConvertToOenormRequest) RemoveUnprintableCharactersFromTexts(removeUnprintableCharactersFromTexts bool) ApiFlatAvaConversionConvertToOenormRequest {
	r.removeUnprintableCharactersFromTexts = &removeUnprintableCharactersFromTexts
	return r
}

func (r ApiFlatAvaConversionConvertToOenormRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.FlatAvaConversionConvertToOenormExecute(r)
}

/*
FlatAvaConversionConvertToOenorm Converts flat Dangl.AVA projects to Oenorm

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFlatAvaConversionConvertToOenormRequest
*/
func (a *FlatAvaConversionApiService) FlatAvaConversionConvertToOenorm(ctx context.Context) ApiFlatAvaConversionConvertToOenormRequest {
	return ApiFlatAvaConversionConvertToOenormRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *FlatAvaConversionApiService) FlatAvaConversionConvertToOenormExecute(r ApiFlatAvaConversionConvertToOenormRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlatAvaConversionApiService.FlatAvaConversionConvertToOenorm")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversion/flat-ava/oenorm"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.flatAvaProject == nil {
		return localVarReturnValue, nil, reportError("flatAvaProject is required and must be specified")
	}

	if r.tryAutoGenerateItemNumbersAndSchema != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "TryAutoGenerateItemNumbersAndSchema", r.tryAutoGenerateItemNumbersAndSchema, "")
	}
	if r.destinationOenormType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DestinationOenormType", r.destinationOenormType, "")
	}
	if r.tryRepairProjectStructure != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "TryRepairProjectStructure", r.tryRepairProjectStructure, "")
	}
	if r.skipTryEnforceSchemaCompliantXmlOutput != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SkipTryEnforceSchemaCompliantXmlOutput", r.skipTryEnforceSchemaCompliantXmlOutput, "")
	}
	if r.removeUnprintableCharactersFromTexts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "RemoveUnprintableCharactersFromTexts", r.removeUnprintableCharactersFromTexts, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.flatAvaProject
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlatAvaConversionConvertToRebRequest struct {
	ctx                                 context.Context
	ApiService                          *FlatAvaConversionApiService
	flatAvaProject                      *FlatAvaProject
	tryAutoGenerateItemNumbersAndSchema *bool
	destinationRebType                  *string
	lastRowAddress                      *string
}

// The flat Dangl.AVA project
func (r ApiFlatAvaConversionConvertToRebRequest) FlatAvaProject(flatAvaProject FlatAvaProject) ApiFlatAvaConversionConvertToRebRequest {
	r.flatAvaProject = &flatAvaProject
	return r
}

// If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number.
func (r ApiFlatAvaConversionConvertToRebRequest) TryAutoGenerateItemNumbersAndSchema(tryAutoGenerateItemNumbersAndSchema bool) ApiFlatAvaConversionConvertToRebRequest {
	r.tryAutoGenerateItemNumbersAndSchema = &tryAutoGenerateItemNumbersAndSchema
	return r
}

// Defaults to D11
func (r ApiFlatAvaConversionConvertToRebRequest) DestinationRebType(destinationRebType string) ApiFlatAvaConversionConvertToRebRequest {
	r.destinationRebType = &destinationRebType
	return r
}

// If this is present, the export to REB will be started from the next available row address after the given one. This must be a valid 6 character address, e.g. \&quot;1234A0\&quot;
func (r ApiFlatAvaConversionConvertToRebRequest) LastRowAddress(lastRowAddress string) ApiFlatAvaConversionConvertToRebRequest {
	r.lastRowAddress = &lastRowAddress
	return r
}

func (r ApiFlatAvaConversionConvertToRebRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.FlatAvaConversionConvertToRebExecute(r)
}

/*
FlatAvaConversionConvertToReb Converts flat Dangl.AVA projects to REB

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFlatAvaConversionConvertToRebRequest
*/
func (a *FlatAvaConversionApiService) FlatAvaConversionConvertToReb(ctx context.Context) ApiFlatAvaConversionConvertToRebRequest {
	return ApiFlatAvaConversionConvertToRebRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *FlatAvaConversionApiService) FlatAvaConversionConvertToRebExecute(r ApiFlatAvaConversionConvertToRebRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlatAvaConversionApiService.FlatAvaConversionConvertToReb")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversion/flat-ava/reb"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.flatAvaProject == nil {
		return localVarReturnValue, nil, reportError("flatAvaProject is required and must be specified")
	}

	if r.tryAutoGenerateItemNumbersAndSchema != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "TryAutoGenerateItemNumbersAndSchema", r.tryAutoGenerateItemNumbersAndSchema, "")
	}
	if r.destinationRebType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DestinationRebType", r.destinationRebType, "")
	}
	if r.lastRowAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "LastRowAddress", r.lastRowAddress, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.flatAvaProject
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlatAvaConversionConvertToSiaRequest struct {
	ctx                                 context.Context
	ApiService                          *FlatAvaConversionApiService
	flatAvaProject                      *FlatAvaProject
	tryAutoGenerateItemNumbersAndSchema *bool
	siaDestinationType                  *string
}

// The flat Dangl.AVA project
func (r ApiFlatAvaConversionConvertToSiaRequest) FlatAvaProject(flatAvaProject FlatAvaProject) ApiFlatAvaConversionConvertToSiaRequest {
	r.flatAvaProject = &flatAvaProject
	return r
}

// If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number.
func (r ApiFlatAvaConversionConvertToSiaRequest) TryAutoGenerateItemNumbersAndSchema(tryAutoGenerateItemNumbersAndSchema bool) ApiFlatAvaConversionConvertToSiaRequest {
	r.tryAutoGenerateItemNumbersAndSchema = &tryAutoGenerateItemNumbersAndSchema
	return r
}

// Defaults to Sia451
func (r ApiFlatAvaConversionConvertToSiaRequest) SiaDestinationType(siaDestinationType string) ApiFlatAvaConversionConvertToSiaRequest {
	r.siaDestinationType = &siaDestinationType
	return r
}

func (r ApiFlatAvaConversionConvertToSiaRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.FlatAvaConversionConvertToSiaExecute(r)
}

/*
FlatAvaConversionConvertToSia Converts flat Dangl.AVA projects to SIA 451

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFlatAvaConversionConvertToSiaRequest
*/
func (a *FlatAvaConversionApiService) FlatAvaConversionConvertToSia(ctx context.Context) ApiFlatAvaConversionConvertToSiaRequest {
	return ApiFlatAvaConversionConvertToSiaRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *FlatAvaConversionApiService) FlatAvaConversionConvertToSiaExecute(r ApiFlatAvaConversionConvertToSiaRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlatAvaConversionApiService.FlatAvaConversionConvertToSia")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversion/flat-ava/sia"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.flatAvaProject == nil {
		return localVarReturnValue, nil, reportError("flatAvaProject is required and must be specified")
	}

	if r.tryAutoGenerateItemNumbersAndSchema != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "TryAutoGenerateItemNumbersAndSchema", r.tryAutoGenerateItemNumbersAndSchema, "")
	}
	if r.siaDestinationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SiaDestinationType", r.siaDestinationType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.flatAvaProject
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlatAvaConversionConvertToUglRequest struct {
	ctx                                 context.Context
	ApiService                          *FlatAvaConversionApiService
	flatAvaProject                      *FlatAvaProject
	tryAutoGenerateItemNumbersAndSchema *bool
	uglDestinationVersion               *string
}

// The flat Dangl.AVA project
func (r ApiFlatAvaConversionConvertToUglRequest) FlatAvaProject(flatAvaProject FlatAvaProject) ApiFlatAvaConversionConvertToUglRequest {
	r.flatAvaProject = &flatAvaProject
	return r
}

// If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number.
func (r ApiFlatAvaConversionConvertToUglRequest) TryAutoGenerateItemNumbersAndSchema(tryAutoGenerateItemNumbersAndSchema bool) ApiFlatAvaConversionConvertToUglRequest {
	r.tryAutoGenerateItemNumbersAndSchema = &tryAutoGenerateItemNumbersAndSchema
	return r
}

// The UGL version to convert to. Defaults to V1.
func (r ApiFlatAvaConversionConvertToUglRequest) UglDestinationVersion(uglDestinationVersion string) ApiFlatAvaConversionConvertToUglRequest {
	r.uglDestinationVersion = &uglDestinationVersion
	return r
}

func (r ApiFlatAvaConversionConvertToUglRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.FlatAvaConversionConvertToUglExecute(r)
}

/*
FlatAvaConversionConvertToUgl Converts flat Dangl.AVA projects to UGL

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFlatAvaConversionConvertToUglRequest
*/
func (a *FlatAvaConversionApiService) FlatAvaConversionConvertToUgl(ctx context.Context) ApiFlatAvaConversionConvertToUglRequest {
	return ApiFlatAvaConversionConvertToUglRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *FlatAvaConversionApiService) FlatAvaConversionConvertToUglExecute(r ApiFlatAvaConversionConvertToUglRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlatAvaConversionApiService.FlatAvaConversionConvertToUgl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversion/flat-ava/ugl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.flatAvaProject == nil {
		return localVarReturnValue, nil, reportError("flatAvaProject is required and must be specified")
	}

	if r.tryAutoGenerateItemNumbersAndSchema != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "TryAutoGenerateItemNumbersAndSchema", r.tryAutoGenerateItemNumbersAndSchema, "")
	}
	if r.uglDestinationVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UglDestinationVersion", r.uglDestinationVersion, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.flatAvaProject
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
