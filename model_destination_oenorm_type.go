/*
AVACloud API 1.45.0

AVACloud API specification

API version: 1.45.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
	"fmt"
)

// DestinationOenormType Represents valid Oenorm target types
type DestinationOenormType string

// List of DestinationOenormType
const (
	DESTINATIONOENORMTYPE_LV2015 DestinationOenormType = "Lv2015"
	DESTINATIONOENORMTYPE_LB2015 DestinationOenormType = "Lb2015"
	DESTINATIONOENORMTYPE_B2063  DestinationOenormType = "B2063"
	DESTINATIONOENORMTYPE_LV2009 DestinationOenormType = "Lv2009"
	DESTINATIONOENORMTYPE_LB2009 DestinationOenormType = "Lb2009"
	DESTINATIONOENORMTYPE_LV2021 DestinationOenormType = "Lv2021"
	DESTINATIONOENORMTYPE_LB2021 DestinationOenormType = "Lb2021"
)

// All allowed values of DestinationOenormType enum
var AllowedDestinationOenormTypeEnumValues = []DestinationOenormType{
	"Lv2015",
	"Lb2015",
	"B2063",
	"Lv2009",
	"Lb2009",
	"Lv2021",
	"Lb2021",
}

func (v *DestinationOenormType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DestinationOenormType(value)
	for _, existing := range AllowedDestinationOenormTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DestinationOenormType", value)
}

// NewDestinationOenormTypeFromValue returns a pointer to a valid DestinationOenormType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDestinationOenormTypeFromValue(v string) (*DestinationOenormType, error) {
	ev := DestinationOenormType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DestinationOenormType: valid values are %v", v, AllowedDestinationOenormTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DestinationOenormType) IsValid() bool {
	for _, existing := range AllowedDestinationOenormTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DestinationOenormType value
func (v DestinationOenormType) Ptr() *DestinationOenormType {
	return &v
}

type NullableDestinationOenormType struct {
	value *DestinationOenormType
	isSet bool
}

func (v NullableDestinationOenormType) Get() *DestinationOenormType {
	return v.value
}

func (v *NullableDestinationOenormType) Set(val *DestinationOenormType) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationOenormType) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationOenormType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationOenormType(val *DestinationOenormType) *NullableDestinationOenormType {
	return &NullableDestinationOenormType{value: val, isSet: true}
}

func (v NullableDestinationOenormType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationOenormType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
