/*
AVACloud API 1.45.0

AVACloud API specification

API version: 1.45.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
	"fmt"
)

// DestinationRebType Represents valid REB target types
type DestinationRebType string

// List of DestinationRebType
const (
	DESTINATIONREBTYPE_D11              DestinationRebType = "D11"
	DESTINATIONREBTYPE_X31_GAEB_XML_V32 DestinationRebType = "X31GaebXmlV32"
	DESTINATIONREBTYPE_X31_GAEB_XML_V33 DestinationRebType = "X31GaebXmlV33"
)

// All allowed values of DestinationRebType enum
var AllowedDestinationRebTypeEnumValues = []DestinationRebType{
	"D11",
	"X31GaebXmlV32",
	"X31GaebXmlV33",
}

func (v *DestinationRebType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DestinationRebType(value)
	for _, existing := range AllowedDestinationRebTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DestinationRebType", value)
}

// NewDestinationRebTypeFromValue returns a pointer to a valid DestinationRebType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDestinationRebTypeFromValue(v string) (*DestinationRebType, error) {
	ev := DestinationRebType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DestinationRebType: valid values are %v", v, AllowedDestinationRebTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DestinationRebType) IsValid() bool {
	for _, existing := range AllowedDestinationRebTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DestinationRebType value
func (v DestinationRebType) Ptr() *DestinationRebType {
	return &v
}

type NullableDestinationRebType struct {
	value *DestinationRebType
	isSet bool
}

func (v NullableDestinationRebType) Get() *DestinationRebType {
	return v.value
}

func (v *NullableDestinationRebType) Set(val *DestinationRebType) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationRebType) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationRebType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationRebType(val *DestinationRebType) *NullableDestinationRebType {
	return &NullableDestinationRebType{value: val, isSet: true}
}

func (v NullableDestinationRebType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationRebType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
