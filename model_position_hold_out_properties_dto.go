/*
AVACloud API 2.0.0

AVACloud API specification

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
)

// checks if the PositionHoldOutPropertiesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PositionHoldOutPropertiesDto{}

// PositionHoldOutPropertiesDto This class holds properties that describe retention types in position. Retention / hold out usually means that a service is provided and kept available for a specific amount of time, e.g. fences on a construction site
type PositionHoldOutPropertiesDto struct {
	// Elements GUID identifier.
	Id          string         `json:"id"`
	HoldOutType HoldOutTypeDto `json:"holdOutType"`
	// The duration of the period
	HoldOutDuration     float32                `json:"holdOutDuration"`
	HoldOutDurationUnit HoldOutDurationUnitDto `json:"holdOutDurationUnit"`
	// References to base positions
	BasePositionReferences []string `json:"basePositionReferences,omitempty"`
}

// NewPositionHoldOutPropertiesDto instantiates a new PositionHoldOutPropertiesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPositionHoldOutPropertiesDto(id string, holdOutType HoldOutTypeDto, holdOutDuration float32, holdOutDurationUnit HoldOutDurationUnitDto) *PositionHoldOutPropertiesDto {
	this := PositionHoldOutPropertiesDto{}
	this.Id = id
	this.HoldOutType = holdOutType
	this.HoldOutDuration = holdOutDuration
	this.HoldOutDurationUnit = holdOutDurationUnit
	return &this
}

// NewPositionHoldOutPropertiesDtoWithDefaults instantiates a new PositionHoldOutPropertiesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPositionHoldOutPropertiesDtoWithDefaults() *PositionHoldOutPropertiesDto {
	this := PositionHoldOutPropertiesDto{}
	return &this
}

// GetId returns the Id field value
func (o *PositionHoldOutPropertiesDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PositionHoldOutPropertiesDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PositionHoldOutPropertiesDto) SetId(v string) {
	o.Id = v
}

// GetHoldOutType returns the HoldOutType field value
func (o *PositionHoldOutPropertiesDto) GetHoldOutType() HoldOutTypeDto {
	if o == nil {
		var ret HoldOutTypeDto
		return ret
	}

	return o.HoldOutType
}

// GetHoldOutTypeOk returns a tuple with the HoldOutType field value
// and a boolean to check if the value has been set.
func (o *PositionHoldOutPropertiesDto) GetHoldOutTypeOk() (*HoldOutTypeDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HoldOutType, true
}

// SetHoldOutType sets field value
func (o *PositionHoldOutPropertiesDto) SetHoldOutType(v HoldOutTypeDto) {
	o.HoldOutType = v
}

// GetHoldOutDuration returns the HoldOutDuration field value
func (o *PositionHoldOutPropertiesDto) GetHoldOutDuration() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.HoldOutDuration
}

// GetHoldOutDurationOk returns a tuple with the HoldOutDuration field value
// and a boolean to check if the value has been set.
func (o *PositionHoldOutPropertiesDto) GetHoldOutDurationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HoldOutDuration, true
}

// SetHoldOutDuration sets field value
func (o *PositionHoldOutPropertiesDto) SetHoldOutDuration(v float32) {
	o.HoldOutDuration = v
}

// GetHoldOutDurationUnit returns the HoldOutDurationUnit field value
func (o *PositionHoldOutPropertiesDto) GetHoldOutDurationUnit() HoldOutDurationUnitDto {
	if o == nil {
		var ret HoldOutDurationUnitDto
		return ret
	}

	return o.HoldOutDurationUnit
}

// GetHoldOutDurationUnitOk returns a tuple with the HoldOutDurationUnit field value
// and a boolean to check if the value has been set.
func (o *PositionHoldOutPropertiesDto) GetHoldOutDurationUnitOk() (*HoldOutDurationUnitDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HoldOutDurationUnit, true
}

// SetHoldOutDurationUnit sets field value
func (o *PositionHoldOutPropertiesDto) SetHoldOutDurationUnit(v HoldOutDurationUnitDto) {
	o.HoldOutDurationUnit = v
}

// GetBasePositionReferences returns the BasePositionReferences field value if set, zero value otherwise.
func (o *PositionHoldOutPropertiesDto) GetBasePositionReferences() []string {
	if o == nil || IsNil(o.BasePositionReferences) {
		var ret []string
		return ret
	}
	return o.BasePositionReferences
}

// GetBasePositionReferencesOk returns a tuple with the BasePositionReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionHoldOutPropertiesDto) GetBasePositionReferencesOk() ([]string, bool) {
	if o == nil || IsNil(o.BasePositionReferences) {
		return nil, false
	}
	return o.BasePositionReferences, true
}

// HasBasePositionReferences returns a boolean if a field has been set.
func (o *PositionHoldOutPropertiesDto) HasBasePositionReferences() bool {
	if o != nil && !IsNil(o.BasePositionReferences) {
		return true
	}

	return false
}

// SetBasePositionReferences gets a reference to the given []string and assigns it to the BasePositionReferences field.
func (o *PositionHoldOutPropertiesDto) SetBasePositionReferences(v []string) {
	o.BasePositionReferences = v
}

func (o PositionHoldOutPropertiesDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PositionHoldOutPropertiesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["holdOutType"] = o.HoldOutType
	toSerialize["holdOutDuration"] = o.HoldOutDuration
	toSerialize["holdOutDurationUnit"] = o.HoldOutDurationUnit
	if !IsNil(o.BasePositionReferences) {
		toSerialize["basePositionReferences"] = o.BasePositionReferences
	}
	return toSerialize, nil
}

type NullablePositionHoldOutPropertiesDto struct {
	value *PositionHoldOutPropertiesDto
	isSet bool
}

func (v NullablePositionHoldOutPropertiesDto) Get() *PositionHoldOutPropertiesDto {
	return v.value
}

func (v *NullablePositionHoldOutPropertiesDto) Set(val *PositionHoldOutPropertiesDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePositionHoldOutPropertiesDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePositionHoldOutPropertiesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePositionHoldOutPropertiesDto(val *PositionHoldOutPropertiesDto) *NullablePositionHoldOutPropertiesDto {
	return &NullablePositionHoldOutPropertiesDto{value: val, isSet: true}
}

func (v NullablePositionHoldOutPropertiesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePositionHoldOutPropertiesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
