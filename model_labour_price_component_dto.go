/*
AVACloud API 1.41.4

AVACloud API specification

API version: 1.41.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
)

// checks if the LabourPriceComponentDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LabourPriceComponentDto{}

// LabourPriceComponentDto Based on the PriceComponent, this class is responsible for labour time components.
type LabourPriceComponentDto struct {
	// The label associated with this price component. Will be taken from the parent Projects ProjectInformation.
	Label *string `json:"label,omitempty"`
	// The total, calculated price of this component. Will multiply the calculated amount of hours with the ServiceSpecifications hourly wage rate.
	Price float32 `json:"price"`
	// The cost per hour of manual labor.
	HourlyWage float32 `json:"hourlyWage"`
	// The single Calculation elements this price component is composed of.
	Values []CalculationDto `json:"values,omitempty"`
	// Indicates if the ServiceSpecification's standard HourlyWage is to be used or a custom value.
	UseOwnHourlyWage bool `json:"useOwnHourlyWage"`
	// The total, calculated time of this component. Will return the result rounded to three decimal places.
	TotalTime float32 `json:"totalTime"`
	// These are Catalogues that are used within this PriceComponent. Catalogues are used to describe catalogues, or collections, that can be used to describe elements with commonly known properties. For example, QuantityAssignments use these to categorize themselves. They are propagate to all child elements, e.g. other containers and QuantityAssignments. In the context of a ServiceSpecification, all elements share the same instance of the collection.
	ProjectCatalogues []CatalogueDto `json:"projectCatalogues,omitempty"`
}

// NewLabourPriceComponentDto instantiates a new LabourPriceComponentDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabourPriceComponentDto(price float32, hourlyWage float32, useOwnHourlyWage bool, totalTime float32) *LabourPriceComponentDto {
	this := LabourPriceComponentDto{}
	this.Price = price
	this.HourlyWage = hourlyWage
	this.UseOwnHourlyWage = useOwnHourlyWage
	this.TotalTime = totalTime
	return &this
}

// NewLabourPriceComponentDtoWithDefaults instantiates a new LabourPriceComponentDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabourPriceComponentDtoWithDefaults() *LabourPriceComponentDto {
	this := LabourPriceComponentDto{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *LabourPriceComponentDto) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabourPriceComponentDto) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *LabourPriceComponentDto) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *LabourPriceComponentDto) SetLabel(v string) {
	o.Label = &v
}

// GetPrice returns the Price field value
func (o *LabourPriceComponentDto) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *LabourPriceComponentDto) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *LabourPriceComponentDto) SetPrice(v float32) {
	o.Price = v
}

// GetHourlyWage returns the HourlyWage field value
func (o *LabourPriceComponentDto) GetHourlyWage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.HourlyWage
}

// GetHourlyWageOk returns a tuple with the HourlyWage field value
// and a boolean to check if the value has been set.
func (o *LabourPriceComponentDto) GetHourlyWageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HourlyWage, true
}

// SetHourlyWage sets field value
func (o *LabourPriceComponentDto) SetHourlyWage(v float32) {
	o.HourlyWage = v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *LabourPriceComponentDto) GetValues() []CalculationDto {
	if o == nil || IsNil(o.Values) {
		var ret []CalculationDto
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabourPriceComponentDto) GetValuesOk() ([]CalculationDto, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *LabourPriceComponentDto) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []CalculationDto and assigns it to the Values field.
func (o *LabourPriceComponentDto) SetValues(v []CalculationDto) {
	o.Values = v
}

// GetUseOwnHourlyWage returns the UseOwnHourlyWage field value
func (o *LabourPriceComponentDto) GetUseOwnHourlyWage() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseOwnHourlyWage
}

// GetUseOwnHourlyWageOk returns a tuple with the UseOwnHourlyWage field value
// and a boolean to check if the value has been set.
func (o *LabourPriceComponentDto) GetUseOwnHourlyWageOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseOwnHourlyWage, true
}

// SetUseOwnHourlyWage sets field value
func (o *LabourPriceComponentDto) SetUseOwnHourlyWage(v bool) {
	o.UseOwnHourlyWage = v
}

// GetTotalTime returns the TotalTime field value
func (o *LabourPriceComponentDto) GetTotalTime() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalTime
}

// GetTotalTimeOk returns a tuple with the TotalTime field value
// and a boolean to check if the value has been set.
func (o *LabourPriceComponentDto) GetTotalTimeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalTime, true
}

// SetTotalTime sets field value
func (o *LabourPriceComponentDto) SetTotalTime(v float32) {
	o.TotalTime = v
}

// GetProjectCatalogues returns the ProjectCatalogues field value if set, zero value otherwise.
func (o *LabourPriceComponentDto) GetProjectCatalogues() []CatalogueDto {
	if o == nil || IsNil(o.ProjectCatalogues) {
		var ret []CatalogueDto
		return ret
	}
	return o.ProjectCatalogues
}

// GetProjectCataloguesOk returns a tuple with the ProjectCatalogues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabourPriceComponentDto) GetProjectCataloguesOk() ([]CatalogueDto, bool) {
	if o == nil || IsNil(o.ProjectCatalogues) {
		return nil, false
	}
	return o.ProjectCatalogues, true
}

// HasProjectCatalogues returns a boolean if a field has been set.
func (o *LabourPriceComponentDto) HasProjectCatalogues() bool {
	if o != nil && !IsNil(o.ProjectCatalogues) {
		return true
	}

	return false
}

// SetProjectCatalogues gets a reference to the given []CatalogueDto and assigns it to the ProjectCatalogues field.
func (o *LabourPriceComponentDto) SetProjectCatalogues(v []CatalogueDto) {
	o.ProjectCatalogues = v
}

func (o LabourPriceComponentDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LabourPriceComponentDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	// skip: price is readOnly
	toSerialize["hourlyWage"] = o.HourlyWage
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	toSerialize["useOwnHourlyWage"] = o.UseOwnHourlyWage
	// skip: totalTime is readOnly
	if !IsNil(o.ProjectCatalogues) {
		toSerialize["projectCatalogues"] = o.ProjectCatalogues
	}
	return toSerialize, nil
}

type NullableLabourPriceComponentDto struct {
	value *LabourPriceComponentDto
	isSet bool
}

func (v NullableLabourPriceComponentDto) Get() *LabourPriceComponentDto {
	return v.value
}

func (v *NullableLabourPriceComponentDto) Set(val *LabourPriceComponentDto) {
	v.value = val
	v.isSet = true
}

func (v NullableLabourPriceComponentDto) IsSet() bool {
	return v.isSet
}

func (v *NullableLabourPriceComponentDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabourPriceComponentDto(val *LabourPriceComponentDto) *NullableLabourPriceComponentDto {
	return &NullableLabourPriceComponentDto{value: val, isSet: true}
}

func (v NullableLabourPriceComponentDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabourPriceComponentDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
