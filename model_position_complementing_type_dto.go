/*
AVACloud API 1.41.8

AVACloud API specification

API version: 1.41.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
	"fmt"
)

// PositionComplementingTypeDto This enum represents the different ways in which a complementing position type can be specified. It is typically only used in GAEB exports, since in Dangl.AVA, complementing positions are always explicitly referenced.
type PositionComplementingTypeDto string

// List of PositionComplementingTypeDto
const (
	POSITIONCOMPLEMENTINGTYPEDTO_UNDEFINED                     PositionComplementingTypeDto = "Undefined"
	POSITIONCOMPLEMENTINGTYPEDTO_ALL_PREVIOUS_MARKED_POSITIONS PositionComplementingTypeDto = "AllPreviousMarkedPositions"
	POSITIONCOMPLEMENTINGTYPEDTO_ALL_PREVIOUS_POSITIONS        PositionComplementingTypeDto = "AllPreviousPositions"
	POSITIONCOMPLEMENTINGTYPEDTO_REFERENCED_POSITIONS          PositionComplementingTypeDto = "ReferencedPositions"
)

// All allowed values of PositionComplementingTypeDto enum
var AllowedPositionComplementingTypeDtoEnumValues = []PositionComplementingTypeDto{
	"Undefined",
	"AllPreviousMarkedPositions",
	"AllPreviousPositions",
	"ReferencedPositions",
}

func (v *PositionComplementingTypeDto) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PositionComplementingTypeDto(value)
	for _, existing := range AllowedPositionComplementingTypeDtoEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PositionComplementingTypeDto", value)
}

// NewPositionComplementingTypeDtoFromValue returns a pointer to a valid PositionComplementingTypeDto
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPositionComplementingTypeDtoFromValue(v string) (*PositionComplementingTypeDto, error) {
	ev := PositionComplementingTypeDto(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PositionComplementingTypeDto: valid values are %v", v, AllowedPositionComplementingTypeDtoEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PositionComplementingTypeDto) IsValid() bool {
	for _, existing := range AllowedPositionComplementingTypeDtoEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PositionComplementingTypeDto value
func (v PositionComplementingTypeDto) Ptr() *PositionComplementingTypeDto {
	return &v
}

type NullablePositionComplementingTypeDto struct {
	value *PositionComplementingTypeDto
	isSet bool
}

func (v NullablePositionComplementingTypeDto) Get() *PositionComplementingTypeDto {
	return v.value
}

func (v *NullablePositionComplementingTypeDto) Set(val *PositionComplementingTypeDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePositionComplementingTypeDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePositionComplementingTypeDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePositionComplementingTypeDto(val *PositionComplementingTypeDto) *NullablePositionComplementingTypeDto {
	return &NullablePositionComplementingTypeDto{value: val, isSet: true}
}

func (v NullablePositionComplementingTypeDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePositionComplementingTypeDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
