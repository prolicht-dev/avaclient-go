/*
AVACloud API 2.0.0

AVACloud API specification

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
)

// checks if the PriceInformationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceInformationDto{}

// PriceInformationDto Holds global price information for a ServiceSpecification
type PriceInformationDto struct {
	// Elements GUID identifier.
	Id string `json:"id"`
	// The amount of currency per one hour of manual labour work in this project.
	HourlyWage float32 `json:"hourlyWage"`
	// The final, total price will be deducted by this rate.
	DeductionFactor float32 `json:"deductionFactor"`
	// This is given when there is only one flat price for the whole service specification.
	FlatSum float32 `json:"flatSum"`
	// Global tax rate for the project. Note that certain elements may have a different, specific tax rate.
	TaxRate float32 `json:"taxRate"`
	// This property indicates if the TaxRate property is actually zero (0) or if it's just unset. The TaxRate is a non-nullable property, so it can't be null and therefore a distinction between unset and zero relies on this additional property. When exporting to GAEB, this can be used e.g. to decide whether or not the tax rate should be serialized. This property is automtically set to false when the TaxRate is set to any value, even zero. If the TaxRate is not set to zero, this property will always return false and can not be set to true.
	HasUnsetTaxRate bool `json:"hasUnsetTaxRate"`
	// Trade discounts for offered in this ServiceSpecification.
	TradeDiscounts []TradeDiscountDto `json:"tradeDiscounts,omitempty"`
}

// NewPriceInformationDto instantiates a new PriceInformationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceInformationDto(id string, hourlyWage float32, deductionFactor float32, flatSum float32, taxRate float32, hasUnsetTaxRate bool) *PriceInformationDto {
	this := PriceInformationDto{}
	this.Id = id
	this.HourlyWage = hourlyWage
	this.DeductionFactor = deductionFactor
	this.FlatSum = flatSum
	this.TaxRate = taxRate
	this.HasUnsetTaxRate = hasUnsetTaxRate
	return &this
}

// NewPriceInformationDtoWithDefaults instantiates a new PriceInformationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceInformationDtoWithDefaults() *PriceInformationDto {
	this := PriceInformationDto{}
	return &this
}

// GetId returns the Id field value
func (o *PriceInformationDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PriceInformationDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PriceInformationDto) SetId(v string) {
	o.Id = v
}

// GetHourlyWage returns the HourlyWage field value
func (o *PriceInformationDto) GetHourlyWage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.HourlyWage
}

// GetHourlyWageOk returns a tuple with the HourlyWage field value
// and a boolean to check if the value has been set.
func (o *PriceInformationDto) GetHourlyWageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HourlyWage, true
}

// SetHourlyWage sets field value
func (o *PriceInformationDto) SetHourlyWage(v float32) {
	o.HourlyWage = v
}

// GetDeductionFactor returns the DeductionFactor field value
func (o *PriceInformationDto) GetDeductionFactor() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DeductionFactor
}

// GetDeductionFactorOk returns a tuple with the DeductionFactor field value
// and a boolean to check if the value has been set.
func (o *PriceInformationDto) GetDeductionFactorOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeductionFactor, true
}

// SetDeductionFactor sets field value
func (o *PriceInformationDto) SetDeductionFactor(v float32) {
	o.DeductionFactor = v
}

// GetFlatSum returns the FlatSum field value
func (o *PriceInformationDto) GetFlatSum() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.FlatSum
}

// GetFlatSumOk returns a tuple with the FlatSum field value
// and a boolean to check if the value has been set.
func (o *PriceInformationDto) GetFlatSumOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlatSum, true
}

// SetFlatSum sets field value
func (o *PriceInformationDto) SetFlatSum(v float32) {
	o.FlatSum = v
}

// GetTaxRate returns the TaxRate field value
func (o *PriceInformationDto) GetTaxRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TaxRate
}

// GetTaxRateOk returns a tuple with the TaxRate field value
// and a boolean to check if the value has been set.
func (o *PriceInformationDto) GetTaxRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxRate, true
}

// SetTaxRate sets field value
func (o *PriceInformationDto) SetTaxRate(v float32) {
	o.TaxRate = v
}

// GetHasUnsetTaxRate returns the HasUnsetTaxRate field value
func (o *PriceInformationDto) GetHasUnsetTaxRate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasUnsetTaxRate
}

// GetHasUnsetTaxRateOk returns a tuple with the HasUnsetTaxRate field value
// and a boolean to check if the value has been set.
func (o *PriceInformationDto) GetHasUnsetTaxRateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasUnsetTaxRate, true
}

// SetHasUnsetTaxRate sets field value
func (o *PriceInformationDto) SetHasUnsetTaxRate(v bool) {
	o.HasUnsetTaxRate = v
}

// GetTradeDiscounts returns the TradeDiscounts field value if set, zero value otherwise.
func (o *PriceInformationDto) GetTradeDiscounts() []TradeDiscountDto {
	if o == nil || IsNil(o.TradeDiscounts) {
		var ret []TradeDiscountDto
		return ret
	}
	return o.TradeDiscounts
}

// GetTradeDiscountsOk returns a tuple with the TradeDiscounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceInformationDto) GetTradeDiscountsOk() ([]TradeDiscountDto, bool) {
	if o == nil || IsNil(o.TradeDiscounts) {
		return nil, false
	}
	return o.TradeDiscounts, true
}

// HasTradeDiscounts returns a boolean if a field has been set.
func (o *PriceInformationDto) HasTradeDiscounts() bool {
	if o != nil && !IsNil(o.TradeDiscounts) {
		return true
	}

	return false
}

// SetTradeDiscounts gets a reference to the given []TradeDiscountDto and assigns it to the TradeDiscounts field.
func (o *PriceInformationDto) SetTradeDiscounts(v []TradeDiscountDto) {
	o.TradeDiscounts = v
}

func (o PriceInformationDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceInformationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["hourlyWage"] = o.HourlyWage
	toSerialize["deductionFactor"] = o.DeductionFactor
	toSerialize["flatSum"] = o.FlatSum
	toSerialize["taxRate"] = o.TaxRate
	toSerialize["hasUnsetTaxRate"] = o.HasUnsetTaxRate
	if !IsNil(o.TradeDiscounts) {
		toSerialize["tradeDiscounts"] = o.TradeDiscounts
	}
	return toSerialize, nil
}

type NullablePriceInformationDto struct {
	value *PriceInformationDto
	isSet bool
}

func (v NullablePriceInformationDto) Get() *PriceInformationDto {
	return v.value
}

func (v *NullablePriceInformationDto) Set(val *PriceInformationDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceInformationDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceInformationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceInformationDto(val *PriceInformationDto) *NullablePriceInformationDto {
	return &NullablePriceInformationDto{value: val, isSet: true}
}

func (v NullablePriceInformationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceInformationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
