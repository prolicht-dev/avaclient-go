/*
AVACloud API 1.45.0

AVACloud API specification

API version: 1.45.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
)

// checks if the QuantityAssignmentDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuantityAssignmentDto{}

// QuantityAssignmentDto Quantity assignments are, in contrast to SubDescriptions, used to categorize parts of their parent Position. For example, it could be categorized by cost group - e.g. a Position describing concrete walls could follow the German DIN 276 Cost Groups Standard and specify that of the total 1.000m² wall, 500m² are classified as exterior walls and 500m² are classified as interior walls. They would then have different cost groups associated, e.g. for accounting purposes.
type QuantityAssignmentDto struct {
	// Elements GUID identifier.
	Id string `json:"id"`
	// The total quantity in this quantity assignment
	Quantity float32 `json:"quantity"`
	// These are Catalogue that are used within this ServiceSpecification. Catalogue references are used to describe catalogues, or collections, that can be used to describe elements with commonly known properties. For example, QuantityAssignments use these to categorize themselves.
	ProjectCatalogues []CatalogueDto `json:"projectCatalogues,omitempty"`
	// Referenced catalogues for this QuantityAssignment.
	CatalogueReferences []CatalogueReferenceDto `json:"catalogueReferences,omitempty"`
}

// NewQuantityAssignmentDto instantiates a new QuantityAssignmentDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuantityAssignmentDto(id string, quantity float32) *QuantityAssignmentDto {
	this := QuantityAssignmentDto{}
	this.Id = id
	this.Quantity = quantity
	return &this
}

// NewQuantityAssignmentDtoWithDefaults instantiates a new QuantityAssignmentDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuantityAssignmentDtoWithDefaults() *QuantityAssignmentDto {
	this := QuantityAssignmentDto{}
	return &this
}

// GetId returns the Id field value
func (o *QuantityAssignmentDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *QuantityAssignmentDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *QuantityAssignmentDto) SetId(v string) {
	o.Id = v
}

// GetQuantity returns the Quantity field value
func (o *QuantityAssignmentDto) GetQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *QuantityAssignmentDto) GetQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *QuantityAssignmentDto) SetQuantity(v float32) {
	o.Quantity = v
}

// GetProjectCatalogues returns the ProjectCatalogues field value if set, zero value otherwise.
func (o *QuantityAssignmentDto) GetProjectCatalogues() []CatalogueDto {
	if o == nil || IsNil(o.ProjectCatalogues) {
		var ret []CatalogueDto
		return ret
	}
	return o.ProjectCatalogues
}

// GetProjectCataloguesOk returns a tuple with the ProjectCatalogues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuantityAssignmentDto) GetProjectCataloguesOk() ([]CatalogueDto, bool) {
	if o == nil || IsNil(o.ProjectCatalogues) {
		return nil, false
	}
	return o.ProjectCatalogues, true
}

// HasProjectCatalogues returns a boolean if a field has been set.
func (o *QuantityAssignmentDto) HasProjectCatalogues() bool {
	if o != nil && !IsNil(o.ProjectCatalogues) {
		return true
	}

	return false
}

// SetProjectCatalogues gets a reference to the given []CatalogueDto and assigns it to the ProjectCatalogues field.
func (o *QuantityAssignmentDto) SetProjectCatalogues(v []CatalogueDto) {
	o.ProjectCatalogues = v
}

// GetCatalogueReferences returns the CatalogueReferences field value if set, zero value otherwise.
func (o *QuantityAssignmentDto) GetCatalogueReferences() []CatalogueReferenceDto {
	if o == nil || IsNil(o.CatalogueReferences) {
		var ret []CatalogueReferenceDto
		return ret
	}
	return o.CatalogueReferences
}

// GetCatalogueReferencesOk returns a tuple with the CatalogueReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuantityAssignmentDto) GetCatalogueReferencesOk() ([]CatalogueReferenceDto, bool) {
	if o == nil || IsNil(o.CatalogueReferences) {
		return nil, false
	}
	return o.CatalogueReferences, true
}

// HasCatalogueReferences returns a boolean if a field has been set.
func (o *QuantityAssignmentDto) HasCatalogueReferences() bool {
	if o != nil && !IsNil(o.CatalogueReferences) {
		return true
	}

	return false
}

// SetCatalogueReferences gets a reference to the given []CatalogueReferenceDto and assigns it to the CatalogueReferences field.
func (o *QuantityAssignmentDto) SetCatalogueReferences(v []CatalogueReferenceDto) {
	o.CatalogueReferences = v
}

func (o QuantityAssignmentDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuantityAssignmentDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["quantity"] = o.Quantity
	if !IsNil(o.ProjectCatalogues) {
		toSerialize["projectCatalogues"] = o.ProjectCatalogues
	}
	if !IsNil(o.CatalogueReferences) {
		toSerialize["catalogueReferences"] = o.CatalogueReferences
	}
	return toSerialize, nil
}

type NullableQuantityAssignmentDto struct {
	value *QuantityAssignmentDto
	isSet bool
}

func (v NullableQuantityAssignmentDto) Get() *QuantityAssignmentDto {
	return v.value
}

func (v *NullableQuantityAssignmentDto) Set(val *QuantityAssignmentDto) {
	v.value = val
	v.isSet = true
}

func (v NullableQuantityAssignmentDto) IsSet() bool {
	return v.isSet
}

func (v *NullableQuantityAssignmentDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuantityAssignmentDto(val *QuantityAssignmentDto) *NullableQuantityAssignmentDto {
	return &NullableQuantityAssignmentDto{value: val, isSet: true}
}

func (v NullableQuantityAssignmentDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuantityAssignmentDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
