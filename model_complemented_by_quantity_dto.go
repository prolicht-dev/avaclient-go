/*
AVACloud API 1.45.0

AVACloud API specification

API version: 1.45.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
)

// checks if the ComplementedByQuantityDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComplementedByQuantityDto{}

// ComplementedByQuantityDto This class represents the linking to a complementary position with a specific quantity set. For example, Position 'A' could be complementing Position 'B' with a total quantity of 20 units
type ComplementedByQuantityDto struct {
	// The quantity that is complemented. E.g., if the base position has a quantity of 100 m² of a brick wall, a complementing position might be for 'walls that exceed 3 m height' and for a total quantity of 10 m².
	Quantity float32 `json:"quantity"`
	// This is the reference to the Id of the Position that is complementing. This means it does NOT reference the base position but the one that contains the actual addition.
	ComplementingPositionId *string `json:"complementingPositionId,omitempty"`
}

// NewComplementedByQuantityDto instantiates a new ComplementedByQuantityDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComplementedByQuantityDto(quantity float32) *ComplementedByQuantityDto {
	this := ComplementedByQuantityDto{}
	this.Quantity = quantity
	return &this
}

// NewComplementedByQuantityDtoWithDefaults instantiates a new ComplementedByQuantityDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComplementedByQuantityDtoWithDefaults() *ComplementedByQuantityDto {
	this := ComplementedByQuantityDto{}
	return &this
}

// GetQuantity returns the Quantity field value
func (o *ComplementedByQuantityDto) GetQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *ComplementedByQuantityDto) GetQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *ComplementedByQuantityDto) SetQuantity(v float32) {
	o.Quantity = v
}

// GetComplementingPositionId returns the ComplementingPositionId field value if set, zero value otherwise.
func (o *ComplementedByQuantityDto) GetComplementingPositionId() string {
	if o == nil || IsNil(o.ComplementingPositionId) {
		var ret string
		return ret
	}
	return *o.ComplementingPositionId
}

// GetComplementingPositionIdOk returns a tuple with the ComplementingPositionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplementedByQuantityDto) GetComplementingPositionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ComplementingPositionId) {
		return nil, false
	}
	return o.ComplementingPositionId, true
}

// HasComplementingPositionId returns a boolean if a field has been set.
func (o *ComplementedByQuantityDto) HasComplementingPositionId() bool {
	if o != nil && !IsNil(o.ComplementingPositionId) {
		return true
	}

	return false
}

// SetComplementingPositionId gets a reference to the given string and assigns it to the ComplementingPositionId field.
func (o *ComplementedByQuantityDto) SetComplementingPositionId(v string) {
	o.ComplementingPositionId = &v
}

func (o ComplementedByQuantityDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComplementedByQuantityDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["quantity"] = o.Quantity
	if !IsNil(o.ComplementingPositionId) {
		toSerialize["complementingPositionId"] = o.ComplementingPositionId
	}
	return toSerialize, nil
}

type NullableComplementedByQuantityDto struct {
	value *ComplementedByQuantityDto
	isSet bool
}

func (v NullableComplementedByQuantityDto) Get() *ComplementedByQuantityDto {
	return v.value
}

func (v *NullableComplementedByQuantityDto) Set(val *ComplementedByQuantityDto) {
	v.value = val
	v.isSet = true
}

func (v NullableComplementedByQuantityDto) IsSet() bool {
	return v.isSet
}

func (v *NullableComplementedByQuantityDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComplementedByQuantityDto(val *ComplementedByQuantityDto) *NullableComplementedByQuantityDto {
	return &NullableComplementedByQuantityDto{value: val, isSet: true}
}

func (v NullableComplementedByQuantityDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComplementedByQuantityDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
