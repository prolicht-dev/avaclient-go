/*
AVACloud API 1.41.4

AVACloud API specification

API version: 1.41.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
)

// ValidationApiService ValidationApi service
type ValidationApiService service

type ApiValidationValidateFileRequest struct {
	ctx                      context.Context
	ApiService               *ValidationApiService
	fileValidationSourceType *string
	avaFile                  *os.File
}

// You need to indicate which type of file is being provided, there is no auto detection mechanism
func (r ApiValidationValidateFileRequest) FileValidationSourceType(fileValidationSourceType string) ApiValidationValidateFileRequest {
	r.fileValidationSourceType = &fileValidationSourceType
	return r
}

// The file to validate
func (r ApiValidationValidateFileRequest) AvaFile(avaFile *os.File) ApiValidationValidateFileRequest {
	r.avaFile = avaFile
	return r
}

func (r ApiValidationValidateFileRequest) Execute() (*ValidationResult, *http.Response, error) {
	return r.ApiService.ValidationValidateFileExecute(r)
}

/*
ValidationValidateFile This endpoint validates AVA files, typically GAEB or Ã–Norm. The type of file needs to be provided as a query parameter, since there is no auto detection of the uploaded file type.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiValidationValidateFileRequest
*/
func (a *ValidationApiService) ValidationValidateFile(ctx context.Context) ApiValidationValidateFileRequest {
	return ApiValidationValidateFileRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ValidationResult
func (a *ValidationApiService) ValidationValidateFileExecute(r ApiValidationValidateFileRequest) (*ValidationResult, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ValidationResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ValidationApiService.ValidationValidateFile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/validation/file"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fileValidationSourceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fileValidationSourceType", r.fileValidationSourceType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var avaFileLocalVarFormFileName string
	var avaFileLocalVarFileName string
	var avaFileLocalVarFileBytes []byte

	avaFileLocalVarFormFileName = "avaFile"

	avaFileLocalVarFile := r.avaFile

	if avaFileLocalVarFile != nil {
		fbs, _ := io.ReadAll(avaFileLocalVarFile)

		avaFileLocalVarFileBytes = fbs
		avaFileLocalVarFileName = avaFileLocalVarFile.Name()
		avaFileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: avaFileLocalVarFileBytes, fileName: avaFileLocalVarFileName, formFileName: avaFileLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiValidationValidateProjectRequest struct {
	ctx                               context.Context
	ApiService                        *ValidationApiService
	avaProjectValidationSourceOptions *PostAvaProjectValidationSourceOptions
}

// The options used for the validation operation
func (r ApiValidationValidateProjectRequest) AvaProjectValidationSourceOptions(avaProjectValidationSourceOptions PostAvaProjectValidationSourceOptions) ApiValidationValidateProjectRequest {
	r.avaProjectValidationSourceOptions = &avaProjectValidationSourceOptions
	return r
}

func (r ApiValidationValidateProjectRequest) Execute() (*ValidationResult, *http.Response, error) {
	return r.ApiService.ValidationValidateProjectExecute(r)
}

/*
ValidationValidateProject This endpoint provides a full validation of a provided ProjectDto. It will take the given exchange phase into account and do some general project validation. Optionally, a conversion to a desired target can also be done, in which case the target file will also be validated.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiValidationValidateProjectRequest
*/
func (a *ValidationApiService) ValidationValidateProject(ctx context.Context) ApiValidationValidateProjectRequest {
	return ApiValidationValidateProjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ValidationResult
func (a *ValidationApiService) ValidationValidateProjectExecute(r ApiValidationValidateProjectRequest) (*ValidationResult, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ValidationResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ValidationApiService.ValidationValidateProject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/validation/project"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.avaProjectValidationSourceOptions == nil {
		return localVarReturnValue, nil, reportError("avaProjectValidationSourceOptions is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.avaProjectValidationSourceOptions
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
