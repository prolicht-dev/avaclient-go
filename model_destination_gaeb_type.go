/*
AVACloud API 1.41.4

AVACloud API specification

API version: 1.41.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
	"fmt"
)

// DestinationGaebType Represents valid GAEB target types
type DestinationGaebType string

// List of DestinationGaebType
const (
	DESTINATIONGAEBTYPE_GAEB90                      DestinationGaebType = "Gaeb90"
	DESTINATIONGAEBTYPE_GAEB2000                    DestinationGaebType = "Gaeb2000"
	DESTINATIONGAEBTYPE_GAEB2000_COMMERCE           DestinationGaebType = "Gaeb2000Commerce"
	DESTINATIONGAEBTYPE_GAEB_XML_V3_1               DestinationGaebType = "GaebXml_V3_1"
	DESTINATIONGAEBTYPE_GAEB_XML_V3_2               DestinationGaebType = "GaebXml_V3_2"
	DESTINATIONGAEBTYPE_GAEB_XML_V3_2_COMMERCE      DestinationGaebType = "GaebXml_V3_2_Commerce"
	DESTINATIONGAEBTYPE_GAEB_XML_V3_3               DestinationGaebType = "GaebXml_V3_3"
	DESTINATIONGAEBTYPE_GAEB_XML_V3_3_COMMERCE      DestinationGaebType = "GaebXml_V3_3_Commerce"
	DESTINATIONGAEBTYPE_GAEB_XML_V3_3_2019          DestinationGaebType = "GaebXml_V3_3_2019"
	DESTINATIONGAEBTYPE_GAEB_XML_V3_3_2019_COMMERCE DestinationGaebType = "GaebXml_V3_3_2019_Commerce"
)

// All allowed values of DestinationGaebType enum
var AllowedDestinationGaebTypeEnumValues = []DestinationGaebType{
	"Gaeb90",
	"Gaeb2000",
	"Gaeb2000Commerce",
	"GaebXml_V3_1",
	"GaebXml_V3_2",
	"GaebXml_V3_2_Commerce",
	"GaebXml_V3_3",
	"GaebXml_V3_3_Commerce",
	"GaebXml_V3_3_2019",
	"GaebXml_V3_3_2019_Commerce",
}

func (v *DestinationGaebType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DestinationGaebType(value)
	for _, existing := range AllowedDestinationGaebTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DestinationGaebType", value)
}

// NewDestinationGaebTypeFromValue returns a pointer to a valid DestinationGaebType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDestinationGaebTypeFromValue(v string) (*DestinationGaebType, error) {
	ev := DestinationGaebType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DestinationGaebType: valid values are %v", v, AllowedDestinationGaebTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DestinationGaebType) IsValid() bool {
	for _, existing := range AllowedDestinationGaebTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DestinationGaebType value
func (v DestinationGaebType) Ptr() *DestinationGaebType {
	return &v
}

type NullableDestinationGaebType struct {
	value *DestinationGaebType
	isSet bool
}

func (v NullableDestinationGaebType) Get() *DestinationGaebType {
	return v.value
}

func (v *NullableDestinationGaebType) Set(val *DestinationGaebType) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationGaebType) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationGaebType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationGaebType(val *DestinationGaebType) *NullableDestinationGaebType {
	return &NullableDestinationGaebType{value: val, isSet: true}
}

func (v NullableDestinationGaebType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationGaebType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
