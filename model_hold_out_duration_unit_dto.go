/*
AVACloud API 1.41.8

AVACloud API specification

API version: 1.41.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
	"fmt"
)

// HoldOutDurationUnitDto Duration used in retention positions
type HoldOutDurationUnitDto string

// List of HoldOutDurationUnitDto
const (
	HOLDOUTDURATIONUNITDTO_UNKNOWN HoldOutDurationUnitDto = "Unknown"
	HOLDOUTDURATIONUNITDTO_MINUTES HoldOutDurationUnitDto = "Minutes"
	HOLDOUTDURATIONUNITDTO_HOURS   HoldOutDurationUnitDto = "Hours"
	HOLDOUTDURATIONUNITDTO_DAYS    HoldOutDurationUnitDto = "Days"
	HOLDOUTDURATIONUNITDTO_WEEKS   HoldOutDurationUnitDto = "Weeks"
	HOLDOUTDURATIONUNITDTO_MONTHS  HoldOutDurationUnitDto = "Months"
)

// All allowed values of HoldOutDurationUnitDto enum
var AllowedHoldOutDurationUnitDtoEnumValues = []HoldOutDurationUnitDto{
	"Unknown",
	"Minutes",
	"Hours",
	"Days",
	"Weeks",
	"Months",
}

func (v *HoldOutDurationUnitDto) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HoldOutDurationUnitDto(value)
	for _, existing := range AllowedHoldOutDurationUnitDtoEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HoldOutDurationUnitDto", value)
}

// NewHoldOutDurationUnitDtoFromValue returns a pointer to a valid HoldOutDurationUnitDto
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHoldOutDurationUnitDtoFromValue(v string) (*HoldOutDurationUnitDto, error) {
	ev := HoldOutDurationUnitDto(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HoldOutDurationUnitDto: valid values are %v", v, AllowedHoldOutDurationUnitDtoEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HoldOutDurationUnitDto) IsValid() bool {
	for _, existing := range AllowedHoldOutDurationUnitDtoEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HoldOutDurationUnitDto value
func (v HoldOutDurationUnitDto) Ptr() *HoldOutDurationUnitDto {
	return &v
}

type NullableHoldOutDurationUnitDto struct {
	value *HoldOutDurationUnitDto
	isSet bool
}

func (v NullableHoldOutDurationUnitDto) Get() *HoldOutDurationUnitDto {
	return v.value
}

func (v *NullableHoldOutDurationUnitDto) Set(val *HoldOutDurationUnitDto) {
	v.value = val
	v.isSet = true
}

func (v NullableHoldOutDurationUnitDto) IsSet() bool {
	return v.isSet
}

func (v *NullableHoldOutDurationUnitDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHoldOutDurationUnitDto(val *HoldOutDurationUnitDto) *NullableHoldOutDurationUnitDto {
	return &NullableHoldOutDurationUnitDto{value: val, isSet: true}
}

func (v NullableHoldOutDurationUnitDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHoldOutDurationUnitDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
