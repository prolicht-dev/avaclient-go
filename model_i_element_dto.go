/*
AVACloud API 1.41.8

AVACloud API specification

API version: 1.41.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
)

// checks if the IElementDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IElementDto{}

// IElementDto Base interface definition for elements within an ElementContainerBase.
type IElementDto struct {
	// Elements GUID identifier.
	Id string `json:"id"`
	// This is used to store the GAEB XML Id within this IElement. This data is not used for any calculations or evaluations but only for GAEB serialization and deserialization.
	GaebXmlId *string `json:"gaebXmlId,omitempty"`
	// This optional string property is shared by all IElements, and indicates if the element is part of an addendum, a 'Nachtrag' in German.
	AddendumNumber           *string                 `json:"addendumNumber,omitempty"`
	ProjectCatalogues        []CatalogueDto          `json:"projectCatalogues,omitempty"`
	CatalogueReferences      []CatalogueReferenceDto `json:"catalogueReferences,omitempty"`
	ElementTypeDiscriminator string                  `json:"elementTypeDiscriminator"`
}

// NewIElementDto instantiates a new IElementDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIElementDto(id string, elementTypeDiscriminator string) *IElementDto {
	this := IElementDto{}
	this.Id = id
	this.ElementTypeDiscriminator = elementTypeDiscriminator
	return &this
}

// NewIElementDtoWithDefaults instantiates a new IElementDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIElementDtoWithDefaults() *IElementDto {
	this := IElementDto{}
	return &this
}

// GetId returns the Id field value
func (o *IElementDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IElementDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IElementDto) SetId(v string) {
	o.Id = v
}

// GetGaebXmlId returns the GaebXmlId field value if set, zero value otherwise.
func (o *IElementDto) GetGaebXmlId() string {
	if o == nil || IsNil(o.GaebXmlId) {
		var ret string
		return ret
	}
	return *o.GaebXmlId
}

// GetGaebXmlIdOk returns a tuple with the GaebXmlId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IElementDto) GetGaebXmlIdOk() (*string, bool) {
	if o == nil || IsNil(o.GaebXmlId) {
		return nil, false
	}
	return o.GaebXmlId, true
}

// HasGaebXmlId returns a boolean if a field has been set.
func (o *IElementDto) HasGaebXmlId() bool {
	if o != nil && !IsNil(o.GaebXmlId) {
		return true
	}

	return false
}

// SetGaebXmlId gets a reference to the given string and assigns it to the GaebXmlId field.
func (o *IElementDto) SetGaebXmlId(v string) {
	o.GaebXmlId = &v
}

// GetAddendumNumber returns the AddendumNumber field value if set, zero value otherwise.
func (o *IElementDto) GetAddendumNumber() string {
	if o == nil || IsNil(o.AddendumNumber) {
		var ret string
		return ret
	}
	return *o.AddendumNumber
}

// GetAddendumNumberOk returns a tuple with the AddendumNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IElementDto) GetAddendumNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AddendumNumber) {
		return nil, false
	}
	return o.AddendumNumber, true
}

// HasAddendumNumber returns a boolean if a field has been set.
func (o *IElementDto) HasAddendumNumber() bool {
	if o != nil && !IsNil(o.AddendumNumber) {
		return true
	}

	return false
}

// SetAddendumNumber gets a reference to the given string and assigns it to the AddendumNumber field.
func (o *IElementDto) SetAddendumNumber(v string) {
	o.AddendumNumber = &v
}

// GetProjectCatalogues returns the ProjectCatalogues field value if set, zero value otherwise.
func (o *IElementDto) GetProjectCatalogues() []CatalogueDto {
	if o == nil || IsNil(o.ProjectCatalogues) {
		var ret []CatalogueDto
		return ret
	}
	return o.ProjectCatalogues
}

// GetProjectCataloguesOk returns a tuple with the ProjectCatalogues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IElementDto) GetProjectCataloguesOk() ([]CatalogueDto, bool) {
	if o == nil || IsNil(o.ProjectCatalogues) {
		return nil, false
	}
	return o.ProjectCatalogues, true
}

// HasProjectCatalogues returns a boolean if a field has been set.
func (o *IElementDto) HasProjectCatalogues() bool {
	if o != nil && !IsNil(o.ProjectCatalogues) {
		return true
	}

	return false
}

// SetProjectCatalogues gets a reference to the given []CatalogueDto and assigns it to the ProjectCatalogues field.
func (o *IElementDto) SetProjectCatalogues(v []CatalogueDto) {
	o.ProjectCatalogues = v
}

// GetCatalogueReferences returns the CatalogueReferences field value if set, zero value otherwise.
func (o *IElementDto) GetCatalogueReferences() []CatalogueReferenceDto {
	if o == nil || IsNil(o.CatalogueReferences) {
		var ret []CatalogueReferenceDto
		return ret
	}
	return o.CatalogueReferences
}

// GetCatalogueReferencesOk returns a tuple with the CatalogueReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IElementDto) GetCatalogueReferencesOk() ([]CatalogueReferenceDto, bool) {
	if o == nil || IsNil(o.CatalogueReferences) {
		return nil, false
	}
	return o.CatalogueReferences, true
}

// HasCatalogueReferences returns a boolean if a field has been set.
func (o *IElementDto) HasCatalogueReferences() bool {
	if o != nil && !IsNil(o.CatalogueReferences) {
		return true
	}

	return false
}

// SetCatalogueReferences gets a reference to the given []CatalogueReferenceDto and assigns it to the CatalogueReferences field.
func (o *IElementDto) SetCatalogueReferences(v []CatalogueReferenceDto) {
	o.CatalogueReferences = v
}

// GetElementTypeDiscriminator returns the ElementTypeDiscriminator field value
func (o *IElementDto) GetElementTypeDiscriminator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ElementTypeDiscriminator
}

// GetElementTypeDiscriminatorOk returns a tuple with the ElementTypeDiscriminator field value
// and a boolean to check if the value has been set.
func (o *IElementDto) GetElementTypeDiscriminatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElementTypeDiscriminator, true
}

// SetElementTypeDiscriminator sets field value
func (o *IElementDto) SetElementTypeDiscriminator(v string) {
	o.ElementTypeDiscriminator = v
}

func (o IElementDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IElementDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.GaebXmlId) {
		toSerialize["gaebXmlId"] = o.GaebXmlId
	}
	if !IsNil(o.AddendumNumber) {
		toSerialize["addendumNumber"] = o.AddendumNumber
	}
	if !IsNil(o.ProjectCatalogues) {
		toSerialize["projectCatalogues"] = o.ProjectCatalogues
	}
	if !IsNil(o.CatalogueReferences) {
		toSerialize["catalogueReferences"] = o.CatalogueReferences
	}
	toSerialize["elementTypeDiscriminator"] = o.ElementTypeDiscriminator
	return toSerialize, nil
}

type NullableIElementDto struct {
	value *IElementDto
	isSet bool
}

func (v NullableIElementDto) Get() *IElementDto {
	return v.value
}

func (v *NullableIElementDto) Set(val *IElementDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIElementDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIElementDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIElementDto(val *IElementDto) *NullableIElementDto {
	return &NullableIElementDto{value: val, isSet: true}
}

func (v NullableIElementDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIElementDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
