/*
AVACloud API 2.0.0

AVACloud API specification

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
)

// IdsConnectConversionApiService IdsConnectConversionApi service
type IdsConnectConversionApiService service

type ApiIdsConnectConversionConvertToAvaRequest struct {
	ctx                      context.Context
	ApiService               *IdsConnectConversionApiService
	removePlainTextLongTexts *bool
	removeHtmlLongTexts      *bool
	idsConnectFile           *os.File
}

// If set to true, plain text long texts will be removed from the output to reduce response sizes
func (r ApiIdsConnectConversionConvertToAvaRequest) RemovePlainTextLongTexts(removePlainTextLongTexts bool) ApiIdsConnectConversionConvertToAvaRequest {
	r.removePlainTextLongTexts = &removePlainTextLongTexts
	return r
}

// If set to true, html long texts will be removed from the output to reduce response sizes
func (r ApiIdsConnectConversionConvertToAvaRequest) RemoveHtmlLongTexts(removeHtmlLongTexts bool) ApiIdsConnectConversionConvertToAvaRequest {
	r.removeHtmlLongTexts = &removeHtmlLongTexts
	return r
}

// The input file
func (r ApiIdsConnectConversionConvertToAvaRequest) IdsConnectFile(idsConnectFile *os.File) ApiIdsConnectConversionConvertToAvaRequest {
	r.idsConnectFile = idsConnectFile
	return r
}

func (r ApiIdsConnectConversionConvertToAvaRequest) Execute() (*ProjectDto, *http.Response, error) {
	return r.ApiService.IdsConnectConversionConvertToAvaExecute(r)
}

/*
IdsConnectConversionConvertToAva Converts IDS Connect files to Dangl.AVA projects

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiIdsConnectConversionConvertToAvaRequest
*/
func (a *IdsConnectConversionApiService) IdsConnectConversionConvertToAva(ctx context.Context) ApiIdsConnectConversionConvertToAvaRequest {
	return ApiIdsConnectConversionConvertToAvaRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ProjectDto
func (a *IdsConnectConversionApiService) IdsConnectConversionConvertToAvaExecute(r ApiIdsConnectConversionConvertToAvaRequest) (*ProjectDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdsConnectConversionApiService.IdsConnectConversionConvertToAva")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversion/ids-connect/ava"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.removePlainTextLongTexts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "RemovePlainTextLongTexts", r.removePlainTextLongTexts, "")
	}
	if r.removeHtmlLongTexts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "RemoveHtmlLongTexts", r.removeHtmlLongTexts, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.com.dangl-it.ProjectDto.v1+json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var idsConnectFileLocalVarFormFileName string
	var idsConnectFileLocalVarFileName string
	var idsConnectFileLocalVarFileBytes []byte

	idsConnectFileLocalVarFormFileName = "idsConnectFile"

	idsConnectFileLocalVarFile := r.idsConnectFile

	if idsConnectFileLocalVarFile != nil {
		fbs, _ := io.ReadAll(idsConnectFileLocalVarFile)

		idsConnectFileLocalVarFileBytes = fbs
		idsConnectFileLocalVarFileName = idsConnectFileLocalVarFile.Name()
		idsConnectFileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: idsConnectFileLocalVarFileBytes, fileName: idsConnectFileLocalVarFileName, formFileName: idsConnectFileLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdsConnectConversionConvertToFlatAvaRequest struct {
	ctx            context.Context
	ApiService     *IdsConnectConversionApiService
	idsConnectFile *os.File
}

// The input file
func (r ApiIdsConnectConversionConvertToFlatAvaRequest) IdsConnectFile(idsConnectFile *os.File) ApiIdsConnectConversionConvertToFlatAvaRequest {
	r.idsConnectFile = idsConnectFile
	return r
}

func (r ApiIdsConnectConversionConvertToFlatAvaRequest) Execute() (*FlatAvaProject, *http.Response, error) {
	return r.ApiService.IdsConnectConversionConvertToFlatAvaExecute(r)
}

/*
IdsConnectConversionConvertToFlatAva Converts IDS Connect files to Dangl.AVA projects

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiIdsConnectConversionConvertToFlatAvaRequest
*/
func (a *IdsConnectConversionApiService) IdsConnectConversionConvertToFlatAva(ctx context.Context) ApiIdsConnectConversionConvertToFlatAvaRequest {
	return ApiIdsConnectConversionConvertToFlatAvaRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FlatAvaProject
func (a *IdsConnectConversionApiService) IdsConnectConversionConvertToFlatAvaExecute(r ApiIdsConnectConversionConvertToFlatAvaRequest) (*FlatAvaProject, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FlatAvaProject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdsConnectConversionApiService.IdsConnectConversionConvertToFlatAva")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conversion/ids-connect/flat-ava"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var idsConnectFileLocalVarFormFileName string
	var idsConnectFileLocalVarFileName string
	var idsConnectFileLocalVarFileBytes []byte

	idsConnectFileLocalVarFormFileName = "idsConnectFile"

	idsConnectFileLocalVarFile := r.idsConnectFile

	if idsConnectFileLocalVarFile != nil {
		fbs, _ := io.ReadAll(idsConnectFileLocalVarFile)

		idsConnectFileLocalVarFileBytes = fbs
		idsConnectFileLocalVarFileName = idsConnectFileLocalVarFile.Name()
		idsConnectFileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: idsConnectFileLocalVarFileBytes, fileName: idsConnectFileLocalVarFileName, formFileName: idsConnectFileLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
