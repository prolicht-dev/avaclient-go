/*
AVACloud API 1.41.8

AVACloud API specification

API version: 1.41.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
	"time"
)

// checks if the ServiceSpecificationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceSpecificationDto{}

// ServiceSpecificationDto This is the base class that holds information about a whole service specification.
type ServiceSpecificationDto struct {
	// Elements GUID identifier.
	Id string `json:"id"`
	// The hourly wage that is used within this ElementContainerBase. Will be propagated to child elements.
	ProjectHourlyWage float32 `json:"projectHourlyWage"`
	// The tax rate that is used within this ElementContainerBase. Will be propagated to child elements.
	ProjectTaxRate float32 `json:"projectTaxRate"`
	// The price components that are used within this project. They are ignored during Json deserialization because they will be set from the parent project.
	ProjectPriceComponents  []string             `json:"projectPriceComponents,omitempty"`
	ProjectItemNumberSchema *ItemNumberSchemaDto `json:"projectItemNumberSchema,omitempty"`
	// The IElements within this ElementContainerBase.
	Elements []IElementDtoHolder `json:"elements,omitempty"`
	// The label used in the parent Project to mark labour time, e.g. \"Hours\" or \"Stunden\".
	ProjectLabourTimeLabel *string `json:"projectLabourTimeLabel,omitempty"`
	// Indicates if there are child IElements that have conflicting, duplicated ItemNumbers or if any child ElementContainerBase elements themselves contain duplicate ItemNumber s. Will always indicate false when told to ignore duplicate item numbers.
	ContainsDuplicateItemNumbers bool `json:"containsDuplicateItemNumbers"`
	// Indicates if there are child IElements that have conflicting, duplicated Ids or if any child ElementContainerBase elements themselves contain duplicate Id s. Will always indicate false when told to ignore duplicate item numbers.
	ContainsDuplicateElementIds bool `json:"containsDuplicateElementIds"`
	// Indicate if duplicated ItemNumbers within child elements are to be ignored. Will not perform checks for duplicates if yes.
	IgnoreDuplicateItemNumbers bool `json:"ignoreDuplicateItemNumbers"`
	// Indicate if duplicated Ids within child elements are to be ignored. Will not perform checks for duplicates if yes.
	IgnoreDuplicateElementIds bool `json:"ignoreDuplicateElementIds"`
	// Price composition by tax rate.
	TotalPriceGrossByTaxRate []GrossPriceComponentDto `json:"totalPriceGrossByTaxRate,omitempty"`
	// Internally used to indicate that a propagation is currently done, this is done to not recalculate every single result from a lot of changes when it is sufficient to calculate the total price at once.
	IgnoreChildPriceUpdates bool `json:"ignoreChildPriceUpdates"`
	// Net price after applied deductions.
	DeductedPrice float32 `json:"deductedPrice"`
	// Factor of applied deductions to the total price. For example, \"0.03\" means that a 3% deduction is to be applied.
	DeductionFactor float32 `json:"deductionFactor"`
	// The exact amount of the discount as an absolute value. For backwards compatibility reasons, setting this value will also set a calculated value to DeductionFactor, which will also be updated in case the total price is changed to reflect a relative value of the absolute discount sum.
	AbsoluteDeduction *float32 `json:"absoluteDeduction,omitempty"`
	// Will return this ElementContainerBase's total price.
	TotalPrice float32 `json:"totalPrice"`
	// The total gross price for this ElementContainerBase including all child elements.
	TotalPriceGross float32 `json:"totalPriceGross"`
	// Total gross price after applied deductions.
	TotalPriceGrossDeducted float32              `json:"totalPriceGrossDeducted"`
	PriceType               PriceTypeDto         `json:"priceType"`
	Bidder                  *PartyInformationDto `json:"bidder,omitempty"`
	// This discriminator is used to identify different bidders in a project. It is different from the Identifier property in the Bidder in that the BidderDiscriminator is intended to be a numerical identifier within a project, while the Identifier does uniquely identify a bidder in the system independent of a specific project. This property should map to \"Bieternummer\" or \"BidderNo\" in GAEB.
	BidderDiscriminator *string `json:"bidderDiscriminator,omitempty"`
	// This is used to store the GAEB XML Id within this ServiceSpecification. This data is not used for any calculations or evaluations but only for GAEB serialization and deserialization.
	GaebXmlId          *string                `json:"gaebXmlId,omitempty"`
	ProjectInformation *ProjectInformationDto `json:"projectInformation,omitempty"`
	ExchangePhase      ExchangePhaseDto       `json:"exchangePhase"`
	Origin             OriginDto              `json:"origin"`
	// This property complements the Origin property. Some formats, e.g. GaebXml might have additional information attached, e.g. GAEB XML V3.2 oder GAEB XML V3.1. This string property is used to hold such data. The Dangl.AVA module does not have a list of possible values, since this is defined in the native format assemblies, e.g. Dangl.GAEB or Dangl.Oenorm.
	OriginDetail *string `json:"originDetail,omitempty"`
	// Creation date of this ServiceSpecification.
	CreationDate *time.Time `json:"creationDate,omitempty"`
	// Date indicating until when an offer has to be submitted. In German, this is often called the \"Er√∂ffnungstermin\"
	OfferByDate *time.Time `json:"offerByDate,omitempty"`
	// Date indicating by when the buyer will select a contractor.
	DecisionDate *time.Time `json:"decisionDate,omitempty"`
	// Date of when the offer / bid was created
	BidDate *time.Time `json:"bidDate,omitempty"`
	// If a construction project requires a warranty bond, this property indicates the amount as a percentage, e.g. '0.15m' means 15% of the construction total amount as a warranty bond.
	WarrantyBondPercentage float32 `json:"warrantyBondPercentage"`
	// If a construction project requires an execution guarantty, this property indicates the amount as a percentage, e.g. '0.15m' means 15% of the construction total amount as an execution guarantee. In practice, this percentage is usually deducted from intermediate invoices and only billed in the final invoice.
	ExecutionGuaranteePercentage float32 `json:"executionGuaranteePercentage"`
	// String indicating where the physical submission of the offer is taking place.
	SubmissionLocation *string `json:"submissionLocation,omitempty"`
	// Description of this ServiceSpecification.
	Description *string `json:"description,omitempty"`
	// The name of this ServiceSpecification.
	Name             *string              `json:"name,omitempty"`
	PriceInformation *PriceInformationDto `json:"priceInformation,omitempty"`
	// These are Catalogue that are used within this ElementContainerBase. Catalogue references are used to describe catalogues, or collections, that can be used to describe elements with commonly known properties. For example, QuantityAssignments use these to categorize themselves.
	ProjectCatalogues []CatalogueDto `json:"projectCatalogues,omitempty"`
	// Referenced catalogues for this ElementContainerBase.
	CatalogueReferences []CatalogueReferenceDto `json:"catalogueReferences,omitempty"`
	// The date when the execution of the services is scheduled to start
	PlannedExecutionStart *time.Time `json:"plannedExecutionStart,omitempty"`
	// The date then the execution of the services is scheduled to be finished
	PlannedExecutionEnd *time.Time `json:"plannedExecutionEnd,omitempty"`
	// The date on which the contract has been awarded. This matches \"Auftragsdatum\" in GAEB
	ContractDate *time.Time `json:"contractDate,omitempty"`
	// This value can be used to indicate the number or identifier of the contract. It matches \"Auftragsnummer\" in GAEB
	ContractIdentifier *string              `json:"contractIdentifier,omitempty"`
	WarrantyDuration   *WarrantyDurationDto `json:"warrantyDuration,omitempty"`
	// The date on which the warranty period ends
	WarrantyEnd *time.Time `json:"warrantyEnd,omitempty"`
	// The date on which the services rendered by the bidder are scheduled to be approved by the buyer
	ApprovalDate *time.Time `json:"approvalDate,omitempty"`
	// This should specify how the approval is performed by the buyer. This matches \"AcceptType\" in GAEB
	TypeOfApproval *string `json:"typeOfApproval,omitempty"`
	// This optional string property is shared by all IElements, and indicates if the element is part of an addendum, a 'Nachtrag' in German.
	AddendumNumber     *string                                    `json:"addendumNumber,omitempty"`
	AddendumStatus     *AddendumStatusDto                         `json:"addendumStatus,omitempty"`
	CommerceProperties *ServiceSpecificationCommercePropertiesDto `json:"commerceProperties,omitempty"`
}

// NewServiceSpecificationDto instantiates a new ServiceSpecificationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceSpecificationDto(id string, projectHourlyWage float32, projectTaxRate float32, containsDuplicateItemNumbers bool, containsDuplicateElementIds bool, ignoreDuplicateItemNumbers bool, ignoreDuplicateElementIds bool, ignoreChildPriceUpdates bool, deductedPrice float32, deductionFactor float32, totalPrice float32, totalPriceGross float32, totalPriceGrossDeducted float32, priceType PriceTypeDto, exchangePhase ExchangePhaseDto, origin OriginDto, warrantyBondPercentage float32, executionGuaranteePercentage float32) *ServiceSpecificationDto {
	this := ServiceSpecificationDto{}
	this.Id = id
	this.ProjectHourlyWage = projectHourlyWage
	this.ProjectTaxRate = projectTaxRate
	this.ContainsDuplicateItemNumbers = containsDuplicateItemNumbers
	this.ContainsDuplicateElementIds = containsDuplicateElementIds
	this.IgnoreDuplicateItemNumbers = ignoreDuplicateItemNumbers
	this.IgnoreDuplicateElementIds = ignoreDuplicateElementIds
	this.IgnoreChildPriceUpdates = ignoreChildPriceUpdates
	this.DeductedPrice = deductedPrice
	this.DeductionFactor = deductionFactor
	this.TotalPrice = totalPrice
	this.TotalPriceGross = totalPriceGross
	this.TotalPriceGrossDeducted = totalPriceGrossDeducted
	this.PriceType = priceType
	this.ExchangePhase = exchangePhase
	this.Origin = origin
	this.WarrantyBondPercentage = warrantyBondPercentage
	this.ExecutionGuaranteePercentage = executionGuaranteePercentage
	return &this
}

// NewServiceSpecificationDtoWithDefaults instantiates a new ServiceSpecificationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceSpecificationDtoWithDefaults() *ServiceSpecificationDto {
	this := ServiceSpecificationDto{}
	return &this
}

// GetId returns the Id field value
func (o *ServiceSpecificationDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServiceSpecificationDto) SetId(v string) {
	o.Id = v
}

// GetProjectHourlyWage returns the ProjectHourlyWage field value
func (o *ServiceSpecificationDto) GetProjectHourlyWage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ProjectHourlyWage
}

// GetProjectHourlyWageOk returns a tuple with the ProjectHourlyWage field value
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetProjectHourlyWageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectHourlyWage, true
}

// SetProjectHourlyWage sets field value
func (o *ServiceSpecificationDto) SetProjectHourlyWage(v float32) {
	o.ProjectHourlyWage = v
}

// GetProjectTaxRate returns the ProjectTaxRate field value
func (o *ServiceSpecificationDto) GetProjectTaxRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ProjectTaxRate
}

// GetProjectTaxRateOk returns a tuple with the ProjectTaxRate field value
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetProjectTaxRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectTaxRate, true
}

// SetProjectTaxRate sets field value
func (o *ServiceSpecificationDto) SetProjectTaxRate(v float32) {
	o.ProjectTaxRate = v
}

// GetProjectPriceComponents returns the ProjectPriceComponents field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetProjectPriceComponents() []string {
	if o == nil || IsNil(o.ProjectPriceComponents) {
		var ret []string
		return ret
	}
	return o.ProjectPriceComponents
}

// GetProjectPriceComponentsOk returns a tuple with the ProjectPriceComponents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetProjectPriceComponentsOk() ([]string, bool) {
	if o == nil || IsNil(o.ProjectPriceComponents) {
		return nil, false
	}
	return o.ProjectPriceComponents, true
}

// HasProjectPriceComponents returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasProjectPriceComponents() bool {
	if o != nil && !IsNil(o.ProjectPriceComponents) {
		return true
	}

	return false
}

// SetProjectPriceComponents gets a reference to the given []string and assigns it to the ProjectPriceComponents field.
func (o *ServiceSpecificationDto) SetProjectPriceComponents(v []string) {
	o.ProjectPriceComponents = v
}

// GetProjectItemNumberSchema returns the ProjectItemNumberSchema field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetProjectItemNumberSchema() ItemNumberSchemaDto {
	if o == nil || IsNil(o.ProjectItemNumberSchema) {
		var ret ItemNumberSchemaDto
		return ret
	}
	return *o.ProjectItemNumberSchema
}

// GetProjectItemNumberSchemaOk returns a tuple with the ProjectItemNumberSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetProjectItemNumberSchemaOk() (*ItemNumberSchemaDto, bool) {
	if o == nil || IsNil(o.ProjectItemNumberSchema) {
		return nil, false
	}
	return o.ProjectItemNumberSchema, true
}

// HasProjectItemNumberSchema returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasProjectItemNumberSchema() bool {
	if o != nil && !IsNil(o.ProjectItemNumberSchema) {
		return true
	}

	return false
}

// SetProjectItemNumberSchema gets a reference to the given ItemNumberSchemaDto and assigns it to the ProjectItemNumberSchema field.
func (o *ServiceSpecificationDto) SetProjectItemNumberSchema(v ItemNumberSchemaDto) {
	o.ProjectItemNumberSchema = &v
}

// GetElements returns the Elements field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetElements() []IElementDtoHolder {
	if o == nil || IsNil(o.Elements) {
		var ret []IElementDtoHolder
		return ret
	}
	return o.Elements
}

// GetElementsOk returns a tuple with the Elements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetElementsOk() ([]IElementDtoHolder, bool) {
	if o == nil || IsNil(o.Elements) {
		return nil, false
	}
	return o.Elements, true
}

// HasElements returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasElements() bool {
	if o != nil && !IsNil(o.Elements) {
		return true
	}

	return false
}

// SetElements gets a reference to the given []IElementDtoHolder and assigns it to the Elements field.
func (o *ServiceSpecificationDto) SetElements(v []IElementDtoHolder) {
	o.Elements = v
}

// GetProjectLabourTimeLabel returns the ProjectLabourTimeLabel field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetProjectLabourTimeLabel() string {
	if o == nil || IsNil(o.ProjectLabourTimeLabel) {
		var ret string
		return ret
	}
	return *o.ProjectLabourTimeLabel
}

// GetProjectLabourTimeLabelOk returns a tuple with the ProjectLabourTimeLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetProjectLabourTimeLabelOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectLabourTimeLabel) {
		return nil, false
	}
	return o.ProjectLabourTimeLabel, true
}

// HasProjectLabourTimeLabel returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasProjectLabourTimeLabel() bool {
	if o != nil && !IsNil(o.ProjectLabourTimeLabel) {
		return true
	}

	return false
}

// SetProjectLabourTimeLabel gets a reference to the given string and assigns it to the ProjectLabourTimeLabel field.
func (o *ServiceSpecificationDto) SetProjectLabourTimeLabel(v string) {
	o.ProjectLabourTimeLabel = &v
}

// GetContainsDuplicateItemNumbers returns the ContainsDuplicateItemNumbers field value
func (o *ServiceSpecificationDto) GetContainsDuplicateItemNumbers() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ContainsDuplicateItemNumbers
}

// GetContainsDuplicateItemNumbersOk returns a tuple with the ContainsDuplicateItemNumbers field value
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetContainsDuplicateItemNumbersOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContainsDuplicateItemNumbers, true
}

// SetContainsDuplicateItemNumbers sets field value
func (o *ServiceSpecificationDto) SetContainsDuplicateItemNumbers(v bool) {
	o.ContainsDuplicateItemNumbers = v
}

// GetContainsDuplicateElementIds returns the ContainsDuplicateElementIds field value
func (o *ServiceSpecificationDto) GetContainsDuplicateElementIds() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ContainsDuplicateElementIds
}

// GetContainsDuplicateElementIdsOk returns a tuple with the ContainsDuplicateElementIds field value
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetContainsDuplicateElementIdsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContainsDuplicateElementIds, true
}

// SetContainsDuplicateElementIds sets field value
func (o *ServiceSpecificationDto) SetContainsDuplicateElementIds(v bool) {
	o.ContainsDuplicateElementIds = v
}

// GetIgnoreDuplicateItemNumbers returns the IgnoreDuplicateItemNumbers field value
func (o *ServiceSpecificationDto) GetIgnoreDuplicateItemNumbers() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IgnoreDuplicateItemNumbers
}

// GetIgnoreDuplicateItemNumbersOk returns a tuple with the IgnoreDuplicateItemNumbers field value
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetIgnoreDuplicateItemNumbersOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IgnoreDuplicateItemNumbers, true
}

// SetIgnoreDuplicateItemNumbers sets field value
func (o *ServiceSpecificationDto) SetIgnoreDuplicateItemNumbers(v bool) {
	o.IgnoreDuplicateItemNumbers = v
}

// GetIgnoreDuplicateElementIds returns the IgnoreDuplicateElementIds field value
func (o *ServiceSpecificationDto) GetIgnoreDuplicateElementIds() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IgnoreDuplicateElementIds
}

// GetIgnoreDuplicateElementIdsOk returns a tuple with the IgnoreDuplicateElementIds field value
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetIgnoreDuplicateElementIdsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IgnoreDuplicateElementIds, true
}

// SetIgnoreDuplicateElementIds sets field value
func (o *ServiceSpecificationDto) SetIgnoreDuplicateElementIds(v bool) {
	o.IgnoreDuplicateElementIds = v
}

// GetTotalPriceGrossByTaxRate returns the TotalPriceGrossByTaxRate field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetTotalPriceGrossByTaxRate() []GrossPriceComponentDto {
	if o == nil || IsNil(o.TotalPriceGrossByTaxRate) {
		var ret []GrossPriceComponentDto
		return ret
	}
	return o.TotalPriceGrossByTaxRate
}

// GetTotalPriceGrossByTaxRateOk returns a tuple with the TotalPriceGrossByTaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetTotalPriceGrossByTaxRateOk() ([]GrossPriceComponentDto, bool) {
	if o == nil || IsNil(o.TotalPriceGrossByTaxRate) {
		return nil, false
	}
	return o.TotalPriceGrossByTaxRate, true
}

// HasTotalPriceGrossByTaxRate returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasTotalPriceGrossByTaxRate() bool {
	if o != nil && !IsNil(o.TotalPriceGrossByTaxRate) {
		return true
	}

	return false
}

// SetTotalPriceGrossByTaxRate gets a reference to the given []GrossPriceComponentDto and assigns it to the TotalPriceGrossByTaxRate field.
func (o *ServiceSpecificationDto) SetTotalPriceGrossByTaxRate(v []GrossPriceComponentDto) {
	o.TotalPriceGrossByTaxRate = v
}

// GetIgnoreChildPriceUpdates returns the IgnoreChildPriceUpdates field value
func (o *ServiceSpecificationDto) GetIgnoreChildPriceUpdates() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IgnoreChildPriceUpdates
}

// GetIgnoreChildPriceUpdatesOk returns a tuple with the IgnoreChildPriceUpdates field value
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetIgnoreChildPriceUpdatesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IgnoreChildPriceUpdates, true
}

// SetIgnoreChildPriceUpdates sets field value
func (o *ServiceSpecificationDto) SetIgnoreChildPriceUpdates(v bool) {
	o.IgnoreChildPriceUpdates = v
}

// GetDeductedPrice returns the DeductedPrice field value
func (o *ServiceSpecificationDto) GetDeductedPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DeductedPrice
}

// GetDeductedPriceOk returns a tuple with the DeductedPrice field value
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetDeductedPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeductedPrice, true
}

// SetDeductedPrice sets field value
func (o *ServiceSpecificationDto) SetDeductedPrice(v float32) {
	o.DeductedPrice = v
}

// GetDeductionFactor returns the DeductionFactor field value
func (o *ServiceSpecificationDto) GetDeductionFactor() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DeductionFactor
}

// GetDeductionFactorOk returns a tuple with the DeductionFactor field value
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetDeductionFactorOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeductionFactor, true
}

// SetDeductionFactor sets field value
func (o *ServiceSpecificationDto) SetDeductionFactor(v float32) {
	o.DeductionFactor = v
}

// GetAbsoluteDeduction returns the AbsoluteDeduction field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetAbsoluteDeduction() float32 {
	if o == nil || IsNil(o.AbsoluteDeduction) {
		var ret float32
		return ret
	}
	return *o.AbsoluteDeduction
}

// GetAbsoluteDeductionOk returns a tuple with the AbsoluteDeduction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetAbsoluteDeductionOk() (*float32, bool) {
	if o == nil || IsNil(o.AbsoluteDeduction) {
		return nil, false
	}
	return o.AbsoluteDeduction, true
}

// HasAbsoluteDeduction returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasAbsoluteDeduction() bool {
	if o != nil && !IsNil(o.AbsoluteDeduction) {
		return true
	}

	return false
}

// SetAbsoluteDeduction gets a reference to the given float32 and assigns it to the AbsoluteDeduction field.
func (o *ServiceSpecificationDto) SetAbsoluteDeduction(v float32) {
	o.AbsoluteDeduction = &v
}

// GetTotalPrice returns the TotalPrice field value
func (o *ServiceSpecificationDto) GetTotalPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalPrice
}

// GetTotalPriceOk returns a tuple with the TotalPrice field value
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetTotalPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalPrice, true
}

// SetTotalPrice sets field value
func (o *ServiceSpecificationDto) SetTotalPrice(v float32) {
	o.TotalPrice = v
}

// GetTotalPriceGross returns the TotalPriceGross field value
func (o *ServiceSpecificationDto) GetTotalPriceGross() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalPriceGross
}

// GetTotalPriceGrossOk returns a tuple with the TotalPriceGross field value
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetTotalPriceGrossOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalPriceGross, true
}

// SetTotalPriceGross sets field value
func (o *ServiceSpecificationDto) SetTotalPriceGross(v float32) {
	o.TotalPriceGross = v
}

// GetTotalPriceGrossDeducted returns the TotalPriceGrossDeducted field value
func (o *ServiceSpecificationDto) GetTotalPriceGrossDeducted() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalPriceGrossDeducted
}

// GetTotalPriceGrossDeductedOk returns a tuple with the TotalPriceGrossDeducted field value
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetTotalPriceGrossDeductedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalPriceGrossDeducted, true
}

// SetTotalPriceGrossDeducted sets field value
func (o *ServiceSpecificationDto) SetTotalPriceGrossDeducted(v float32) {
	o.TotalPriceGrossDeducted = v
}

// GetPriceType returns the PriceType field value
func (o *ServiceSpecificationDto) GetPriceType() PriceTypeDto {
	if o == nil {
		var ret PriceTypeDto
		return ret
	}

	return o.PriceType
}

// GetPriceTypeOk returns a tuple with the PriceType field value
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetPriceTypeOk() (*PriceTypeDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceType, true
}

// SetPriceType sets field value
func (o *ServiceSpecificationDto) SetPriceType(v PriceTypeDto) {
	o.PriceType = v
}

// GetBidder returns the Bidder field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetBidder() PartyInformationDto {
	if o == nil || IsNil(o.Bidder) {
		var ret PartyInformationDto
		return ret
	}
	return *o.Bidder
}

// GetBidderOk returns a tuple with the Bidder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetBidderOk() (*PartyInformationDto, bool) {
	if o == nil || IsNil(o.Bidder) {
		return nil, false
	}
	return o.Bidder, true
}

// HasBidder returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasBidder() bool {
	if o != nil && !IsNil(o.Bidder) {
		return true
	}

	return false
}

// SetBidder gets a reference to the given PartyInformationDto and assigns it to the Bidder field.
func (o *ServiceSpecificationDto) SetBidder(v PartyInformationDto) {
	o.Bidder = &v
}

// GetBidderDiscriminator returns the BidderDiscriminator field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetBidderDiscriminator() string {
	if o == nil || IsNil(o.BidderDiscriminator) {
		var ret string
		return ret
	}
	return *o.BidderDiscriminator
}

// GetBidderDiscriminatorOk returns a tuple with the BidderDiscriminator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetBidderDiscriminatorOk() (*string, bool) {
	if o == nil || IsNil(o.BidderDiscriminator) {
		return nil, false
	}
	return o.BidderDiscriminator, true
}

// HasBidderDiscriminator returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasBidderDiscriminator() bool {
	if o != nil && !IsNil(o.BidderDiscriminator) {
		return true
	}

	return false
}

// SetBidderDiscriminator gets a reference to the given string and assigns it to the BidderDiscriminator field.
func (o *ServiceSpecificationDto) SetBidderDiscriminator(v string) {
	o.BidderDiscriminator = &v
}

// GetGaebXmlId returns the GaebXmlId field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetGaebXmlId() string {
	if o == nil || IsNil(o.GaebXmlId) {
		var ret string
		return ret
	}
	return *o.GaebXmlId
}

// GetGaebXmlIdOk returns a tuple with the GaebXmlId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetGaebXmlIdOk() (*string, bool) {
	if o == nil || IsNil(o.GaebXmlId) {
		return nil, false
	}
	return o.GaebXmlId, true
}

// HasGaebXmlId returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasGaebXmlId() bool {
	if o != nil && !IsNil(o.GaebXmlId) {
		return true
	}

	return false
}

// SetGaebXmlId gets a reference to the given string and assigns it to the GaebXmlId field.
func (o *ServiceSpecificationDto) SetGaebXmlId(v string) {
	o.GaebXmlId = &v
}

// GetProjectInformation returns the ProjectInformation field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetProjectInformation() ProjectInformationDto {
	if o == nil || IsNil(o.ProjectInformation) {
		var ret ProjectInformationDto
		return ret
	}
	return *o.ProjectInformation
}

// GetProjectInformationOk returns a tuple with the ProjectInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetProjectInformationOk() (*ProjectInformationDto, bool) {
	if o == nil || IsNil(o.ProjectInformation) {
		return nil, false
	}
	return o.ProjectInformation, true
}

// HasProjectInformation returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasProjectInformation() bool {
	if o != nil && !IsNil(o.ProjectInformation) {
		return true
	}

	return false
}

// SetProjectInformation gets a reference to the given ProjectInformationDto and assigns it to the ProjectInformation field.
func (o *ServiceSpecificationDto) SetProjectInformation(v ProjectInformationDto) {
	o.ProjectInformation = &v
}

// GetExchangePhase returns the ExchangePhase field value
func (o *ServiceSpecificationDto) GetExchangePhase() ExchangePhaseDto {
	if o == nil {
		var ret ExchangePhaseDto
		return ret
	}

	return o.ExchangePhase
}

// GetExchangePhaseOk returns a tuple with the ExchangePhase field value
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetExchangePhaseOk() (*ExchangePhaseDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExchangePhase, true
}

// SetExchangePhase sets field value
func (o *ServiceSpecificationDto) SetExchangePhase(v ExchangePhaseDto) {
	o.ExchangePhase = v
}

// GetOrigin returns the Origin field value
func (o *ServiceSpecificationDto) GetOrigin() OriginDto {
	if o == nil {
		var ret OriginDto
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetOriginOk() (*OriginDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *ServiceSpecificationDto) SetOrigin(v OriginDto) {
	o.Origin = v
}

// GetOriginDetail returns the OriginDetail field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetOriginDetail() string {
	if o == nil || IsNil(o.OriginDetail) {
		var ret string
		return ret
	}
	return *o.OriginDetail
}

// GetOriginDetailOk returns a tuple with the OriginDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetOriginDetailOk() (*string, bool) {
	if o == nil || IsNil(o.OriginDetail) {
		return nil, false
	}
	return o.OriginDetail, true
}

// HasOriginDetail returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasOriginDetail() bool {
	if o != nil && !IsNil(o.OriginDetail) {
		return true
	}

	return false
}

// SetOriginDetail gets a reference to the given string and assigns it to the OriginDetail field.
func (o *ServiceSpecificationDto) SetOriginDetail(v string) {
	o.OriginDetail = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetCreationDate() time.Time {
	if o == nil || IsNil(o.CreationDate) {
		var ret time.Time
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetCreationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasCreationDate() bool {
	if o != nil && !IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given time.Time and assigns it to the CreationDate field.
func (o *ServiceSpecificationDto) SetCreationDate(v time.Time) {
	o.CreationDate = &v
}

// GetOfferByDate returns the OfferByDate field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetOfferByDate() time.Time {
	if o == nil || IsNil(o.OfferByDate) {
		var ret time.Time
		return ret
	}
	return *o.OfferByDate
}

// GetOfferByDateOk returns a tuple with the OfferByDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetOfferByDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.OfferByDate) {
		return nil, false
	}
	return o.OfferByDate, true
}

// HasOfferByDate returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasOfferByDate() bool {
	if o != nil && !IsNil(o.OfferByDate) {
		return true
	}

	return false
}

// SetOfferByDate gets a reference to the given time.Time and assigns it to the OfferByDate field.
func (o *ServiceSpecificationDto) SetOfferByDate(v time.Time) {
	o.OfferByDate = &v
}

// GetDecisionDate returns the DecisionDate field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetDecisionDate() time.Time {
	if o == nil || IsNil(o.DecisionDate) {
		var ret time.Time
		return ret
	}
	return *o.DecisionDate
}

// GetDecisionDateOk returns a tuple with the DecisionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetDecisionDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DecisionDate) {
		return nil, false
	}
	return o.DecisionDate, true
}

// HasDecisionDate returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasDecisionDate() bool {
	if o != nil && !IsNil(o.DecisionDate) {
		return true
	}

	return false
}

// SetDecisionDate gets a reference to the given time.Time and assigns it to the DecisionDate field.
func (o *ServiceSpecificationDto) SetDecisionDate(v time.Time) {
	o.DecisionDate = &v
}

// GetBidDate returns the BidDate field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetBidDate() time.Time {
	if o == nil || IsNil(o.BidDate) {
		var ret time.Time
		return ret
	}
	return *o.BidDate
}

// GetBidDateOk returns a tuple with the BidDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetBidDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.BidDate) {
		return nil, false
	}
	return o.BidDate, true
}

// HasBidDate returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasBidDate() bool {
	if o != nil && !IsNil(o.BidDate) {
		return true
	}

	return false
}

// SetBidDate gets a reference to the given time.Time and assigns it to the BidDate field.
func (o *ServiceSpecificationDto) SetBidDate(v time.Time) {
	o.BidDate = &v
}

// GetWarrantyBondPercentage returns the WarrantyBondPercentage field value
func (o *ServiceSpecificationDto) GetWarrantyBondPercentage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.WarrantyBondPercentage
}

// GetWarrantyBondPercentageOk returns a tuple with the WarrantyBondPercentage field value
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetWarrantyBondPercentageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WarrantyBondPercentage, true
}

// SetWarrantyBondPercentage sets field value
func (o *ServiceSpecificationDto) SetWarrantyBondPercentage(v float32) {
	o.WarrantyBondPercentage = v
}

// GetExecutionGuaranteePercentage returns the ExecutionGuaranteePercentage field value
func (o *ServiceSpecificationDto) GetExecutionGuaranteePercentage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ExecutionGuaranteePercentage
}

// GetExecutionGuaranteePercentageOk returns a tuple with the ExecutionGuaranteePercentage field value
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetExecutionGuaranteePercentageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecutionGuaranteePercentage, true
}

// SetExecutionGuaranteePercentage sets field value
func (o *ServiceSpecificationDto) SetExecutionGuaranteePercentage(v float32) {
	o.ExecutionGuaranteePercentage = v
}

// GetSubmissionLocation returns the SubmissionLocation field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetSubmissionLocation() string {
	if o == nil || IsNil(o.SubmissionLocation) {
		var ret string
		return ret
	}
	return *o.SubmissionLocation
}

// GetSubmissionLocationOk returns a tuple with the SubmissionLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetSubmissionLocationOk() (*string, bool) {
	if o == nil || IsNil(o.SubmissionLocation) {
		return nil, false
	}
	return o.SubmissionLocation, true
}

// HasSubmissionLocation returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasSubmissionLocation() bool {
	if o != nil && !IsNil(o.SubmissionLocation) {
		return true
	}

	return false
}

// SetSubmissionLocation gets a reference to the given string and assigns it to the SubmissionLocation field.
func (o *ServiceSpecificationDto) SetSubmissionLocation(v string) {
	o.SubmissionLocation = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ServiceSpecificationDto) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ServiceSpecificationDto) SetName(v string) {
	o.Name = &v
}

// GetPriceInformation returns the PriceInformation field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetPriceInformation() PriceInformationDto {
	if o == nil || IsNil(o.PriceInformation) {
		var ret PriceInformationDto
		return ret
	}
	return *o.PriceInformation
}

// GetPriceInformationOk returns a tuple with the PriceInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetPriceInformationOk() (*PriceInformationDto, bool) {
	if o == nil || IsNil(o.PriceInformation) {
		return nil, false
	}
	return o.PriceInformation, true
}

// HasPriceInformation returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasPriceInformation() bool {
	if o != nil && !IsNil(o.PriceInformation) {
		return true
	}

	return false
}

// SetPriceInformation gets a reference to the given PriceInformationDto and assigns it to the PriceInformation field.
func (o *ServiceSpecificationDto) SetPriceInformation(v PriceInformationDto) {
	o.PriceInformation = &v
}

// GetProjectCatalogues returns the ProjectCatalogues field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetProjectCatalogues() []CatalogueDto {
	if o == nil || IsNil(o.ProjectCatalogues) {
		var ret []CatalogueDto
		return ret
	}
	return o.ProjectCatalogues
}

// GetProjectCataloguesOk returns a tuple with the ProjectCatalogues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetProjectCataloguesOk() ([]CatalogueDto, bool) {
	if o == nil || IsNil(o.ProjectCatalogues) {
		return nil, false
	}
	return o.ProjectCatalogues, true
}

// HasProjectCatalogues returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasProjectCatalogues() bool {
	if o != nil && !IsNil(o.ProjectCatalogues) {
		return true
	}

	return false
}

// SetProjectCatalogues gets a reference to the given []CatalogueDto and assigns it to the ProjectCatalogues field.
func (o *ServiceSpecificationDto) SetProjectCatalogues(v []CatalogueDto) {
	o.ProjectCatalogues = v
}

// GetCatalogueReferences returns the CatalogueReferences field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetCatalogueReferences() []CatalogueReferenceDto {
	if o == nil || IsNil(o.CatalogueReferences) {
		var ret []CatalogueReferenceDto
		return ret
	}
	return o.CatalogueReferences
}

// GetCatalogueReferencesOk returns a tuple with the CatalogueReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetCatalogueReferencesOk() ([]CatalogueReferenceDto, bool) {
	if o == nil || IsNil(o.CatalogueReferences) {
		return nil, false
	}
	return o.CatalogueReferences, true
}

// HasCatalogueReferences returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasCatalogueReferences() bool {
	if o != nil && !IsNil(o.CatalogueReferences) {
		return true
	}

	return false
}

// SetCatalogueReferences gets a reference to the given []CatalogueReferenceDto and assigns it to the CatalogueReferences field.
func (o *ServiceSpecificationDto) SetCatalogueReferences(v []CatalogueReferenceDto) {
	o.CatalogueReferences = v
}

// GetPlannedExecutionStart returns the PlannedExecutionStart field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetPlannedExecutionStart() time.Time {
	if o == nil || IsNil(o.PlannedExecutionStart) {
		var ret time.Time
		return ret
	}
	return *o.PlannedExecutionStart
}

// GetPlannedExecutionStartOk returns a tuple with the PlannedExecutionStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetPlannedExecutionStartOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PlannedExecutionStart) {
		return nil, false
	}
	return o.PlannedExecutionStart, true
}

// HasPlannedExecutionStart returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasPlannedExecutionStart() bool {
	if o != nil && !IsNil(o.PlannedExecutionStart) {
		return true
	}

	return false
}

// SetPlannedExecutionStart gets a reference to the given time.Time and assigns it to the PlannedExecutionStart field.
func (o *ServiceSpecificationDto) SetPlannedExecutionStart(v time.Time) {
	o.PlannedExecutionStart = &v
}

// GetPlannedExecutionEnd returns the PlannedExecutionEnd field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetPlannedExecutionEnd() time.Time {
	if o == nil || IsNil(o.PlannedExecutionEnd) {
		var ret time.Time
		return ret
	}
	return *o.PlannedExecutionEnd
}

// GetPlannedExecutionEndOk returns a tuple with the PlannedExecutionEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetPlannedExecutionEndOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PlannedExecutionEnd) {
		return nil, false
	}
	return o.PlannedExecutionEnd, true
}

// HasPlannedExecutionEnd returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasPlannedExecutionEnd() bool {
	if o != nil && !IsNil(o.PlannedExecutionEnd) {
		return true
	}

	return false
}

// SetPlannedExecutionEnd gets a reference to the given time.Time and assigns it to the PlannedExecutionEnd field.
func (o *ServiceSpecificationDto) SetPlannedExecutionEnd(v time.Time) {
	o.PlannedExecutionEnd = &v
}

// GetContractDate returns the ContractDate field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetContractDate() time.Time {
	if o == nil || IsNil(o.ContractDate) {
		var ret time.Time
		return ret
	}
	return *o.ContractDate
}

// GetContractDateOk returns a tuple with the ContractDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetContractDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ContractDate) {
		return nil, false
	}
	return o.ContractDate, true
}

// HasContractDate returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasContractDate() bool {
	if o != nil && !IsNil(o.ContractDate) {
		return true
	}

	return false
}

// SetContractDate gets a reference to the given time.Time and assigns it to the ContractDate field.
func (o *ServiceSpecificationDto) SetContractDate(v time.Time) {
	o.ContractDate = &v
}

// GetContractIdentifier returns the ContractIdentifier field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetContractIdentifier() string {
	if o == nil || IsNil(o.ContractIdentifier) {
		var ret string
		return ret
	}
	return *o.ContractIdentifier
}

// GetContractIdentifierOk returns a tuple with the ContractIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetContractIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.ContractIdentifier) {
		return nil, false
	}
	return o.ContractIdentifier, true
}

// HasContractIdentifier returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasContractIdentifier() bool {
	if o != nil && !IsNil(o.ContractIdentifier) {
		return true
	}

	return false
}

// SetContractIdentifier gets a reference to the given string and assigns it to the ContractIdentifier field.
func (o *ServiceSpecificationDto) SetContractIdentifier(v string) {
	o.ContractIdentifier = &v
}

// GetWarrantyDuration returns the WarrantyDuration field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetWarrantyDuration() WarrantyDurationDto {
	if o == nil || IsNil(o.WarrantyDuration) {
		var ret WarrantyDurationDto
		return ret
	}
	return *o.WarrantyDuration
}

// GetWarrantyDurationOk returns a tuple with the WarrantyDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetWarrantyDurationOk() (*WarrantyDurationDto, bool) {
	if o == nil || IsNil(o.WarrantyDuration) {
		return nil, false
	}
	return o.WarrantyDuration, true
}

// HasWarrantyDuration returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasWarrantyDuration() bool {
	if o != nil && !IsNil(o.WarrantyDuration) {
		return true
	}

	return false
}

// SetWarrantyDuration gets a reference to the given WarrantyDurationDto and assigns it to the WarrantyDuration field.
func (o *ServiceSpecificationDto) SetWarrantyDuration(v WarrantyDurationDto) {
	o.WarrantyDuration = &v
}

// GetWarrantyEnd returns the WarrantyEnd field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetWarrantyEnd() time.Time {
	if o == nil || IsNil(o.WarrantyEnd) {
		var ret time.Time
		return ret
	}
	return *o.WarrantyEnd
}

// GetWarrantyEndOk returns a tuple with the WarrantyEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetWarrantyEndOk() (*time.Time, bool) {
	if o == nil || IsNil(o.WarrantyEnd) {
		return nil, false
	}
	return o.WarrantyEnd, true
}

// HasWarrantyEnd returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasWarrantyEnd() bool {
	if o != nil && !IsNil(o.WarrantyEnd) {
		return true
	}

	return false
}

// SetWarrantyEnd gets a reference to the given time.Time and assigns it to the WarrantyEnd field.
func (o *ServiceSpecificationDto) SetWarrantyEnd(v time.Time) {
	o.WarrantyEnd = &v
}

// GetApprovalDate returns the ApprovalDate field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetApprovalDate() time.Time {
	if o == nil || IsNil(o.ApprovalDate) {
		var ret time.Time
		return ret
	}
	return *o.ApprovalDate
}

// GetApprovalDateOk returns a tuple with the ApprovalDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetApprovalDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ApprovalDate) {
		return nil, false
	}
	return o.ApprovalDate, true
}

// HasApprovalDate returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasApprovalDate() bool {
	if o != nil && !IsNil(o.ApprovalDate) {
		return true
	}

	return false
}

// SetApprovalDate gets a reference to the given time.Time and assigns it to the ApprovalDate field.
func (o *ServiceSpecificationDto) SetApprovalDate(v time.Time) {
	o.ApprovalDate = &v
}

// GetTypeOfApproval returns the TypeOfApproval field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetTypeOfApproval() string {
	if o == nil || IsNil(o.TypeOfApproval) {
		var ret string
		return ret
	}
	return *o.TypeOfApproval
}

// GetTypeOfApprovalOk returns a tuple with the TypeOfApproval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetTypeOfApprovalOk() (*string, bool) {
	if o == nil || IsNil(o.TypeOfApproval) {
		return nil, false
	}
	return o.TypeOfApproval, true
}

// HasTypeOfApproval returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasTypeOfApproval() bool {
	if o != nil && !IsNil(o.TypeOfApproval) {
		return true
	}

	return false
}

// SetTypeOfApproval gets a reference to the given string and assigns it to the TypeOfApproval field.
func (o *ServiceSpecificationDto) SetTypeOfApproval(v string) {
	o.TypeOfApproval = &v
}

// GetAddendumNumber returns the AddendumNumber field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetAddendumNumber() string {
	if o == nil || IsNil(o.AddendumNumber) {
		var ret string
		return ret
	}
	return *o.AddendumNumber
}

// GetAddendumNumberOk returns a tuple with the AddendumNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetAddendumNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AddendumNumber) {
		return nil, false
	}
	return o.AddendumNumber, true
}

// HasAddendumNumber returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasAddendumNumber() bool {
	if o != nil && !IsNil(o.AddendumNumber) {
		return true
	}

	return false
}

// SetAddendumNumber gets a reference to the given string and assigns it to the AddendumNumber field.
func (o *ServiceSpecificationDto) SetAddendumNumber(v string) {
	o.AddendumNumber = &v
}

// GetAddendumStatus returns the AddendumStatus field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetAddendumStatus() AddendumStatusDto {
	if o == nil || IsNil(o.AddendumStatus) {
		var ret AddendumStatusDto
		return ret
	}
	return *o.AddendumStatus
}

// GetAddendumStatusOk returns a tuple with the AddendumStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetAddendumStatusOk() (*AddendumStatusDto, bool) {
	if o == nil || IsNil(o.AddendumStatus) {
		return nil, false
	}
	return o.AddendumStatus, true
}

// HasAddendumStatus returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasAddendumStatus() bool {
	if o != nil && !IsNil(o.AddendumStatus) {
		return true
	}

	return false
}

// SetAddendumStatus gets a reference to the given AddendumStatusDto and assigns it to the AddendumStatus field.
func (o *ServiceSpecificationDto) SetAddendumStatus(v AddendumStatusDto) {
	o.AddendumStatus = &v
}

// GetCommerceProperties returns the CommerceProperties field value if set, zero value otherwise.
func (o *ServiceSpecificationDto) GetCommerceProperties() ServiceSpecificationCommercePropertiesDto {
	if o == nil || IsNil(o.CommerceProperties) {
		var ret ServiceSpecificationCommercePropertiesDto
		return ret
	}
	return *o.CommerceProperties
}

// GetCommercePropertiesOk returns a tuple with the CommerceProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSpecificationDto) GetCommercePropertiesOk() (*ServiceSpecificationCommercePropertiesDto, bool) {
	if o == nil || IsNil(o.CommerceProperties) {
		return nil, false
	}
	return o.CommerceProperties, true
}

// HasCommerceProperties returns a boolean if a field has been set.
func (o *ServiceSpecificationDto) HasCommerceProperties() bool {
	if o != nil && !IsNil(o.CommerceProperties) {
		return true
	}

	return false
}

// SetCommerceProperties gets a reference to the given ServiceSpecificationCommercePropertiesDto and assigns it to the CommerceProperties field.
func (o *ServiceSpecificationDto) SetCommerceProperties(v ServiceSpecificationCommercePropertiesDto) {
	o.CommerceProperties = &v
}

func (o ServiceSpecificationDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceSpecificationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	// skip: projectHourlyWage is readOnly
	toSerialize["projectTaxRate"] = o.ProjectTaxRate
	if !IsNil(o.ProjectPriceComponents) {
		toSerialize["projectPriceComponents"] = o.ProjectPriceComponents
	}
	if !IsNil(o.ProjectItemNumberSchema) {
		toSerialize["projectItemNumberSchema"] = o.ProjectItemNumberSchema
	}
	if !IsNil(o.Elements) {
		toSerialize["elements"] = o.Elements
	}
	// skip: projectLabourTimeLabel is readOnly
	// skip: containsDuplicateItemNumbers is readOnly
	// skip: containsDuplicateElementIds is readOnly
	toSerialize["ignoreDuplicateItemNumbers"] = o.IgnoreDuplicateItemNumbers
	toSerialize["ignoreDuplicateElementIds"] = o.IgnoreDuplicateElementIds
	if !IsNil(o.TotalPriceGrossByTaxRate) {
		toSerialize["totalPriceGrossByTaxRate"] = o.TotalPriceGrossByTaxRate
	}
	toSerialize["ignoreChildPriceUpdates"] = o.IgnoreChildPriceUpdates
	// skip: deductedPrice is readOnly
	toSerialize["deductionFactor"] = o.DeductionFactor
	if !IsNil(o.AbsoluteDeduction) {
		toSerialize["absoluteDeduction"] = o.AbsoluteDeduction
	}
	// skip: totalPrice is readOnly
	// skip: totalPriceGross is readOnly
	// skip: totalPriceGrossDeducted is readOnly
	toSerialize["priceType"] = o.PriceType
	if !IsNil(o.Bidder) {
		toSerialize["bidder"] = o.Bidder
	}
	if !IsNil(o.BidderDiscriminator) {
		toSerialize["bidderDiscriminator"] = o.BidderDiscriminator
	}
	if !IsNil(o.GaebXmlId) {
		toSerialize["gaebXmlId"] = o.GaebXmlId
	}
	if !IsNil(o.ProjectInformation) {
		toSerialize["projectInformation"] = o.ProjectInformation
	}
	toSerialize["exchangePhase"] = o.ExchangePhase
	toSerialize["origin"] = o.Origin
	if !IsNil(o.OriginDetail) {
		toSerialize["originDetail"] = o.OriginDetail
	}
	if !IsNil(o.CreationDate) {
		toSerialize["creationDate"] = o.CreationDate
	}
	if !IsNil(o.OfferByDate) {
		toSerialize["offerByDate"] = o.OfferByDate
	}
	if !IsNil(o.DecisionDate) {
		toSerialize["decisionDate"] = o.DecisionDate
	}
	if !IsNil(o.BidDate) {
		toSerialize["bidDate"] = o.BidDate
	}
	toSerialize["warrantyBondPercentage"] = o.WarrantyBondPercentage
	toSerialize["executionGuaranteePercentage"] = o.ExecutionGuaranteePercentage
	if !IsNil(o.SubmissionLocation) {
		toSerialize["submissionLocation"] = o.SubmissionLocation
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PriceInformation) {
		toSerialize["priceInformation"] = o.PriceInformation
	}
	if !IsNil(o.ProjectCatalogues) {
		toSerialize["projectCatalogues"] = o.ProjectCatalogues
	}
	if !IsNil(o.CatalogueReferences) {
		toSerialize["catalogueReferences"] = o.CatalogueReferences
	}
	if !IsNil(o.PlannedExecutionStart) {
		toSerialize["plannedExecutionStart"] = o.PlannedExecutionStart
	}
	if !IsNil(o.PlannedExecutionEnd) {
		toSerialize["plannedExecutionEnd"] = o.PlannedExecutionEnd
	}
	if !IsNil(o.ContractDate) {
		toSerialize["contractDate"] = o.ContractDate
	}
	if !IsNil(o.ContractIdentifier) {
		toSerialize["contractIdentifier"] = o.ContractIdentifier
	}
	if !IsNil(o.WarrantyDuration) {
		toSerialize["warrantyDuration"] = o.WarrantyDuration
	}
	if !IsNil(o.WarrantyEnd) {
		toSerialize["warrantyEnd"] = o.WarrantyEnd
	}
	if !IsNil(o.ApprovalDate) {
		toSerialize["approvalDate"] = o.ApprovalDate
	}
	if !IsNil(o.TypeOfApproval) {
		toSerialize["typeOfApproval"] = o.TypeOfApproval
	}
	if !IsNil(o.AddendumNumber) {
		toSerialize["addendumNumber"] = o.AddendumNumber
	}
	if !IsNil(o.AddendumStatus) {
		toSerialize["addendumStatus"] = o.AddendumStatus
	}
	if !IsNil(o.CommerceProperties) {
		toSerialize["commerceProperties"] = o.CommerceProperties
	}
	return toSerialize, nil
}

type NullableServiceSpecificationDto struct {
	value *ServiceSpecificationDto
	isSet bool
}

func (v NullableServiceSpecificationDto) Get() *ServiceSpecificationDto {
	return v.value
}

func (v *NullableServiceSpecificationDto) Set(val *ServiceSpecificationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceSpecificationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceSpecificationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceSpecificationDto(val *ServiceSpecificationDto) *NullableServiceSpecificationDto {
	return &NullableServiceSpecificationDto{value: val, isSet: true}
}

func (v NullableServiceSpecificationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceSpecificationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
