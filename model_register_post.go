/*
AVACloud API 1.41.8

AVACloud API specification

API version: 1.41.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
)

// checks if the RegisterPost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterPost{}

// RegisterPost struct for RegisterPost
type RegisterPost struct {
	Username           string   `json:"username"`
	Email              string   `json:"email"`
	Password           string   `json:"password"`
	PreferredLanguages []string `json:"preferredLanguages,omitempty"`
}

// NewRegisterPost instantiates a new RegisterPost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterPost(username string, email string, password string) *RegisterPost {
	this := RegisterPost{}
	this.Username = username
	this.Email = email
	this.Password = password
	return &this
}

// NewRegisterPostWithDefaults instantiates a new RegisterPost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterPostWithDefaults() *RegisterPost {
	this := RegisterPost{}
	return &this
}

// GetUsername returns the Username field value
func (o *RegisterPost) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *RegisterPost) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *RegisterPost) SetUsername(v string) {
	o.Username = v
}

// GetEmail returns the Email field value
func (o *RegisterPost) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *RegisterPost) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *RegisterPost) SetEmail(v string) {
	o.Email = v
}

// GetPassword returns the Password field value
func (o *RegisterPost) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *RegisterPost) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *RegisterPost) SetPassword(v string) {
	o.Password = v
}

// GetPreferredLanguages returns the PreferredLanguages field value if set, zero value otherwise.
func (o *RegisterPost) GetPreferredLanguages() []string {
	if o == nil || IsNil(o.PreferredLanguages) {
		var ret []string
		return ret
	}
	return o.PreferredLanguages
}

// GetPreferredLanguagesOk returns a tuple with the PreferredLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterPost) GetPreferredLanguagesOk() ([]string, bool) {
	if o == nil || IsNil(o.PreferredLanguages) {
		return nil, false
	}
	return o.PreferredLanguages, true
}

// HasPreferredLanguages returns a boolean if a field has been set.
func (o *RegisterPost) HasPreferredLanguages() bool {
	if o != nil && !IsNil(o.PreferredLanguages) {
		return true
	}

	return false
}

// SetPreferredLanguages gets a reference to the given []string and assigns it to the PreferredLanguages field.
func (o *RegisterPost) SetPreferredLanguages(v []string) {
	o.PreferredLanguages = v
}

func (o RegisterPost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterPost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["email"] = o.Email
	toSerialize["password"] = o.Password
	if !IsNil(o.PreferredLanguages) {
		toSerialize["preferredLanguages"] = o.PreferredLanguages
	}
	return toSerialize, nil
}

type NullableRegisterPost struct {
	value *RegisterPost
	isSet bool
}

func (v NullableRegisterPost) Get() *RegisterPost {
	return v.value
}

func (v *NullableRegisterPost) Set(val *RegisterPost) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterPost) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterPost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterPost(val *RegisterPost) *NullableRegisterPost {
	return &NullableRegisterPost{value: val, isSet: true}
}

func (v NullableRegisterPost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterPost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
