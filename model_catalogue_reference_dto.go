/*
AVACloud API 1.51.0

AVACloud API specification

API version: 1.51.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
)

// checks if the CatalogueReferenceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogueReferenceDto{}

// CatalogueReferenceDto This class is used to link data between catalogues and objects.
type CatalogueReferenceDto struct {
	// Elements GUID identifier.
	Id string `json:"id"`
	// This points to the item in the catalogue itself. This means that, for example when this quantity assignment references a \"DIN 276\" catalogue, this property indicates the number / identifier / key in DIN 276 that is referenced.
	CatalogueReferenceKey *string `json:"catalogueReferenceKey,omitempty"`
	// The Id of the CatalogueReference that is targeted by this item. Set this property to set the referenced catalogue.
	CatalogueReferenceId string `json:"catalogueReferenceId"`
	// These are CatalogueReference that are used within this ServiceSpecification. Catalogue references are used to describe catalogues, or collections, that can be used to describe elements with commonly known properties. For example, QuantityAssignments use these to categorize themselves.
	ProjectCatalogues []CatalogueDto `json:"projectCatalogues,omitempty"`
	Catalogue         *CatalogueDto  `json:"catalogue,omitempty"`
}

// NewCatalogueReferenceDto instantiates a new CatalogueReferenceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogueReferenceDto(id string, catalogueReferenceId string) *CatalogueReferenceDto {
	this := CatalogueReferenceDto{}
	this.Id = id
	this.CatalogueReferenceId = catalogueReferenceId
	return &this
}

// NewCatalogueReferenceDtoWithDefaults instantiates a new CatalogueReferenceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogueReferenceDtoWithDefaults() *CatalogueReferenceDto {
	this := CatalogueReferenceDto{}
	return &this
}

// GetId returns the Id field value
func (o *CatalogueReferenceDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CatalogueReferenceDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CatalogueReferenceDto) SetId(v string) {
	o.Id = v
}

// GetCatalogueReferenceKey returns the CatalogueReferenceKey field value if set, zero value otherwise.
func (o *CatalogueReferenceDto) GetCatalogueReferenceKey() string {
	if o == nil || IsNil(o.CatalogueReferenceKey) {
		var ret string
		return ret
	}
	return *o.CatalogueReferenceKey
}

// GetCatalogueReferenceKeyOk returns a tuple with the CatalogueReferenceKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogueReferenceDto) GetCatalogueReferenceKeyOk() (*string, bool) {
	if o == nil || IsNil(o.CatalogueReferenceKey) {
		return nil, false
	}
	return o.CatalogueReferenceKey, true
}

// HasCatalogueReferenceKey returns a boolean if a field has been set.
func (o *CatalogueReferenceDto) HasCatalogueReferenceKey() bool {
	if o != nil && !IsNil(o.CatalogueReferenceKey) {
		return true
	}

	return false
}

// SetCatalogueReferenceKey gets a reference to the given string and assigns it to the CatalogueReferenceKey field.
func (o *CatalogueReferenceDto) SetCatalogueReferenceKey(v string) {
	o.CatalogueReferenceKey = &v
}

// GetCatalogueReferenceId returns the CatalogueReferenceId field value
func (o *CatalogueReferenceDto) GetCatalogueReferenceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CatalogueReferenceId
}

// GetCatalogueReferenceIdOk returns a tuple with the CatalogueReferenceId field value
// and a boolean to check if the value has been set.
func (o *CatalogueReferenceDto) GetCatalogueReferenceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogueReferenceId, true
}

// SetCatalogueReferenceId sets field value
func (o *CatalogueReferenceDto) SetCatalogueReferenceId(v string) {
	o.CatalogueReferenceId = v
}

// GetProjectCatalogues returns the ProjectCatalogues field value if set, zero value otherwise.
func (o *CatalogueReferenceDto) GetProjectCatalogues() []CatalogueDto {
	if o == nil || IsNil(o.ProjectCatalogues) {
		var ret []CatalogueDto
		return ret
	}
	return o.ProjectCatalogues
}

// GetProjectCataloguesOk returns a tuple with the ProjectCatalogues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogueReferenceDto) GetProjectCataloguesOk() ([]CatalogueDto, bool) {
	if o == nil || IsNil(o.ProjectCatalogues) {
		return nil, false
	}
	return o.ProjectCatalogues, true
}

// HasProjectCatalogues returns a boolean if a field has been set.
func (o *CatalogueReferenceDto) HasProjectCatalogues() bool {
	if o != nil && !IsNil(o.ProjectCatalogues) {
		return true
	}

	return false
}

// SetProjectCatalogues gets a reference to the given []CatalogueDto and assigns it to the ProjectCatalogues field.
func (o *CatalogueReferenceDto) SetProjectCatalogues(v []CatalogueDto) {
	o.ProjectCatalogues = v
}

// GetCatalogue returns the Catalogue field value if set, zero value otherwise.
func (o *CatalogueReferenceDto) GetCatalogue() CatalogueDto {
	if o == nil || IsNil(o.Catalogue) {
		var ret CatalogueDto
		return ret
	}
	return *o.Catalogue
}

// GetCatalogueOk returns a tuple with the Catalogue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogueReferenceDto) GetCatalogueOk() (*CatalogueDto, bool) {
	if o == nil || IsNil(o.Catalogue) {
		return nil, false
	}
	return o.Catalogue, true
}

// HasCatalogue returns a boolean if a field has been set.
func (o *CatalogueReferenceDto) HasCatalogue() bool {
	if o != nil && !IsNil(o.Catalogue) {
		return true
	}

	return false
}

// SetCatalogue gets a reference to the given CatalogueDto and assigns it to the Catalogue field.
func (o *CatalogueReferenceDto) SetCatalogue(v CatalogueDto) {
	o.Catalogue = &v
}

func (o CatalogueReferenceDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogueReferenceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.CatalogueReferenceKey) {
		toSerialize["catalogueReferenceKey"] = o.CatalogueReferenceKey
	}
	toSerialize["catalogueReferenceId"] = o.CatalogueReferenceId
	if !IsNil(o.ProjectCatalogues) {
		toSerialize["projectCatalogues"] = o.ProjectCatalogues
	}
	if !IsNil(o.Catalogue) {
		toSerialize["catalogue"] = o.Catalogue
	}
	return toSerialize, nil
}

type NullableCatalogueReferenceDto struct {
	value *CatalogueReferenceDto
	isSet bool
}

func (v NullableCatalogueReferenceDto) Get() *CatalogueReferenceDto {
	return v.value
}

func (v *NullableCatalogueReferenceDto) Set(val *CatalogueReferenceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogueReferenceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogueReferenceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogueReferenceDto(val *CatalogueReferenceDto) *NullableCatalogueReferenceDto {
	return &NullableCatalogueReferenceDto{value: val, isSet: true}
}

func (v NullableCatalogueReferenceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogueReferenceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
