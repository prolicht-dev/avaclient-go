/*
AVACloud API 1.45.0

AVACloud API specification

API version: 1.45.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
	"fmt"
)

// ResponseErrorType
type ResponseErrorType string

// List of ResponseErrorType
const (
	RESPONSEERRORTYPE_NONE             ResponseErrorType = "None"
	RESPONSEERRORTYPE_PROTOCOL         ResponseErrorType = "Protocol"
	RESPONSEERRORTYPE_HTTP             ResponseErrorType = "Http"
	RESPONSEERRORTYPE_EXCEPTION        ResponseErrorType = "Exception"
	RESPONSEERRORTYPE_POLICY_VIOLATION ResponseErrorType = "PolicyViolation"
)

// All allowed values of ResponseErrorType enum
var AllowedResponseErrorTypeEnumValues = []ResponseErrorType{
	"None",
	"Protocol",
	"Http",
	"Exception",
	"PolicyViolation",
}

func (v *ResponseErrorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResponseErrorType(value)
	for _, existing := range AllowedResponseErrorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResponseErrorType", value)
}

// NewResponseErrorTypeFromValue returns a pointer to a valid ResponseErrorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResponseErrorTypeFromValue(v string) (*ResponseErrorType, error) {
	ev := ResponseErrorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResponseErrorType: valid values are %v", v, AllowedResponseErrorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResponseErrorType) IsValid() bool {
	for _, existing := range AllowedResponseErrorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResponseErrorType value
func (v ResponseErrorType) Ptr() *ResponseErrorType {
	return &v
}

type NullableResponseErrorType struct {
	value *ResponseErrorType
	isSet bool
}

func (v NullableResponseErrorType) Get() *ResponseErrorType {
	return v.value
}

func (v *NullableResponseErrorType) Set(val *ResponseErrorType) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseErrorType) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseErrorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseErrorType(val *ResponseErrorType) *NullableResponseErrorType {
	return &NullableResponseErrorType{value: val, isSet: true}
}

func (v NullableResponseErrorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseErrorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
