/*
AVACloud API 1.45.0

AVACloud API specification

API version: 1.45.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
	"fmt"
)

// SpecialAwardKindDto This enumeration describes awards for project that are not just a regular procurement. For example, it can be used to describe recurring maintenance or an outline contract (German: Rahmenvertrag) which just specifies services and prices but may be requested on demand when necessary
type SpecialAwardKindDto string

// List of SpecialAwardKindDto
const (
	SPECIALAWARDKINDDTO_UNSPECIFIED                      SpecialAwardKindDto = "Unspecified"
	SPECIALAWARDKINDDTO_MAINTENANCE_CONTRACT             SpecialAwardKindDto = "MaintenanceContract"
	SPECIALAWARDKINDDTO_OUTLINE_CONTRACT                 SpecialAwardKindDto = "OutlineContract"
	SPECIALAWARDKINDDTO_OUTLINE_FOR_MAINTENANCE_CONTRACT SpecialAwardKindDto = "OutlineForMaintenanceContract"
)

// All allowed values of SpecialAwardKindDto enum
var AllowedSpecialAwardKindDtoEnumValues = []SpecialAwardKindDto{
	"Unspecified",
	"MaintenanceContract",
	"OutlineContract",
	"OutlineForMaintenanceContract",
}

func (v *SpecialAwardKindDto) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpecialAwardKindDto(value)
	for _, existing := range AllowedSpecialAwardKindDtoEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpecialAwardKindDto", value)
}

// NewSpecialAwardKindDtoFromValue returns a pointer to a valid SpecialAwardKindDto
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpecialAwardKindDtoFromValue(v string) (*SpecialAwardKindDto, error) {
	ev := SpecialAwardKindDto(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpecialAwardKindDto: valid values are %v", v, AllowedSpecialAwardKindDtoEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpecialAwardKindDto) IsValid() bool {
	for _, existing := range AllowedSpecialAwardKindDtoEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SpecialAwardKindDto value
func (v SpecialAwardKindDto) Ptr() *SpecialAwardKindDto {
	return &v
}

type NullableSpecialAwardKindDto struct {
	value *SpecialAwardKindDto
	isSet bool
}

func (v NullableSpecialAwardKindDto) Get() *SpecialAwardKindDto {
	return v.value
}

func (v *NullableSpecialAwardKindDto) Set(val *SpecialAwardKindDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecialAwardKindDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecialAwardKindDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecialAwardKindDto(val *SpecialAwardKindDto) *NullableSpecialAwardKindDto {
	return &NullableSpecialAwardKindDto{value: val, isSet: true}
}

func (v NullableSpecialAwardKindDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecialAwardKindDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
