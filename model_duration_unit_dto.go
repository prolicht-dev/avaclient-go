/*
AVACloud API 1.51.0

AVACloud API specification

API version: 1.51.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package avaclient

import (
	"encoding/json"
	"fmt"
)

// DurationUnitDto This enumeration represents the unit of a duration
type DurationUnitDto string

// List of DurationUnitDto
const (
	DURATIONUNITDTO_MONTHS DurationUnitDto = "Months"
	DURATIONUNITDTO_YEARS  DurationUnitDto = "Years"
)

// All allowed values of DurationUnitDto enum
var AllowedDurationUnitDtoEnumValues = []DurationUnitDto{
	"Months",
	"Years",
}

func (v *DurationUnitDto) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DurationUnitDto(value)
	for _, existing := range AllowedDurationUnitDtoEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DurationUnitDto", value)
}

// NewDurationUnitDtoFromValue returns a pointer to a valid DurationUnitDto
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDurationUnitDtoFromValue(v string) (*DurationUnitDto, error) {
	ev := DurationUnitDto(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DurationUnitDto: valid values are %v", v, AllowedDurationUnitDtoEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DurationUnitDto) IsValid() bool {
	for _, existing := range AllowedDurationUnitDtoEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DurationUnitDto value
func (v DurationUnitDto) Ptr() *DurationUnitDto {
	return &v
}

type NullableDurationUnitDto struct {
	value *DurationUnitDto
	isSet bool
}

func (v NullableDurationUnitDto) Get() *DurationUnitDto {
	return v.value
}

func (v *NullableDurationUnitDto) Set(val *DurationUnitDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDurationUnitDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDurationUnitDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDurationUnitDto(val *DurationUnitDto) *NullableDurationUnitDto {
	return &NullableDurationUnitDto{value: val, isSet: true}
}

func (v NullableDurationUnitDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDurationUnitDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
